//Source file: C:\\views\\CommonSupervision\\app\\src\\ui\\juvenilecase\\workshopcalendar\\action\\DisplayServiceEventDetailsAction.java

package ui.juvenilecase.workshopcalendar.action ;

import java.util.ArrayList ;
import java.util.Collection ;
import java.util.Collections;
import java.util.HashMap ;
import java.util.List ;
import java.util.Map ;

import javax.servlet.http.HttpServletRequest ;
import javax.servlet.http.HttpServletResponse ;

import messaging.calendar.GetServiceEventAttendanceEvent ;
import messaging.calendar.GetServiceEventCancellationListEvent ;
import messaging.calendar.reply.CalendarServiceEventResponseEvent ;
import messaging.calendar.reply.ServiceEventAttendanceResponseEvent ;
import messaging.calendar.reply.ServiceEventCancellationResponseEvent ;
import mojo.km.dispatch.EventManager ;
import mojo.km.dispatch.IDispatch ;
import mojo.km.messaging.EventFactory ;
import mojo.km.messaging.Composite.CompositeResponse ;
import mojo.km.utilities.MessageUtil ;
import naming.PDCalendarConstants ;
import naming.ServiceEventControllerServiceNames ;
import naming.UIConstants ;

import org.apache.commons.collections.FastArrayList ;
import org.apache.struts.action.ActionForm ;
import org.apache.struts.action.ActionForward ;
import org.apache.struts.action.ActionMapping ;
import org.apache.struts.actions.LookupDispatchAction ;

import ui.juvenilecase.workshopcalendar.form.CalendarEventListForm ;
import ui.juvenilecase.workshopcalendar.form.ScheduleNewEventForm ;
import ui.juvenilecase.workshopcalendar.form.ServiceEventDetailsForm ;

public class DisplayServiceEventDetailsAction extends LookupDispatchAction
{

	/**
	 * @roseuid 44805C380387
	 */
	public DisplayServiceEventDetailsAction( )
	{
	}

	/**
	 * @param aMapping
	 * @param aForm
	 * @param aRequest
	 * @param aResponse
	 * @return ActionForward
	 * @roseuid 447F49B402DD
	 */
	public ActionForward details( ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse )
	{
		String eventId = aRequest.getParameter( "eventId" ) ;
		String windowType = aRequest.getParameter( "windowType" ) ;

		if( eventId != null && eventId.length( ) > 0 )
		{
			List<CalendarServiceEventResponseEvent> eventList = new FastArrayList( ) ;

			ServiceEventDetailsForm detailsForm = (ServiceEventDetailsForm)aForm ;
			Object formObj = aRequest.getSession( ).getAttribute( "calendarEventListForm" ) ;
			if( formObj != null )
			{
				CalendarEventListForm calForm = (CalendarEventListForm)formObj ;
				Collection col = calForm.getDayEvents( ) ;
				if( col != null )
				{
					eventList.addAll( col ) ;
				}
			}
			else
			{
				formObj = aRequest.getSession( ).getAttribute( "scheduleNewEventForm" ) ;
				ScheduleNewEventForm calForm = (ScheduleNewEventForm)formObj ;
				eventList.addAll( calForm.getCurrentService( ).getCurrentEvent( ).getConflictingEvents( ) ) ;
			}

			if( eventList.size( ) > 0 )
			{
				for( CalendarServiceEventResponseEvent event : eventList )
				{
					if( event.getEventId( ).equals( eventId ) )
					{
						detailsForm.setEventId( eventId ) ;
						detailsForm.setCalendarEventId( event.getCalendarEventId( ).toString( ) ) ;
						detailsForm.setServiceProviderName( event.getServiceProviderName( ) ) ;
						detailsForm.setServiceName( event.getServiceName( ) ) ;
						detailsForm.setEventDate( event.getEventDate( ) ) ;
						detailsForm.setServiceLocationName( event.getServiceLocationName( ) ) ;
						detailsForm.setLocationId( event.getLocationId( ) ) ;
						detailsForm.setEventSessionLength( event.getEventSessionLength( ) ) ;
						detailsForm.setEventType( event.getEventType( ) ) ;
						detailsForm.setEventTypeCode(  event.getEventTypeCode( ) ) ;
						detailsForm.setEventStatus( event.getEventStatus( ) ) ;
						detailsForm.setEventStatusCd( event.getEventStatusCode( ) ) ;
						detailsForm.setEventComments( event.getEventComments( ) ) ;
						detailsForm.setAssociatedContexts( event.getAssociatedContexts( ) ) ;
						detailsForm.setAdminUserProfileId( event.getAdminUserProfileId( ) ) ;
						detailsForm.setEventMaximum( event.getMaxAttendance( ) ) ;
						detailsForm.setEventMinimum( event.getMinAttendance( ) ) ;
						detailsForm.setTotalScheduled( event.getCurrentEnrollment( ) ) ;
						detailsForm.setInstructorName( event.getInstructorName( ) ) ;

						/* 5mar08 - mjt - needed to add this because the Detail screen may
						 * need to be popped up from a clicked URL, which means the JSP will
						 * have to adjust what is displayed, such as Instructions and the
						 * buttons, and so forth
						 */
						detailsForm.setWindowType( "details" ) ;
						if( windowType != null  &&  windowType.equals( "popup" ) )
						{
							detailsForm.setWindowType( "popup" ) ;
						}
					}
				}
			}
			detailsForm.setSecondaryAction( "workshopCalendar" ) ;
		}

		return aMapping.findForward( UIConstants.SUCCESS ) ;
	}

	/*
	 * @param aMapping
	 * @param aForm
	 * @param aRequest
	 * @param aResponse
	 * @return
	 */
	public ActionForward back( ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse )
	{
		return aMapping.findForward( UIConstants.BACK ) ;
	}

	/*
	 * @param aMapping
	 * @param aForm
	 * @param aRequest
	 * @param aResponse
	 * @return
	 */
	public ActionForward returnToCalendar( ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse )
	{
		return aMapping.findForward( UIConstants.CANCEL ) ;
	}

	/*
	 * @param aMapping
	 * @param aForm
	 * @param aRequest
	 * @param aResponse
	 * @return
	 */
	public ActionForward documentAttendance( ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse )
	{
		IDispatch dispatch = EventManager.getSharedInstance( EventManager.REQUEST ) ;
		ServiceEventDetailsForm detailsForm = (ServiceEventDetailsForm)aForm ;

		GetServiceEventAttendanceEvent getServAttendanceEvent = (GetServiceEventAttendanceEvent)
				EventFactory.getInstance( ServiceEventControllerServiceNames.GETSERVICEEVENTATTENDANCE ) ;

		getServAttendanceEvent.setServiceEventId( detailsForm.getEventId( ) ) ;
		dispatch.postEvent( getServAttendanceEvent ) ;

		CompositeResponse compositeResponse = (CompositeResponse)dispatch.getReply( ) ;
		Map dataMap = MessageUtil.groupByTopic( compositeResponse ) ;
		MessageUtil.processReturnException( dataMap ) ;

		Collection<ServiceEventAttendanceResponseEvent> eventAttendanceList = 
				MessageUtil.compositeToCollection( compositeResponse, ServiceEventAttendanceResponseEvent.class ) ;
		
		ArrayList existingAttendanceEvents = new ArrayList( ) ;
		ArrayList newAttendanceEvents = new ArrayList( ) ;

		if( eventAttendanceList.size( ) > 0 )
		{
			detailsForm.setAttendanceEventsPresent( true ) ;
			for( ServiceEventAttendanceResponseEvent ev : eventAttendanceList )
			{
				if( ev.getAttendanceStatusCd( ) != null && 
						( ev.getAttendanceStatusCd( ).equals( PDCalendarConstants.JUV_ATTEND_STATUS_CONFIRMED ) || 
						ev.getAttendanceStatusCd( ).equals( PDCalendarConstants.JUV_ATTEND_STATUS_UNCONFIRMED ) ) )
				{
					newAttendanceEvents.add( ev ) ;
				}
				else
				{
					existingAttendanceEvents.add( ev ) ;
				}
			}
		}
		Collections.sort(existingAttendanceEvents, ServiceEventAttendanceResponseEvent.JuvNameComparator);
		Collections.sort(newAttendanceEvents, ServiceEventAttendanceResponseEvent.JuvNameComparator);
		detailsForm.setExistingAttendanceEvents( existingAttendanceEvents ) ;
		detailsForm.setNewAttendanceEvents( newAttendanceEvents ) ;

		if( newAttendanceEvents.size( ) > 0 )
		{
			detailsForm.setAction( "attendanceUpdate" ) ;
		}
		else
		{
			detailsForm.setAction( "attendancePresent" ) ;
		}
		detailsForm.setSecondaryAction( "workshopCalendar" ) ;

		return aMapping.findForward( UIConstants.VIEW_DOCUMENT_ATTENDANCE ) ;
	}

	/*
	 * @param aMapping
	 * @param aForm
	 * @param aRequest
	 * @param aResponse
	 * @return
	 */
	public ActionForward cancelEvent( ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse )
	{
		IDispatch dispatch = EventManager.getSharedInstance( EventManager.REQUEST ) ;
		ServiceEventDetailsForm detailsForm = (ServiceEventDetailsForm)aForm ;

		GetServiceEventCancellationListEvent getCancellationListEvent = (GetServiceEventCancellationListEvent)
				EventFactory.getInstance( ServiceEventControllerServiceNames.GETSERVICEEVENTCANCELLATIONLIST ) ;

		getCancellationListEvent.setServiceEventId( detailsForm.getEventId( ) ) ;

		dispatch.postEvent( getCancellationListEvent ) ;

		CompositeResponse compositeResponse = (CompositeResponse)dispatch.getReply( ) ;
		Map dataMap = MessageUtil.groupByTopic( compositeResponse ) ;
		MessageUtil.processReturnException( dataMap ) ;
		Collection cancellationList = 
				MessageUtil.compositeToCollection( compositeResponse, ServiceEventCancellationResponseEvent.class ) ;

		detailsForm.setCancellationList( cancellationList ) ;
		detailsForm.setAction( "cancellationSummary" ) ;

		return aMapping.findForward( UIConstants.CANCEL_EVENT ) ;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.apache.struts.actions.LookupDispatchAction#getKeyMethodMap()
	 */
	protected Map getKeyMethodMap( )
	{
		Map buttonMap = new HashMap( ) ;
		buttonMap.put( "button.details", "details" ) ;
		buttonMap.put( "button.back", "back" ) ;
		buttonMap.put( "button.returnToCalendar", "returnToCalendar" ) ;
		buttonMap.put( "button.cancelEvent", "cancelEvent" ) ;
		buttonMap.put( "button.documentAttendance", "documentAttendance" ) ;

		return buttonMap ;
	}
}