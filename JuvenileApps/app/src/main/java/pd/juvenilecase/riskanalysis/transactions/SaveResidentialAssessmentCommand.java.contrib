//Source file: C:\\views\\CommonSupervision\\app\\src\\pd\\juvenilecase\\transactions\\SaveResidentialAssessmentCommand.java

package pd.juvenilecase.riskanalysis.transactions;

import java.util.Enumeration;

import naming.PDCodeTableConstants;
import naming.RiskAnalysisConstants;

import pd.exception.ComputationValidationException;
import pd.juvenilecase.JuvenileCasefile;
import pd.juvenilecase.riskanalysis.PDRiskAnalysisHelper;
import pd.juvenilecase.riskanalysis.RiskAnalysis;
import pd.juvenilecase.riskanalysis.RiskAnalysisResidential;
import pd.juvenilecase.riskanalysis.RiskResponse;
import messaging.juvenilecase.reply.RiskRecommendationResponseEvent;
import messaging.riskanalysis.RiskQuestionAnswerEvent;
import messaging.riskanalysis.SaveInterviewAssessmentEvent;
import messaging.riskanalysis.SaveResidentialAssessmentEvent;
import mojo.km.context.ICommand;
import mojo.km.dispatch.EventManager;
import mojo.km.dispatch.IDispatch;
import mojo.km.messaging.IEvent;
import mojo.km.persistence.Home;
import mojo.km.persistence.IHome;

public class SaveResidentialAssessmentCommand implements ICommand 
{
   
   /**
    * @roseuid 4357DD2600BB
    */
   public SaveResidentialAssessmentCommand() 
   {
    
   }
   
   /**
    * @param event
    * @roseuid 4357D9B00177
    */
   public void execute(IEvent event) throws ComputationValidationException
   {
	   SaveResidentialAssessmentEvent saveResAssessEvent = (SaveResidentialAssessmentEvent)event;
		
		if ( saveResAssessEvent.isUpdateOverRiddenStatus() ) {
			   
			   if ( (saveResAssessEvent.getAssessmentID() != null) && (saveResAssessEvent.getAssessmentID().length() > 0) ) {
				   PDRiskAnalysisHelper.updateResidentialRiskAnalysisOverrideStatus(saveResAssessEvent);
			   }
			   	   
		   } else {
			
			   if (saveResAssessEvent.isUpdate()) {
				   saveResidentialUpdate(saveResAssessEvent);
			   } else {
				   saveResidential(saveResAssessEvent);
			   }
			  
		   }
   	
   }

	/**
	 * @param event
	 * @throws ComputationValidationException
	 */
	private void saveResidential(IEvent event)
			throws ComputationValidationException {
		SaveResidentialAssessmentEvent saveResAssessEvent = (SaveResidentialAssessmentEvent)event;
					
		RiskAnalysis riskAnalysis = new RiskAnalysis();
		RiskAnalysisResidential riskResidential = new RiskAnalysisResidential();
		riskAnalysis.setAssessmentType(RiskAnalysisConstants.RISK_TYPE_RESIDENTIAL);
		riskAnalysis.setJuvenileNum(saveResAssessEvent.getJuvenileNum());
		riskAnalysis.setCasefileID(Integer.parseInt(saveResAssessEvent.getCasefileID()));
		riskAnalysis.setEnteredDate(saveResAssessEvent.getAssessmentDate());
		IHome home=new Home();
		home.bind(riskAnalysis);
		PDRiskAnalysisHelper.setCalculatedScoresResidential(riskResidential, saveResAssessEvent, riskAnalysis);
		PDRiskAnalysisHelper.setRiskAnalysisRecommendation(riskAnalysis, RiskAnalysisConstants.RISK_TYPE_RESIDENTIAL);
			
		riskResidential.setRiskAnalysis(riskAnalysis);
	//	riskResidential.setJuvenileNumber(saveResAssessEvent.getJuvenileNum());
	
		Enumeration events = saveResAssessEvent.getRequests();
				
		while (events.hasMoreElements())
		{
			Object obj = events.nextElement();
			if( obj instanceof RiskQuestionAnswerEvent ) {	
				RiskQuestionAnswerEvent riskReqEvent = (RiskQuestionAnswerEvent)obj;
				
				RiskResponse riskResponse =  new RiskResponse();
				riskResponse.setRiskAnalysisId(riskAnalysis.getOID().toString());
				riskResponse.setText(riskReqEvent.getText());
				riskResponse.setWeightedResponseID(String.valueOf(riskReqEvent.getWeightedResponseID()));
			}
		}
				
		RiskRecommendationResponseEvent riskRecommendScore = new RiskRecommendationResponseEvent();
		riskRecommendScore.setRiskAnalysisRecommendation(riskAnalysis.getRecommendation());
		riskRecommendScore.setRiskAnalysisScore(riskAnalysis.getFinalScore());
		riskRecommendScore.setRiskAnalysisId(riskAnalysis.getOID().toString());
			
		IDispatch dispatch = EventManager.getSharedInstance(EventManager.REPLY);		
		dispatch.postEvent(riskRecommendScore);
		JuvenileCasefile myCasefile=JuvenileCasefile.find(saveResAssessEvent.getCasefileID());
		if(myCasefile!=null){
			myCasefile.setIsResidentialRiskNeeded(false);
			PDRiskAnalysisHelper.turnRiskFlagOffOnAllCasefiles(riskAnalysis.getJuvenileNum(),riskAnalysis.getAssessmentType(),myCasefile.getSupervisionCategoryId());
			if(PDCodeTableConstants.CASEFILE_SUPERVISION_TYPE_ENHANCED_SUPERVISION.equals(myCasefile.getSupervisionTypeId())){
				myCasefile.setIsCommunityRiskNeeded(false);
			}
			
		}
	}
	
	/**
	 * This will be for updating existing interviews 
	 * @param saveIntAssessEvent
	 * @throws ComputationValidationException
	 */
	private void saveResidentialUpdate(SaveResidentialAssessmentEvent saveResAssessEvent)
			throws ComputationValidationException {
		
	}
   
   /**
    * @param event
    * @roseuid 4357D9B0017F
    */
   public void onRegister(IEvent event) 
   {
    
   }
   
   /**
    * @param event
    * @roseuid 4357D9B00181
    */
   public void onUnregister(IEvent event) 
   {
    
   }
   
   /**
    * @param anObject
    * @roseuid 4357D9B00183
    */
   public void update(Object anObject) 
   {
    
   }
}
