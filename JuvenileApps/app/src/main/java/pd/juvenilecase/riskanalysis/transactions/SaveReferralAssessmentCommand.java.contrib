//Source file: C:\\views\\CommonSupervision\\app\\src\\pd\\juvenilecase\\transactions\\SaveReferralAssessmentCommand.java

package pd.juvenilecase.riskanalysis.transactions;

import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;

import messaging.juvenilecase.reply.RiskRecommendationResponseEvent;
import messaging.juvenilecase.reply.RiskWeightedResponseEvent;
import messaging.riskanalysis.RiskQuestionAnswerEvent;
import messaging.riskanalysis.SaveDelinquencyHistEvent;
import messaging.riskanalysis.SaveReferralAssessmentEvent;
import mojo.km.context.ICommand;
import mojo.km.dispatch.EventManager;
import mojo.km.dispatch.IDispatch;
import mojo.km.messaging.IEvent;
import mojo.km.persistence.Home;
import mojo.km.persistence.IHome;
import naming.RiskAnalysisConstants;
import pd.exception.ComputationValidationException;
import pd.juvenilecase.JuvenileCasefile;
import pd.juvenilecase.riskanalysis.JuvenileDelinquencyHistory;
import pd.juvenilecase.riskanalysis.PDRiskAnalysisHelper;
import pd.juvenilecase.riskanalysis.RiskAnalysis;
import pd.juvenilecase.riskanalysis.RiskAnalysisReferral;
import pd.juvenilecase.riskanalysis.RiskAnswer;
import pd.juvenilecase.riskanalysis.RiskResponse;

public class SaveReferralAssessmentCommand implements ICommand 
{
   
   /**
    * @roseuid 4342C33D0081
    */
   public SaveReferralAssessmentCommand() 
   {
    
   }
   
   /**
    * @param event
    * @roseuid 433C3D3D0335
    */
   public void execute(IEvent event) throws ComputationValidationException 
   {
	   
	   SaveReferralAssessmentEvent saveRefAssessEvent = (SaveReferralAssessmentEvent)event;
	   
	   if ( saveRefAssessEvent.isUpdateOverRiddenStatus() ) {
	   
		   if ( (saveRefAssessEvent.getAssessmentID() != null) && (saveRefAssessEvent.getAssessmentID().length() > 0) ) {
			   PDRiskAnalysisHelper.updateReferralRiskAnalysisOverrideStatus(saveRefAssessEvent);
		   }
		   	   
	   } else {
		   if (saveRefAssessEvent.isNewReferral() == true) {
			   if (saveRefAssessEvent.isUpdate()) {
				   saveNewReferralUpdate(event);
			   } else {
				   saveNewReferral(event);
			   }
		   } else {
			   saveOldReferral(event);
		   }
	   }
		
   }
   
   public void saveNewReferralUpdate(IEvent event) throws ComputationValidationException {
	   
		SaveReferralAssessmentEvent saveRefAssessEvent = (SaveReferralAssessmentEvent)event;
		
		//Update Risk Analysis with latest Information
		RiskAnalysis riskAnalysis = RiskAnalysis.find( saveRefAssessEvent.getRiskAnalysisId() );
		//riskAnalysis.setEnteredDate(saveRefAssessEvent.getAssessmentDate());
		riskAnalysis.setCreateUserID(saveRefAssessEvent.getJpoUserID());
		
		if ((saveRefAssessEvent.getModReason() != null) && (saveRefAssessEvent.getModReason().length() > 0)) {
        	riskAnalysis.setModReason(saveRefAssessEvent.getModReason());
        } else {
        	riskAnalysis.setModReason("");
        }
			
		IHome home=new Home();
	   	home.bind(riskAnalysis);
		
	    //Update Risk Analysis Referral with latest Information   	
	   	RiskAnalysisReferral riskReferral = RiskAnalysisReferral.findByRiskAnalysisId( saveRefAssessEvent.getRiskAnalysisId() );
		riskReferral.setAdditionalCharges(saveRefAssessEvent.getAdditionalCharges());
		riskReferral.setRiskAnalysis(riskAnalysis);
		riskReferral.setNewReferral(saveRefAssessEvent.isNewReferral());
       
        if ((saveRefAssessEvent.getRiskMandatoryDetentionCd() != null) && (saveRefAssessEvent.getRiskMandatoryDetentionCd().length() > 0)) {
     	    riskReferral.setRiskMandatoryDetentionCd(saveRefAssessEvent.getRiskMandatoryDetentionCd());
        } else {
        	riskReferral.setRiskMandatoryDetentionCd("");
        }
        
       
        if (saveRefAssessEvent.isMoreThanOneFailure()) {
     	    riskReferral.setMoreThanOneFailure(true);
        } else {
       	    riskReferral.setMoreThanOneFailure(false);
        }
       
	    PDRiskAnalysisHelper.setCalculatedScoresNewReferral(riskReferral, saveRefAssessEvent);
	    PDRiskAnalysisHelper.setRiskAnalysisRecommendation(riskAnalysis, RiskAnalysisConstants.RISK_TYPE_CUSTODY_REFERRAL);
	    	    
	     //Delete all old RiskReponses by RiskAnalysisId
		 Collection reponses = riskAnalysis.getRiskResponses();
		 Iterator<RiskResponse> iteResponses = reponses.iterator();
		 while(iteResponses.hasNext()) {
			 RiskResponse riskResponse = iteResponses.next();
			 riskResponse.delete();
		 }
	   
		//Insert new RiskReponses by RiskAnalysisId
	    Enumeration events = saveRefAssessEvent.getRequests();
	    while (events.hasMoreElements())
		{
	    	Object obj = events.nextElement();
			if( obj instanceof RiskQuestionAnswerEvent ) {	
				RiskQuestionAnswerEvent riskReqEvent = (RiskQuestionAnswerEvent)obj;
			
				RiskResponse riskResponse =  new RiskResponse();
				riskResponse.setRiskAnalysisId(riskAnalysis.getOID().toString());
				riskResponse.setText(riskReqEvent.getText());
				riskResponse.setWeightedResponseID(String.valueOf(riskReqEvent.getWeightedResponseID()));
			}
		}
		
		RiskRecommendationResponseEvent riskRecommendScore = new RiskRecommendationResponseEvent();
		riskRecommendScore.setRiskAnalysisRecommendation(riskAnalysis.getRecommendation());
		riskRecommendScore.setRiskAnalysisScore(riskAnalysis.getFinalScore());
		riskRecommendScore.setRiskAnalysisId(riskAnalysis.getOID().toString());

		IDispatch dispatch = EventManager.getSharedInstance(EventManager.REPLY);		
		dispatch.postEvent(riskRecommendScore);
		JuvenileCasefile myCasefile=JuvenileCasefile.find(saveRefAssessEvent.getCasefileID());
		if(myCasefile!=null){
			myCasefile.setIsReferralRiskNeeded(false);
			PDRiskAnalysisHelper.turnRiskFlagOffOnAllCasefiles(riskAnalysis.getJuvenileNum(),riskAnalysis.getAssessmentType(),myCasefile.getSupervisionCategoryId());
		}
	   
  }
   
   public void saveNewReferral(IEvent event) throws ComputationValidationException {
	   
		SaveReferralAssessmentEvent saveRefAssessEvent = (SaveReferralAssessmentEvent)event;
		
		RiskAnalysis riskAnalysis = new RiskAnalysis();
	    
		riskAnalysis.setAssessmentType(RiskAnalysisConstants.RISK_TYPE_CUSTODY_REFERRAL);
		riskAnalysis.setJuvenileNum(saveRefAssessEvent.getJuvenileNum());
		riskAnalysis.setCasefileID(Integer.parseInt(saveRefAssessEvent.getCasefileID()));
		riskAnalysis.setEnteredDate(saveRefAssessEvent.getAssessmentDate());
		riskAnalysis.setCreateUserID(saveRefAssessEvent.getJpoUserID());
		riskAnalysis.setRecommendationOveridden(false);
		riskAnalysis.setCustody(true);
			
		IHome home=new Home();
	   	home.bind(riskAnalysis);
		
	   	RiskAnalysisReferral riskReferral = new RiskAnalysisReferral();
		riskReferral.setAdditionalCharges(saveRefAssessEvent.getAdditionalCharges());
        riskReferral.setRiskAnalysis(riskAnalysis);
        riskReferral.setNewReferral(saveRefAssessEvent.isNewReferral());
        
        if ((saveRefAssessEvent.getRiskMandatoryDetentionCd() != null) && (saveRefAssessEvent.getRiskMandatoryDetentionCd().length() > 0)) {
        	riskReferral.setRiskMandatoryDetentionCd(saveRefAssessEvent.getRiskMandatoryDetentionCd());
        }
        
        if (saveRefAssessEvent.isMoreThanOneFailure()) {
        	riskReferral.setMoreThanOneFailure(true);
        } else {
        	riskReferral.setMoreThanOneFailure(false);
        }
        
       // Used passed in saved values to store new record in Juvenile Deliquency history table instead
       JuvenileDelinquencyHistory jdh=null;
       Enumeration eventsAll = saveRefAssessEvent.getRequests();
       while (eventsAll.hasMoreElements())
		{
	    	Object obj=eventsAll.nextElement();
	    	if(obj instanceof SaveDelinquencyHistEvent){
				SaveDelinquencyHistEvent histEvent = (SaveDelinquencyHistEvent)obj;
				jdh=new JuvenileDelinquencyHistory();
				jdh.setRiskAnalysisId(riskAnalysis.getOID().toString());
				jdh.setAgeFirstReferral(stringToInt(histEvent.getAgeFirstReferred()));
				jdh.setCapFelonyTotal(stringToInt(histEvent.getTotalCapitalFelony()));
				jdh.setFelony1Total(stringToInt(histEvent.getTotalFelony1()));
				jdh.setFelony2Total(stringToInt(histEvent.getTotalFelony2()));
				jdh.setFelony3Total(stringToInt(histEvent.getTotalFelony3()));
				jdh.setJailFelonyTotal(stringToInt(histEvent.getTotalStateJailFelony()));
//				jdh.setJuvenileNumber(saveRefAssessEvent.getJuvenileNum());
				jdh.setLevelTotal(stringToInt(histEvent.getTotalLevel()));
				jdh.setMisdABTotal(stringToInt(histEvent.getTotalClassAB()));
				jdh.setMisdCTotal(stringToInt(histEvent.getTotalClassC()));
				jdh.setReferralHistoryTotal(stringToInt(histEvent.getTotalReferralsHistory()));
				jdh.setScoOffensesTotal(stringToInt(histEvent.getTotalStatusCO()));
				jdh.setSeriousnessIndex(stringToInt(histEvent.getSeriousnessIndex()));
				jdh.setTotalOffenses(stringToInt(histEvent.getTotalOffenses()));
				break;
	    	}
		}
		// END COMMENT
       
       	IHome home2 = new Home();
       	home2.bind(jdh);
		
        saveRefAssessEvent.setRiskAnalysisId(riskAnalysis.getOID().toString());
		PDRiskAnalysisHelper.setCalculatedScoresNewReferral(riskReferral, saveRefAssessEvent);
	    
	    
	    Enumeration events = saveRefAssessEvent.getRequests();
	    PDRiskAnalysisHelper.bindCreateRiskReponses(riskAnalysis.getOID(), events);
	    
	    
	    
	    String mandatoryDetention = "";
		// Retrieves all the responses associated with the RISK_ANALYSIS_ID
		Iterator<RiskAnswer> riskAnswers = RiskAnswer.findAll( 
				RiskAnalysisConstants.RISK_ANALYSIS_ID, riskAnalysis.getOID() );
		

		/*
		 * Temporarily used to manually set a recommendation by it's text
		 * This is not to stay in use long term, just until futher development is done to dynamically tie answers to recommendations
		 * Currently on used in the Detention Risk Analysis.
		 */
		while(riskAnswers.hasNext())
		{
			RiskAnswer riskAnswer = riskAnswers.next();
			if (riskAnswer.getQuestionText().equalsIgnoreCase("Mandatory Detention?")) 
			{
				mandatoryDetention = riskAnswer.getAnswerText();
				break;
			}
		}
		if (mandatoryDetention.equalsIgnoreCase("YES")) {
			riskAnalysis.setRecommendation( "Detain -- Secure Detention" );
   		} else { 
			PDRiskAnalysisHelper.setRiskAnalysisRecommendation(riskAnalysis, RiskAnalysisConstants.RISK_TYPE_CUSTODY_REFERRAL);
		}
	    
		/*There will be one indicator (boolean) per type of Risk Assessment on the casefile 
		 * (These are new attributes that need to be added to the casefile table). Whenever a particular 
		 * type of Risk Assessment is done, you go in and set the indicator to denote that the assessment is done...
		 *  example, we will have a RiskReferralCompleted boolean field on casefile. Whenever a new RiskReferralAssessment 
		 * is done, this flag will be set to true on the casefile that we chose
		 */
		 
		 //TBD.. Need to add columns for all the assessments in JuvenileCaseFile table and then modify this entity
		//JuvenileCasefile juvCaseFile = JuvenileCasefile.find(saveRefAssessEvent.getCasefileID());
		//juvCaseFile.setRiskAssessmentReferral(true);
		
		RiskRecommendationResponseEvent riskRecommendScore = new RiskRecommendationResponseEvent();
		riskRecommendScore.setRiskAnalysisRecommendation(riskAnalysis.getRecommendation());
		riskRecommendScore.setRiskAnalysisScore(riskAnalysis.getFinalScore());
		riskRecommendScore.setRiskAnalysisId(riskAnalysis.getOID().toString());

		IDispatch dispatch = EventManager.getSharedInstance(EventManager.REPLY);		
		dispatch.postEvent(riskRecommendScore);
		JuvenileCasefile myCasefile=JuvenileCasefile.find(saveRefAssessEvent.getCasefileID());
		if(myCasefile!=null){
			myCasefile.setIsReferralRiskNeeded(false);
			PDRiskAnalysisHelper.turnRiskFlagOffOnAllCasefiles(riskAnalysis.getJuvenileNum(),riskAnalysis.getAssessmentType(),myCasefile.getSupervisionCategoryId());
		}
	   
   }
   
   public void saveOldReferral(IEvent event) throws ComputationValidationException {
	   
	   SaveReferralAssessmentEvent saveRefAssessEvent = (SaveReferralAssessmentEvent)event;
		
		RiskAnalysis riskAnalysis = new RiskAnalysis();
	    //boolean isCustody = isCustody(saveRefAssessEvent.getRequests());
		 //riskAnalysis.setCustody(isCustody);
		 
		 riskAnalysis.setCustody(false);
		
			riskAnalysis.setAssessmentType(RiskAnalysisConstants.RISK_TYPE_NON_CUSTODY_REFERRAL);
			riskAnalysis.setJuvenileNum(saveRefAssessEvent.getJuvenileNum());
			riskAnalysis.setCasefileID(Integer.parseInt(saveRefAssessEvent.getCasefileID()));
			riskAnalysis.setEnteredDate(saveRefAssessEvent.getAssessmentDate());
			riskAnalysis.setCreateUserID(saveRefAssessEvent.getJpoUserID());
			
			IHome home=new Home();
	   		home.bind(riskAnalysis);
		RiskAnalysisReferral riskReferral = new RiskAnalysisReferral();
		 riskReferral.setAdditionalCharges(saveRefAssessEvent.getAdditionalCharges());
       riskReferral.setRiskAnalysis(riskAnalysis);

       // Used passed in saved values to store new record in Juvenile Deliquency history table instead
       JuvenileDelinquencyHistory jdh=null;
       Enumeration eventsAll = saveRefAssessEvent.getRequests();
       while (eventsAll.hasMoreElements())
		{
	    	Object obj=eventsAll.nextElement();
	    	if(obj instanceof SaveDelinquencyHistEvent){
				SaveDelinquencyHistEvent histEvent = (SaveDelinquencyHistEvent)obj;
				jdh=new JuvenileDelinquencyHistory();
				jdh.setRiskAnalysisId(riskAnalysis.getOID().toString());
				jdh.setAgeFirstReferral(stringToInt(histEvent.getAgeFirstReferred()));
				jdh.setCapFelonyTotal(stringToInt(histEvent.getTotalCapitalFelony()));
				jdh.setFelony1Total(stringToInt(histEvent.getTotalFelony1()));
				jdh.setFelony2Total(stringToInt(histEvent.getTotalFelony2()));
				jdh.setFelony3Total(stringToInt(histEvent.getTotalFelony3()));
				jdh.setJailFelonyTotal(stringToInt(histEvent.getTotalStateJailFelony()));
//				jdh.setJuvenileNumber(saveRefAssessEvent.getJuvenileNum());
				jdh.setLevelTotal(stringToInt(histEvent.getTotalLevel()));
				jdh.setMisdABTotal(stringToInt(histEvent.getTotalClassAB()));
				jdh.setMisdCTotal(stringToInt(histEvent.getTotalClassC()));
				jdh.setReferralHistoryTotal(stringToInt(histEvent.getTotalReferralsHistory()));
				jdh.setScoOffensesTotal(stringToInt(histEvent.getTotalStatusCO()));
				jdh.setSeriousnessIndex(stringToInt(histEvent.getSeriousnessIndex()));
				jdh.setTotalOffenses(stringToInt(histEvent.getTotalOffenses()));
				break;
	    	}	    	
		}
		// END COMMENT
        IHome home2 = new Home();
      	home2.bind(jdh);
		
        saveRefAssessEvent.setRiskAnalysisId(riskAnalysis.getOID().toString());
		PDRiskAnalysisHelper.setCalculatedScoresReferral(riskReferral, saveRefAssessEvent);
		
		//The old referral will always be considered non-custody. 
		riskAnalysis.setRecommendation(RiskAnalysisConstants.REFFERAL_NON_CUSTODY_RECOMMENDATION);
		
	    Enumeration events = saveRefAssessEvent.getRequests();
	    while (events.hasMoreElements())
		{
	    	Object obj = events.nextElement();
			if( obj instanceof RiskQuestionAnswerEvent ) {	
				RiskQuestionAnswerEvent riskReqEvent = (RiskQuestionAnswerEvent)obj;
	    		
				RiskResponse riskResponse =  new RiskResponse();
				riskResponse.setRiskAnalysisId(riskAnalysis.getOID().toString());
				riskResponse.setText(riskReqEvent.getText());
				riskResponse.setWeightedResponseID(String.valueOf(riskReqEvent.getWeightedResponseID()));
			}
		}
	    
		/*There will be one indicator (boolean) per type of Risk Assessment on the casefile 
		 * (These are new attributes that need to be added to the casefile table). Whenever a particular 
		 * type of Risk Assessment is done, you go in and set the indicator to denote that the assessment is done...
		 *  example, we will have a RiskReferralCompleted boolean field on casefile. Whenever a new RiskReferralAssessment 
		 * is done, this flag will be set to true on the casefile that we chose
		 */
		 
		 //TBD.. Need to add columns for all the assessments in JuvenileCaseFile table and then modify this entity
		//JuvenileCasefile juvCaseFile = JuvenileCasefile.find(saveRefAssessEvent.getCasefileID());
		//juvCaseFile.setRiskAssessmentReferral(true);
		
		RiskRecommendationResponseEvent riskRecommendScore = new RiskRecommendationResponseEvent();
		riskRecommendScore.setRiskAnalysisRecommendation(riskAnalysis.getRecommendation());
		riskRecommendScore.setRiskAnalysisScore(riskAnalysis.getFinalScore());
		riskRecommendScore.setRiskAnalysisId(riskAnalysis.getOID().toString());

		IDispatch dispatch = EventManager.getSharedInstance(EventManager.REPLY);		
		dispatch.postEvent(riskRecommendScore);
		JuvenileCasefile myCasefile=JuvenileCasefile.find(saveRefAssessEvent.getCasefileID());
		if(myCasefile!=null){
			myCasefile.setIsReferralRiskNeeded(false);
			PDRiskAnalysisHelper.turnRiskFlagOffOnAllCasefiles(riskAnalysis.getJuvenileNum(),riskAnalysis.getAssessmentType(),myCasefile.getSupervisionCategoryId());
		}
	   
   }
   
   private int stringToInt(String aVal){
   	
   	if(aVal==null || aVal.trim().equals("") || aVal.trim().equals("0.0")){
   		return 0;
   	}
   	try{
   		return (new Integer(aVal)).intValue();
   	}
   	catch(Exception e){
   		return 0;
   	}
   }
   
   /**
	 * @param events
	 */
	private boolean isCustody(Enumeration events)
	{
		while( events.hasMoreElements() ) {
			Object obj = events.nextElement();
			if( obj instanceof RiskQuestionAnswerEvent ) {	
				RiskQuestionAnswerEvent riskReqEvent = (RiskQuestionAnswerEvent)obj;
				if(riskReqEvent.getQuestionNumber() == 5 && 
						riskReqEvent.getText().equals(RiskAnalysisConstants.NON_CUSTODY)){
					return false;
				}
			}
		}
		return true;
	}

/**
    * @param event
    * @roseuid 433C3D3D033E
    */
   public void onRegister(IEvent event) 
   {
    
   }
   
   /**
    * @param event
    * @roseuid 433C3D3D0340
    */
   public void onUnregister(IEvent event) 
   {
    
   }
   
   /**
    * @param anObject
    * @roseuid 433C3D3D0342
    */
   public void update(Object anObject) 
   {
    
   }

}
