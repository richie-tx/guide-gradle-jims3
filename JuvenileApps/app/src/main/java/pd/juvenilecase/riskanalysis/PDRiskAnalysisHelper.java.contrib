/*
 * Created on Oct 7, 2005
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
package pd.juvenilecase.riskanalysis;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.Vector;
import org.apache.commons.lang.StringUtils ;
import messaging.juvenilecase.GetJuvenileCasefilesEvent;
import messaging.juvenilecase.GetJuvenileTraitTypesEvent;
import messaging.juvenilecase.GetJuvenileTraitsEvent;
import messaging.juvenilecase.GetProbationStatusForRiskAssessmentEvent;
import messaging.juvenilecase.GetTraitChildByCategoryEvent;
import messaging.juvenilecase.reply.CommunityAssessmentEvent;
import messaging.juvenilecase.reply.InterviewAssessmentEvent;
import messaging.juvenilecase.reply.JuvenileTraitResponseEvent;
import messaging.juvenilecase.reply.NoJuvenileCasefilesResponseEvent;
import messaging.juvenilecase.reply.ProgressAssessmentEvent;
import messaging.juvenilecase.reply.ProgressPrefillResponseEvent;
import messaging.juvenilecase.reply.ReferralAssessmentEvent;
import messaging.juvenilecase.reply.ResidentialAssessmentEvent;
import messaging.juvenilecase.reply.RiskAnswerResponseEvent;
import messaging.juvenilecase.reply.RiskQuestionResponseEvent;
import messaging.juvenilecase.reply.RiskWeightedResponseEvent;
import messaging.juvenilecase.reply.TestingAssessmentEvent;
import messaging.juvenilecase.reply.TraitTypeResponseEvent;
import messaging.riskanalysis.CheckPreConditionsForJuvenileEvent;
import messaging.riskanalysis.CheckProgressPreConditionsEvent;
import messaging.riskanalysis.GetLatestRiskAnalysisEvent;
import messaging.riskanalysis.GetRecentRiskAnalysisForJuvenileEvent;
import messaging.riskanalysis.GetRiskAnalysisByCasefileIdAndAssmtTypeEvent;
import messaging.riskanalysis.GetRiskAssessmentDetailsEvent;
import messaging.riskanalysis.SaveCommunityAssessmentEvent;
import messaging.riskanalysis.SaveInterviewAssessmentEvent;
import messaging.riskanalysis.SaveProgressAssessmentEvent;
import messaging.riskanalysis.SaveReferralAssessmentEvent;
import messaging.riskanalysis.SaveResidentialAssessmentEvent;
import messaging.riskanalysis.SaveTestingAssessmentEvent;
import messaging.riskanalysis.reply.CustodyReferralRiskComputationReponseEvent;
import messaging.riskanalysis.reply.NonCustodyReferralComputationResponseEvent;
import messaging.riskanalysis.reply.CommunityRiskComputationReponseEvent;
import messaging.riskanalysis.reply.InterviewRiskComputationReponseEvent;
import messaging.riskanalysis.reply.ResidentialRiskComputationReponseEvent;
import messaging.riskanalysis.reply.TestingRiskComputationReponseEvent;
import messaging.riskanalysis.reply.ProgressRiskComputationReponseEvent;
import mojo.km.dispatch.EventManager;
import mojo.km.dispatch.IDispatch;
import mojo.km.messaging.EventFactory;
import mojo.km.messaging.RequestEvent;
import mojo.km.persistence.Home;
import mojo.km.persistence.IHome;
import naming.JuvenileCaseControllerServiceNames;
import naming.PDCodeTableConstants;
import naming.PDJuvenileCaseConstants;
import naming.RiskAnalysisConstants;
import naming.UIConstants;
import pd.exception.ComputationValidationException;
import pd.juvenilecase.JuvenileCasefile;
import pd.juvenilecase.JuvenileTrait;
import pd.juvenilecase.TraitType;
import pd.juvenilecase.riskanalysis.riskanalysiscomputation.RiskComputationContext;
import pd.juvenilecase.rules.RuleGroupConditionView;

/**
 * @author kmurthy To change the template for this generated type comment go to
 *         Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
public class PDRiskAnalysisHelper
{
	
public static boolean doesRiskAnalysisExistWithinTheHour(String casefile, String assessmentType) {
		
		GetLatestRiskAnalysisEvent event = new GetLatestRiskAnalysisEvent();
		event.setCasefileID( casefile );
		event.setAssessmentType( assessmentType );
		Iterator<RiskAnalysis> i = RiskAnalysis.findAll( event );
		boolean bool = false;
		
		if( i != null && i.hasNext() )
		{
			while(i.hasNext())
			{
				RiskAnalysis riskAnalysis = i.next();
				
				//DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
				Calendar enteredDate = Calendar.getInstance();
				enteredDate.setTime(riskAnalysis.getEnteredDate());
				//System.out.println("Entered Date Time : " + dateFormat.format(enteredDate.getTime()));
				
				Calendar currentDateMinusOneHour = Calendar.getInstance();
				currentDateMinusOneHour.add(Calendar.HOUR, -1);
				//System.out.println("Current Date Time Minus One Hour : " + dateFormat.format(currentDateMinusOneHour.getTime()));
				
				if (currentDateMinusOneHour.after(enteredDate)) {
					//A casefile does not exist within the hour of the same type with same casefile #
					bool = false;
				} else {
					//A casefile exist within the hour of the same type with same casefile #
					bool = true;
				}
				
			}
			
		} else {
			bool = false;
		}
		
		return bool;
	}
	
	/*
	 * This method will set the risk analysis flags on all casefiles to false or
	 * not required juvenileNum is the juv num riskAssessmentType - is the type of
	 * flag to flip apply to Lower flags means that if a for instance interview is
	 * being set to no, and applyToLowerFlags is true then the Referral flag will
	 * also be set to no.
	 */
	public static void turnRiskFlagOffOnAllCasefiles( String aJuvenileNum, String aRiskAssessmentType, String aSupervisionCategory )
	{
		IDispatch dispatch = EventManager.getSharedInstance( EventManager.REPLY );
		String errorMsg = null;

		if( aJuvenileNum != null && !aJuvenileNum.equals( UIConstants.EMPTY_STRING ) )
		{
			if( aRiskAssessmentType != null )
			{
				GetJuvenileCasefilesEvent getEvent = new GetJuvenileCasefilesEvent();
				getEvent.setJuvenileNum( aJuvenileNum );

				Iterator<JuvenileCasefile> i = JuvenileCasefile.findAll( getEvent );
				if( i != null && i.hasNext() )
				{
					while(i.hasNext())
					{
						JuvenileCasefile casefile = i.next();
						if( RiskAnalysisConstants.RISK_TYPE_NON_CUSTODY_REFERRAL.equals( aRiskAssessmentType ) )
						{
							casefile.setIsReferralRiskNeeded( false );
						}
						else if( RiskAnalysisConstants.RISK_TYPE_CUSTODY_REFERRAL.equals( aRiskAssessmentType ) )
						{
							casefile.setIsReferralRiskNeeded( false );
						}
						else if( RiskAnalysisConstants.RISK_TYPE_INTERVIEW.equals( aRiskAssessmentType ) )
						{
							casefile.setIsInterviewRiskNeeded( false );
						}
						else if( RiskAnalysisConstants.RISK_TYPE_TESTING.equals( aRiskAssessmentType ) )
						{
							casefile.setIsTestingRiskNeeded( false );
						}
						else if( RiskAnalysisConstants.RISK_TYPE_PROGRESS.equals( aRiskAssessmentType ) )
						{
							casefile.setIsProgressRiskNeeded( false );
						}
						else if( RiskAnalysisConstants.RISK_TYPE_RESIDENTIAL.equals( aRiskAssessmentType ) )
						{
							casefile.setIsResidentialRiskNeeded( false );
						}
						else if( RiskAnalysisConstants.RISK_TYPE_COMMUNITY.equals( aRiskAssessmentType ) )
						{
							casefile.setIsCommunityRiskNeeded( false );
						}

						String supervisionCategoty = casefile.getSupervisionCategoryId();
						if( PDCodeTableConstants.CASEFILE_SUPERVISION_CAT_PRE_ADJ.equalsIgnoreCase( supervisionCategoty ) )
						{
							if( RiskAnalysisConstants.RISK_TYPE_TESTING.equals( aRiskAssessmentType ) )
							{
								casefile.setIsTestingRiskNeeded( false );
								casefile.setIsInterviewRiskNeeded( false );
								casefile.setIsReferralRiskNeeded( false );
							}
							else if( RiskAnalysisConstants.RISK_TYPE_INTERVIEW.equals( aRiskAssessmentType ) )
							{
								casefile.setIsInterviewRiskNeeded( false );
								casefile.setIsReferralRiskNeeded( false );
							}
							else if( RiskAnalysisConstants.RISK_TYPE_NON_CUSTODY_REFERRAL.equals( aRiskAssessmentType ) )
							{
								casefile.setIsReferralRiskNeeded( false );
							}
							else if( RiskAnalysisConstants.RISK_TYPE_CUSTODY_REFERRAL.equals( aRiskAssessmentType ) )
							{
								casefile.setIsReferralRiskNeeded( false );
							}
						}
						else if( PDCodeTableConstants.CASEFILE_SUPERVISION_CAT_PRE_PETITION.equalsIgnoreCase( supervisionCategoty ) )
						{
							if( RiskAnalysisConstants.RISK_TYPE_INTERVIEW.equals( aRiskAssessmentType ) )
							{
								casefile.setIsInterviewRiskNeeded( false );
								casefile.setIsReferralRiskNeeded( false );
							}
							else if( RiskAnalysisConstants.RISK_TYPE_NON_CUSTODY_REFERRAL.equals( aRiskAssessmentType ) )
							{
								casefile.setIsReferralRiskNeeded( false );
							}
							else if( RiskAnalysisConstants.RISK_TYPE_CUSTODY_REFERRAL.equals( aRiskAssessmentType ) )
							{
								casefile.setIsReferralRiskNeeded( false );
							}
						}
						else if( PDCodeTableConstants.CASEFILE_SUPERVISION_TYPE_ENHANCED_SUPERVISION.equals( casefile.getSupervisionTypeId() ) )
						{
							if( RiskAnalysisConstants.RISK_TYPE_COMMUNITY.equals( aRiskAssessmentType ) )
							{
								casefile.setIsCommunityRiskNeeded( false );
								casefile.setIsResidentialRiskNeeded( false );
							}
							else if( RiskAnalysisConstants.RISK_TYPE_RESIDENTIAL.equals( aRiskAssessmentType ) )
							{
								casefile.setIsCommunityRiskNeeded( false );
								casefile.setIsResidentialRiskNeeded( false );
							}
						}
						else if( PDCodeTableConstants.CASEFILE_SUPERVISION_CAT_POST_ADJ_COM.equalsIgnoreCase( supervisionCategoty ) )
						{
							if( RiskAnalysisConstants.RISK_TYPE_COMMUNITY.equals( aRiskAssessmentType ) )
							{
								casefile.setIsCommunityRiskNeeded( false );
							}
						}
						else if( PDCodeTableConstants.CASEFILE_SUPERVISION_CAT_POST_ADJ_RES.equalsIgnoreCase( supervisionCategoty ) )
						{
							if( RiskAnalysisConstants.RISK_TYPE_RESIDENTIAL.equals( aRiskAssessmentType ) )
							{
								casefile.setIsResidentialRiskNeeded( false );
							}
						}
					}// end while
				}// end if null
				else
				{
					errorMsg = "No casefiles found for Juvenile Number: " + getEvent.getJuvenileNum();
				}
			}
			else
			{
				errorMsg = "Risk Assessment Type is invalid.";
			}
		}
		else
		{
			errorMsg = "Juvenile Number is invalid.";
		}

		if( errorMsg != null )
		{
			NoJuvenileCasefilesResponseEvent none = new NoJuvenileCasefilesResponseEvent();
			none.setMessage( errorMsg );
			dispatch.postEvent( none );
		}

		return;
	}

	/*
	 * 
	 */
	public static void retrieveRiskQuestions( 
			String assessmenttype, IDispatch dispatch)
	{
		Iterator questions = RiskQuestions.findAll( RiskAnalysisConstants.RISK_ASSESSMENT_TYPE, assessmenttype );

		while(questions.hasNext())
		{
			RiskQuestions riskQuestion = (RiskQuestions)questions.next();
			RiskQuestionResponseEvent riskQuesResponse = new RiskQuestionResponseEvent();
			riskQuesResponse.setAssessmentType( riskQuestion.getAssessmentType() );

			try
			{
				riskQuesResponse.setQuestionID( Integer.parseInt( riskQuestion.getOID().toString() ) );
			}
			catch(NumberFormatException nfe)
			{
				riskQuesResponse.setQuestionID( 0 );
			}

			riskQuesResponse.setQuestionText( riskQuestion.getQuestionText() );
			riskQuesResponse.setUiControlType( riskQuestion.getUiControlType() );
			riskQuesResponse.setControlCode( riskQuestion.getControlCode() );
			int thisQNum = new Integer( riskQuestion.getQuestionNbr() );
			riskQuesResponse.setQuestionNbr( thisQNum );
			riskQuesResponse.setInitialAction(riskQuestion.getInitialAction());
			riskQuesResponse.setHelpFileId(riskQuestion.getHelpFileId());
			riskQuesResponse.setRequired(riskQuestion.isRequired());
			dispatch.postEvent( riskQuesResponse );

			Iterator<RiskWeightedResponse> weightedResponses = RiskWeightedResponse.findAll( "riskQuestionsId", riskQuestion.getOID().toString() );
			
			List wr = new ArrayList();
			while(weightedResponses.hasNext())
			{
				RiskWeightedResponse riskWeightedResponse = weightedResponses.next();
				RiskWeightedResponseEvent riskWeightedAnsResponse = new RiskWeightedResponseEvent();
				riskWeightedAnsResponse.setWeightedResponseID( 
						Integer.parseInt( riskWeightedResponse.getOID().toString() ) );
				riskWeightedAnsResponse.setAnswerText( riskWeightedResponse.getResponse() );
				riskWeightedAnsResponse.setRiskQuestionsId( riskWeightedResponse.getRiskQuestionsId() );
				riskWeightedAnsResponse.setWeight( riskWeightedResponse.getWeight() );
				riskWeightedAnsResponse.setSortOrder( riskWeightedResponse.getSortOrder() );
				riskWeightedAnsResponse.setSubordinateQuestionId( riskWeightedResponse.getSubordinateQuestionId() );
				riskWeightedAnsResponse.setAction( riskWeightedResponse.getAction() );
				wr.add(riskWeightedAnsResponse);
			}
		
			Collections.sort(wr);
			SortedMap map = new TreeMap();
		
			for(java.util.Iterator itr = wr.iterator(); itr.hasNext();){
				RiskWeightedResponseEvent riskWeightedResponseEvent = (RiskWeightedResponseEvent)itr.next();
				map.put( riskWeightedResponseEvent.getAnswerText(), riskWeightedResponseEvent );
			}
			postEvent( map, dispatch );
		}
	}

	/*
	 * 
	 */
	public static Iterator retrieveTraits( String traitTypeName, String riskQuestionsId )
	{
		List list = new ArrayList();
		TraitType parentTrait = TraitType.findByAttributeName( "name", traitTypeName );

		GetJuvenileTraitTypesEvent juvTraitEvent = (GetJuvenileTraitTypesEvent)
				EventFactory.getInstance( JuvenileCaseControllerServiceNames.GETJUVENILETRAITTYPES );
		juvTraitEvent.setTraitType( parentTrait.getOID().toString() );

		Iterator<TraitType> i = TraitType.findByType( juvTraitEvent );
		while(i.hasNext())
		{
			TraitType traitType = i.next();
			RiskWeightedResponse wResp = new RiskWeightedResponse();
			wResp.setResponse( traitType.getName() );
			wResp.setRiskQuestionsId( riskQuestionsId );

			try
			{
				wResp.setWeight( Integer.parseInt( traitType.getRiskPoints() ) );
			}
			catch(NumberFormatException nfe)
			{
				wResp.setWeight( 0 );
			}

			wResp.setOID( "0" );
			list.add( wResp );
		}

		return list.iterator();
	}

	/**
	 * @param map
	 * @param dispatch
	 */
	private static void postEvent( SortedMap map, IDispatch dispatch )
	{
		Iterator<RiskWeightedResponseEvent> iter = map.values().iterator();
		while(iter.hasNext())
		{
			RiskWeightedResponseEvent riskWeightedAnsResponse = iter.next();
			dispatch.postEvent( riskWeightedAnsResponse );
		}
	}

	/*
	 * 
	 */
	public static void setCalculatedScoresReferral( 
			RiskAnalysisReferral riskReferral, 
			SaveReferralAssessmentEvent saveRefAssessEvent ) throws ComputationValidationException
	{
		RiskComputationContext riskComputationContext = new RiskComputationContext();
		NonCustodyReferralComputationResponseEvent nonCustodyRefRiskCompRespEvent = 
				(NonCustodyReferralComputationResponseEvent)riskComputationContext.computeRiskAnalysis( saveRefAssessEvent );

		riskReferral.setCustodyStatus( nonCustodyRefRiskCompRespEvent.getCustodyStatus() );
		riskReferral.setTotalAttitude( nonCustodyRefRiskCompRespEvent.getTotalAttitude() );
		riskReferral.setTotalCapitalFelony( nonCustodyRefRiskCompRespEvent.getTotalCapitalFelony() );
		riskReferral.setTotalClassAB( nonCustodyRefRiskCompRespEvent.getTotalClassABScore() );
		riskReferral.setTotalClassC( nonCustodyRefRiskCompRespEvent.getTotalClassC() );
		riskReferral.setTotalCurrentStatus( nonCustodyRefRiskCompRespEvent.getTotalCurrentStatus() );
		riskReferral.setTotalFelony1( nonCustodyRefRiskCompRespEvent.getTotalFelony1() );
		riskReferral.setTotalFelony2( nonCustodyRefRiskCompRespEvent.getTotalFelony2() );
		riskReferral.setTotalFelony3( nonCustodyRefRiskCompRespEvent.getTotalFelony3() );
		riskReferral.setTotalLevel( nonCustodyRefRiskCompRespEvent.getTotalLevel() );
		riskReferral.setTotalOffenseNature( nonCustodyRefRiskCompRespEvent.getTotalOffenseNature() );
		riskReferral.setTotalOffenses( nonCustodyRefRiskCompRespEvent.getTotalOffenses() );
		riskReferral.setTotalReferralsHistory( nonCustodyRefRiskCompRespEvent.getTotalReferralsHistory() );
		riskReferral.setTotalStateJailFelony( nonCustodyRefRiskCompRespEvent.getTotalStateJailFelony() );
		riskReferral.setTotalStatusCO( nonCustodyRefRiskCompRespEvent.getTotalStatusCO() );
		riskReferral.setTotalSupervision( nonCustodyRefRiskCompRespEvent.getTotalSupervision() );
		riskReferral.setSeriousnessIndex( nonCustodyRefRiskCompRespEvent.getSeriousnessIndex() );
		
		riskReferral.setAdditionalCharges( nonCustodyRefRiskCompRespEvent.getAdditionalCharges() );
		riskReferral.setOnProbation( nonCustodyRefRiskCompRespEvent.isOnProbation() );
		riskReferral.setVOPPendingCourt(nonCustodyRefRiskCompRespEvent.isVOPPendingCourt());
		riskReferral.setPendingCourt(nonCustodyRefRiskCompRespEvent.isPendingCourt());
		
		riskReferral.getRiskAnalysis().setFinalScore( nonCustodyRefRiskCompRespEvent.getTotalScore() );
	}

	/**
	 * @param riskAnalysisRefr
	 * @param saveRefAssessEvent
	 * @param jdh
	 * @throws ComputationValidationException
	 */
	public static void setCalculatedScoresNewReferral( RiskAnalysisReferral riskReferral, SaveReferralAssessmentEvent saveRefAssessEvent ) throws ComputationValidationException
	{
		RiskComputationContext riskComputationContext = new RiskComputationContext();
		CustodyReferralRiskComputationReponseEvent custRefRiskCompRespEvent = 
				(CustodyReferralRiskComputationReponseEvent)riskComputationContext.computeRiskAnalysis( saveRefAssessEvent );

		riskReferral.setCustodyStatus( custRefRiskCompRespEvent.getCustodyStatus() );
		riskReferral.setTotalCapitalFelony( custRefRiskCompRespEvent.getTotalCapitalFelony() );
		riskReferral.setTotalClassAB( custRefRiskCompRespEvent.getTotalClassABScore() );
		riskReferral.setTotalClassC( custRefRiskCompRespEvent.getTotalClassC() );
		riskReferral.setTotalCurrentStatus( custRefRiskCompRespEvent.getTotalCurrentStatus() );
		riskReferral.setTotalFelony1( custRefRiskCompRespEvent.getTotalFelony1() );
		riskReferral.setTotalFelony2( custRefRiskCompRespEvent.getTotalFelony2() );
		riskReferral.setTotalFelony3( custRefRiskCompRespEvent.getTotalFelony3() );
		riskReferral.setTotalLevel( custRefRiskCompRespEvent.getTotalLevel() );
		riskReferral.setTotalReferralsHistory( custRefRiskCompRespEvent.getTotalReferralsHistory() );
		riskReferral.setTotalStateJailFelony( custRefRiskCompRespEvent.getTotalStateJailFelony() );
		riskReferral.setTotalStatusCO( custRefRiskCompRespEvent.getTotalStatusCO() );
		riskReferral.setTotalSupervision( custRefRiskCompRespEvent.getTotalSupervision() );
		riskReferral.setSeriousnessIndex( custRefRiskCompRespEvent.getSeriousnessIndex() );
		
		riskReferral.setAdditionalCharges( custRefRiskCompRespEvent.getAdditionalCharges() );
		riskReferral.setOnProbation( custRefRiskCompRespEvent.isOnProbation() );
		riskReferral.setVOPPendingCourt(custRefRiskCompRespEvent.isVOPPendingCourt());
		riskReferral.setPendingCourt(custRefRiskCompRespEvent.isPendingCourt());
		
		riskReferral.getRiskAnalysis().setFinalScore( custRefRiskCompRespEvent.getTotalScore() );
	}

	/*
	 * 
	 */
	public static void setRiskAnalysisRecommendation( RiskAnalysis riskAnalysis, String assessmentType )
	{
		// Retrieve all the recommendations for the Assessment Type
		Iterator<RiskRecommendation> iter = RiskRecommendation.findAllByAssessmentType( RiskAnalysisConstants.RISK_ASSESSMENT_TYPE, assessmentType );
		while(iter.hasNext())
		{
			RiskRecommendation riskRecommend = iter.next();

			if( riskAnalysis.getFinalScore() >= riskRecommend.getMinValue() && 
					riskAnalysis.getFinalScore() < (riskRecommend.getMaxValue() + 1) )
			{
				riskAnalysis.setRecommendation( riskRecommend.getRecommendation() );
				break;
			}
		}
	}

	/*
	 * 
	 */
	public static void retrieveRefrAssessmentDetails( RiskAnalysis riskAnalysis, IDispatch dispatch )
	{
		ReferralAssessmentEvent refAssessEvent = new ReferralAssessmentEvent();
		String OID = riskAnalysis.getOID().toString() ;
		String assessType = riskAnalysis.getAssessmentType().trim() ;
		RiskAnalysisReferral riskReferral = RiskAnalysisReferral.findByRiskAnalysisId( OID );
		
		
		refAssessEvent.setCasefileId(String.valueOf(riskAnalysis.getCasefileID()));
		if( assessType.equalsIgnoreCase( RiskAnalysisConstants.RISK_TYPE_CUSTODY_REFERRAL ) )
		{
			refAssessEvent.setNewReferral( riskReferral.isNewReferral() );
			refAssessEvent.setRiskMandatoryDetentionCd( riskReferral.getRiskMandatoryDetentionCd() );
			refAssessEvent.setMoreThanOneFailure(riskReferral.isMoreThanOneFailure());
		}
		
		refAssessEvent.setPendingCourt( riskReferral.isPendingCourt() ? "Yes" : "No");
		refAssessEvent.setCurrentlyOnProbation( riskReferral.isOnProbation() ? "Yes" : "No" );
		refAssessEvent.setPendingCourtVOP( riskReferral.isVOPPendingCourt() ? "Yes" : "No" );

		refAssessEvent.setNumberOfCharges(String.valueOf(riskReferral.getAdditionalCharges())); 

		refAssessEvent.setAssessmentType( assessType );
		refAssessEvent.setEnteredDate( riskAnalysis.getEnteredDate() );
		refAssessEvent.setFinalScore( riskAnalysis.getFinalScore() );
		refAssessEvent.setRecommendation( riskAnalysis.getRecommendation() );
		refAssessEvent.setRecommendationOverridden( riskAnalysis.isRecommendationOveridden() );
		refAssessEvent.setOverRiddenReasonCd( riskAnalysis.getOveriddenReasonCd() );
		refAssessEvent.setOverRiddenReasonOther( riskAnalysis.getOveriddenReasonOther() );
		refAssessEvent.setModReason( riskAnalysis.getModReason() );
		
		
		JuvenileDelinquencyHistory history = JuvenileDelinquencyHistory.findbyRiskAnalysisId( OID );
		if( history != null )
		{
			refAssessEvent.setAgeFirstReferred(String.valueOf(history.getAgeFirstReferral()));
			refAssessEvent.setSeriousnessIndex(String.valueOf(history.getSeriousnessIndex()));
			refAssessEvent.setTotalCapitalFelony(String.valueOf(history.getCapFelonyTotal()));
			refAssessEvent.setTotalClassAB(String.valueOf(history.getMisdABTotal()));
			refAssessEvent.setTotalClassC(String.valueOf(history.getMisdCTotal()));
			refAssessEvent.setTotalFelony1(String.valueOf(history.getFelony1Total()));
			refAssessEvent.setTotalFelony2(String.valueOf(history.getFelony2Total()));
			refAssessEvent.setTotalFelony3(String.valueOf(history.getFelony3Total()));
			refAssessEvent.setTotalLevel(String.valueOf(history.getLevelTotal()));
			refAssessEvent.setTotalReferralsHistory(String.valueOf(history.getReferralHistoryTotal()));
			refAssessEvent.setTotalOffenses(String.valueOf(history.getTotalOffenses()));
			refAssessEvent.setTotalStatusCO(String.valueOf(history.getScoOffensesTotal()));
			refAssessEvent.setTotalStateJailFelony(String.valueOf(history.getJailFelonyTotal()));
			
		}
		dispatch.postEvent( refAssessEvent );
	}

	/*
	 * 
	 */
	public static void retrieveIntrwAssessmentDetails( RiskAnalysis riskAnalysis, IDispatch dispatch )
	{
		InterviewAssessmentEvent intrwAssessEvent = new InterviewAssessmentEvent();

		RiskAnalysisInterview riskInterview  = RiskAnalysisInterview.findByRiskAnalysisId(riskAnalysis.getOID());
		
		intrwAssessEvent.setCasefileId(String.valueOf(riskAnalysis.getCasefileID()));
		intrwAssessEvent.setAssessmentType( riskAnalysis.getAssessmentType() );
		intrwAssessEvent.setEnteredDate( riskAnalysis.getEnteredDate() );
		intrwAssessEvent.setFinalScore( riskAnalysis.getFinalScore() );
		intrwAssessEvent.setRecommendation( riskAnalysis.getRecommendation() );
		intrwAssessEvent.setOnSetAge(String.valueOf(riskInterview.getOnsetAge()));
		intrwAssessEvent.setSexCd(riskInterview.getSexCd());
		intrwAssessEvent.setRecommendationOverridden( riskAnalysis.isRecommendationOveridden() );
		intrwAssessEvent.setOverRiddenReasonCd( riskAnalysis.getOveriddenReasonCd() );
		intrwAssessEvent.setOverRiddenReasonOther( riskAnalysis.getOveriddenReasonOther() );
		intrwAssessEvent.setModReason( riskAnalysis.getModReason() );
		dispatch.postEvent( intrwAssessEvent );
	}

	/*
	 * 
	 */
	public static void retrieveResidentialAssessmentDetails( RiskAnalysis riskAnalysis, IDispatch dispatch )
	{
		ResidentialAssessmentEvent residentialAssessEvent = new ResidentialAssessmentEvent();
		residentialAssessEvent.setCasefileId(String.valueOf(riskAnalysis.getCasefileID()));
		residentialAssessEvent.setAssessmentType( riskAnalysis.getAssessmentType() );
		residentialAssessEvent.setEnteredDate( riskAnalysis.getEnteredDate() );
		residentialAssessEvent.setFinalScore( riskAnalysis.getFinalScore() );
		residentialAssessEvent.setRecommendation( riskAnalysis.getRecommendation() );
		residentialAssessEvent.setRecommendationOverridden( riskAnalysis.isRecommendationOveridden() );
		residentialAssessEvent.setOverRiddenReasonCd( riskAnalysis.getOveriddenReasonCd() );
		residentialAssessEvent.setOverRiddenReasonOther( riskAnalysis.getOveriddenReasonOther() );
		residentialAssessEvent.setModReason( riskAnalysis.getModReason() );
		dispatch.postEvent( residentialAssessEvent );
	}

	/*
	 * 
	 */
	public static void retrieveCommunityAssessmentDetails( RiskAnalysis riskAnalysis, IDispatch dispatch )
	{
		CommunityAssessmentEvent communityAssessEvent = new CommunityAssessmentEvent();
		communityAssessEvent.setCasefileId(String.valueOf(riskAnalysis.getCasefileID()));
		communityAssessEvent.setAssessmentType( riskAnalysis.getAssessmentType() );
		communityAssessEvent.setEnteredDate( riskAnalysis.getEnteredDate() );
		communityAssessEvent.setFinalScore( riskAnalysis.getFinalScore() );
		communityAssessEvent.setRecommendation( riskAnalysis.getRecommendation() );
		communityAssessEvent.setRecommendationOverridden( riskAnalysis.isRecommendationOveridden() );
		communityAssessEvent.setOverRiddenReasonCd( riskAnalysis.getOveriddenReasonCd() );
		communityAssessEvent.setOverRiddenReasonOther( riskAnalysis.getOveriddenReasonOther() );
		communityAssessEvent.setModReason( riskAnalysis.getModReason() );
		dispatch.postEvent( communityAssessEvent );
	}

	/*
	 * 
	 */
	public static void retrieveProgressAssessmentDetails( RiskAnalysis riskAnalysis, IDispatch dispatch )
	{
		ProgressAssessmentEvent progressAssessEvent = new ProgressAssessmentEvent();
		progressAssessEvent.setCasefileId(String.valueOf(riskAnalysis.getCasefileID()));
		progressAssessEvent.setAssessmentType( riskAnalysis.getAssessmentType() );
		progressAssessEvent.setEnteredDate( riskAnalysis.getEnteredDate() );
		progressAssessEvent.setFinalScore( riskAnalysis.getFinalScore() );
		progressAssessEvent.setRecommendation( riskAnalysis.getRecommendation() );
		progressAssessEvent.setRecommendationOverridden( riskAnalysis.isRecommendationOveridden() );
		progressAssessEvent.setOverRiddenReasonCd( riskAnalysis.getOveriddenReasonCd() );
		progressAssessEvent.setOverRiddenReasonOther( riskAnalysis.getOveriddenReasonOther() );
		progressAssessEvent.setModReason( riskAnalysis.getModReason() );
		dispatch.postEvent( progressAssessEvent );
	}

	/*
	 * 
	 */
	public static void retrieveTestingAssessmentDetails( RiskAnalysis riskAnalysis, IDispatch dispatch )
	{
		TestingAssessmentEvent testingAssessEvent = new TestingAssessmentEvent();
		testingAssessEvent.setCasefileId(String.valueOf(riskAnalysis.getCasefileID()));
		testingAssessEvent.setAssessmentType( riskAnalysis.getAssessmentType() );
		testingAssessEvent.setEnteredDate( riskAnalysis.getEnteredDate() );
		testingAssessEvent.setFinalScore( riskAnalysis.getFinalScore() );
		testingAssessEvent.setRecommendation( riskAnalysis.getRecommendation() );
		testingAssessEvent.setRecommendationOverridden( riskAnalysis.isRecommendationOveridden() );
		testingAssessEvent.setOverRiddenReasonCd( riskAnalysis.getOveriddenReasonCd() );
		testingAssessEvent.setOverRiddenReasonOther( riskAnalysis.getOveriddenReasonOther() );
		testingAssessEvent.setModReason( riskAnalysis.getModReason() );
		dispatch.postEvent( testingAssessEvent );
	}
	
	public static void updateResidentialRiskAnalysisOverrideStatus( RequestEvent event )
	{
		SaveResidentialAssessmentEvent saveResidentialAssessmentEvent = (SaveResidentialAssessmentEvent)event;
		RiskAnalysis riskAnalysis = RiskAnalysis.find( saveResidentialAssessmentEvent.getAssessmentID() );

		boolean recommendatationOverridden = saveResidentialAssessmentEvent.isRecommendationOveridden();
		riskAnalysis.setRecommendationOveridden( recommendatationOverridden );

		if( recommendatationOverridden )
		{
			String overiddenReasonCd = saveResidentialAssessmentEvent.getOveriddenReasonCd();
			riskAnalysis.setOveriddenReasonCd( overiddenReasonCd );
			if( StringUtils.equalsIgnoreCase( overiddenReasonCd, RiskAnalysisConstants.OVERRIDE_TYPE_OTHER_CODE ) )
			{
				riskAnalysis.setOveriddenReasonOther( saveResidentialAssessmentEvent.getOveriddenReasonOther() );
			}
			else
			{
				riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
			}
		}
		else
		{
			riskAnalysis.setOveriddenReasonCd( UIConstants.EMPTY_STRING );
			riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
		}

		IHome home = new Home();
		home.bind( riskAnalysis );
	}
	
	public static void updateTestingRiskAnalysisOverrideStatus( RequestEvent event )
	{
		SaveTestingAssessmentEvent saveTestAssessEvent = (SaveTestingAssessmentEvent)event;
		RiskAnalysis riskAnalysis = RiskAnalysis.find( saveTestAssessEvent.getAssessmentID() );

		boolean recommendatationOverridden = saveTestAssessEvent.isRecommendationOveridden();
		riskAnalysis.setRecommendationOveridden( recommendatationOverridden );

		if( recommendatationOverridden )
		{
			String overiddenReasonCd = saveTestAssessEvent.getOveriddenReasonCd();
			riskAnalysis.setOveriddenReasonCd( overiddenReasonCd );
			if( StringUtils.equalsIgnoreCase( overiddenReasonCd, RiskAnalysisConstants.OVERRIDE_TYPE_OTHER_CODE ) )
			{
				riskAnalysis.setOveriddenReasonOther( saveTestAssessEvent.getOveriddenReasonOther() );
			}
			else
			{
				riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
			}
		}
		else
		{
			riskAnalysis.setOveriddenReasonCd( UIConstants.EMPTY_STRING );
			riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
		}

		IHome home = new Home();
		home.bind( riskAnalysis );
	}
	
	public static void updateCommunityRiskAnalysisOverrideStatus( RequestEvent event )
	{
		SaveCommunityAssessmentEvent saveCommunityAssessmentEvent = (SaveCommunityAssessmentEvent)event;
		RiskAnalysis riskAnalysis = RiskAnalysis.find( saveCommunityAssessmentEvent.getAssessmentID() );

		boolean recommendatationOverridden = saveCommunityAssessmentEvent.isRecommendationOveridden();
		riskAnalysis.setRecommendationOveridden( recommendatationOverridden );

		if( recommendatationOverridden )
		{
			String overiddenReasonCd = saveCommunityAssessmentEvent.getOveriddenReasonCd();
			riskAnalysis.setOveriddenReasonCd( overiddenReasonCd );
			if( StringUtils.equalsIgnoreCase( overiddenReasonCd, RiskAnalysisConstants.OVERRIDE_TYPE_OTHER_CODE ) )
			{
				riskAnalysis.setOveriddenReasonOther( saveCommunityAssessmentEvent.getOveriddenReasonOther() );
			}
			else
			{
				riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
			}
		}
		else
		{
			riskAnalysis.setOveriddenReasonCd( UIConstants.EMPTY_STRING );
			riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
		}

		IHome home = new Home();
		home.bind( riskAnalysis );
	}
	
	public static void updateProgressRiskAnalysisOverrideStatus( RequestEvent event )
	{
		SaveProgressAssessmentEvent saveProgressAssessmentEvent = (SaveProgressAssessmentEvent)event;
		RiskAnalysis riskAnalysis = RiskAnalysis.find( saveProgressAssessmentEvent.getAssessmentID() );

		boolean recommendatationOverridden = saveProgressAssessmentEvent.isRecommendationOveridden();
		riskAnalysis.setRecommendationOveridden( recommendatationOverridden );

		if( recommendatationOverridden )
		{
			String overiddenReasonCd = saveProgressAssessmentEvent.getOveriddenReasonCd();
			riskAnalysis.setOveriddenReasonCd( overiddenReasonCd );
			if( StringUtils.equalsIgnoreCase( overiddenReasonCd, RiskAnalysisConstants.OVERRIDE_TYPE_OTHER_CODE ) )
			{
				riskAnalysis.setOveriddenReasonOther( saveProgressAssessmentEvent.getOveriddenReasonOther() );
			}
			else
			{
				riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
			}
		}
		else
		{
			riskAnalysis.setOveriddenReasonCd( UIConstants.EMPTY_STRING );
			riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
		}

		IHome home = new Home();
		home.bind( riskAnalysis );
	}
	
	public static void updateInterviewRiskAnalysisOverrideStatus( RequestEvent event )
	{
		SaveInterviewAssessmentEvent saveInterviewAssessmentEvent = (SaveInterviewAssessmentEvent)event;
		RiskAnalysis riskAnalysis = RiskAnalysis.find( saveInterviewAssessmentEvent.getAssessmentID() );

		boolean recommendatationOverridden = saveInterviewAssessmentEvent.isRecommendationOveridden();
		riskAnalysis.setRecommendationOveridden( recommendatationOverridden );

		if( recommendatationOverridden )
		{
			String overiddenReasonCd = saveInterviewAssessmentEvent.getOveriddenReasonCd();
			riskAnalysis.setOveriddenReasonCd( overiddenReasonCd );
			if( StringUtils.equalsIgnoreCase( overiddenReasonCd, RiskAnalysisConstants.OVERRIDE_TYPE_OTHER_CODE ) )
			{
				riskAnalysis.setOveriddenReasonOther( saveInterviewAssessmentEvent.getOveriddenReasonOther() );
			}
			else
			{
				riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
			}
		}
		else
		{
			riskAnalysis.setOveriddenReasonCd( UIConstants.EMPTY_STRING );
			riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
		}

		IHome home = new Home();
		home.bind( riskAnalysis );
	}
	

	public static void updateReferralRiskAnalysisOverrideStatus( RequestEvent event )
	{
		SaveReferralAssessmentEvent saveReferralAssessmentEvent = (SaveReferralAssessmentEvent)event;
		RiskAnalysis riskAnalysis = RiskAnalysis.find( saveReferralAssessmentEvent.getAssessmentID() );

		boolean recommendatationOverridden = saveReferralAssessmentEvent.isRecommendationOveridden();
		riskAnalysis.setRecommendationOveridden( recommendatationOverridden );

		if( recommendatationOverridden )
		{
			String overiddenReasonCd = saveReferralAssessmentEvent.getOveriddenReasonCd();
			riskAnalysis.setOveriddenReasonCd( overiddenReasonCd );
			if( StringUtils.equalsIgnoreCase( overiddenReasonCd, RiskAnalysisConstants.OVERRIDE_TYPE_OTHER_CODE ) )
			{
				riskAnalysis.setOveriddenReasonOther( saveReferralAssessmentEvent.getOveriddenReasonOther() );
			}
			else
			{
				riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
			}
		}
		else
		{
			riskAnalysis.setOveriddenReasonCd( UIConstants.EMPTY_STRING );
			riskAnalysis.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
		}

		IHome home = new Home();
		home.bind( riskAnalysis );
	}

	/*
	 * 
	 */
	public static void retrieveRiskAnalysisDetailsByAssessmentType( RequestEvent event )
	{
		GetRiskAssessmentDetailsEvent riskAssessDetails = (GetRiskAssessmentDetailsEvent)event;
		IDispatch dispatch = EventManager.getSharedInstance( EventManager.REPLY );
		RiskAnalysis riskAnalysis = RiskAnalysis.find( riskAssessDetails.getAssessmentID() );

		//Gets Assessment Type
		String assessType = riskAssessDetails.getAssessmentType() ;
		
		//Logic which dispatches risk analysis information based on type
		if( assessType.equalsIgnoreCase( RiskAnalysisConstants.RISK_TYPE_NON_CUSTODY_REFERRAL ) || 
				assessType.equalsIgnoreCase( RiskAnalysisConstants.RISK_TYPE_CUSTODY_REFERRAL ) )
		{
			retrieveRefrAssessmentDetails( riskAnalysis, dispatch );
		}
		else if( assessType.equalsIgnoreCase( RiskAnalysisConstants.RISK_TYPE_INTERVIEW ) )
		{
			retrieveIntrwAssessmentDetails( riskAnalysis, dispatch );
		}
		else if( assessType.equalsIgnoreCase( RiskAnalysisConstants.RISK_TYPE_RESIDENTIAL ) )
		{
			retrieveResidentialAssessmentDetails( riskAnalysis, dispatch );
		}
		else if( assessType.equalsIgnoreCase( RiskAnalysisConstants.RISK_TYPE_COMMUNITY ) )
		{
			retrieveCommunityAssessmentDetails( riskAnalysis, dispatch );
		}
		else if( assessType.equalsIgnoreCase( RiskAnalysisConstants.RISK_TYPE_PROGRESS ) )
		{
			retrieveProgressAssessmentDetails( riskAnalysis, dispatch );
		}
		else if( assessType.equalsIgnoreCase( RiskAnalysisConstants.RISK_TYPE_TESTING ) )
		{
			retrieveTestingAssessmentDetails( riskAnalysis, dispatch );
		}

		//Dispatch the Question and Answers for a RiskAnalysis in for views only mode
		retrieveRiskAssessmentQuestionAnswers(riskAssessDetails, dispatch);
	}

	/**
	 * Consolidates Questions/Answers based on Question Number for viewing purposes only
	 * @param riskAssessDetails
	 * @param dispatch
	 */
	private static void retrieveRiskAssessmentQuestionAnswers(
			GetRiskAssessmentDetailsEvent riskAssessDetails, IDispatch dispatch) 
	{
		//Temporary hashmap and vector to store Responses
		SortedMap map = new TreeMap();
		Vector vec = new Vector();
		
		RiskAnalysis riskAnalysis = RiskAnalysis.find(riskAssessDetails.getAssessmentID());
		String createUser = "";
		if (riskAnalysis != null) {
			createUser = riskAnalysis.getCreateUserID();
		}
		
		// Retrieves all the responses associated with the RISK_ANALYSIS_ID
		Iterator<RiskAnswer> riskAnswers = RiskAnswer.findAll( 
				RiskAnalysisConstants.RISK_ANALYSIS_ID, riskAssessDetails.getAssessmentID() );
		
		//String lastAnswerId = "";
		while(riskAnswers.hasNext())
		{
			RiskAnswer riskAnswer = riskAnswers.next();
			
			//Create new Question/Answer
			RiskAnswerResponseEvent riskAnsResponse = new RiskAnswerResponseEvent();
			
			//Set RiskAnswerResponseEvent Attributes
			riskAnsResponse.setWeightID( String.valueOf(riskAnswer.getWeightedResponseID() ) );
			riskAnsResponse.setWeightIDs( new ArrayList() );
			riskAnsResponse.getWeightIDs().add(String.valueOf(riskAnswer.getWeightedResponseID()));
			riskAnsResponse.setRiskAnalysisId( String.valueOf(riskAnswer.getRiskAnalysisId() ) );
			riskAnsResponse.setEntryDate( riskAnswer.getCreateTimestamp() );
			riskAnsResponse.setCreateUserID(createUser);
			
			//Add +1 to weight if chronic
			int weight = riskAnswer.getWeight();
			boolean isChronic = false;
			if( StringUtils.equalsIgnoreCase( riskAnswer.getText(), UIConstants.ISCHRONIC)) 
			{
				weight++ ;
				isChronic = true ;
			}
			
			//Get Control Type
			String controlType = riskAnswer.getUiControlType() ;
			//Set Answer Text based on UI Type
			if (controlType.equalsIgnoreCase(UIConstants.DATE) || 
         	controlType.equalsIgnoreCase(UIConstants.TEXTBOX) ||
         	controlType.equalsIgnoreCase(UIConstants.TEXTAREA)) 
			{
				 riskAnsResponse.setAnswerText( riskAnswer.getText() );
			} 
			else 
			{
				StringBuffer answerText = new StringBuffer( riskAnswer.getAnswerText() );
      	if(isChronic) 
      	{
      		answerText.append(" [Chronic]");
      		riskAnsResponse.setChronicID( riskAnswer.getOID() );
      		riskAnsResponse.getChronicIDs().add(riskAnswer.getOID());
				}
				riskAnsResponse.setAnswerText( answerText.toString() );
			}
			
			//Continue setting RiskAnswerResponseEvent Attributes
			riskAnsResponse.setText( riskAnswer.getText() ); //For Dates, Text and UICONSTANTS.ISCHRONIC (Freeform)
			riskAnsResponse.setWeight( weight );
			riskAnsResponse.setQuestionID( String.valueOf(riskAnswer.getQuestionId()) );
			riskAnsResponse.setQuestionNumber( riskAnswer.getQuestionNumber() );
			riskAnsResponse.setRiskQuestionText( riskAnswer.getQuestionText() );
			riskAnsResponse.setUiControlType( riskAnswer.getUiControlType() );
			
			//Checks to see if RiskAnswerResponseEvent already exists in the hashmap
			RiskAnswerResponseEvent priorRiskAnsResponse = (RiskAnswerResponseEvent)map.get(riskAnswer.getQuestionNumber());
			
			//Consolidates RiskAnswerResponseEvent if it exists in the hashmap
			if( priorRiskAnsResponse != null ) 
			{
				priorRiskAnsResponse.setWeightID( UIConstants.EMPTY_STRING );
				priorRiskAnsResponse.getWeightIDs().add( riskAnswer.getWeightedResponseID() );
				
				//New Weight To add
				int newWeight = riskAnswer.getWeight();
				if( isChronic ) 
				{
					newWeight++;
				}
				
				//Prior Weight to carry over
				{ int priorWeightTotal = priorRiskAnsResponse.getWeight();
					//Add New Weight and Prior Weight total, set new weight total
					priorRiskAnsResponse.setWeight(newWeight + priorWeightTotal);
					
					//Add New Answer Text To Answer Text
					StringBuffer answerTextsForQuestionNumber = new StringBuffer ( priorRiskAnsResponse.getAnswerText() );
					answerTextsForQuestionNumber.append(", " ).append(riskAnswer.getAnswerText());
					
					//Add isChronic to answer when needed
					if (isChronic) 
					{
						answerTextsForQuestionNumber.append(" [Chronic]");
						priorRiskAnsResponse.setChronicID( UIConstants.EMPTY_STRING );
						priorRiskAnsResponse.getChronicIDs().add(riskAnswer.getOID());
					}
					
					//Set consolidated answer text for viewing purposes
					priorRiskAnsResponse.setAnswerText(answerTextsForQuestionNumber.toString());
				}
				
				//Place new consolidated RiskAnswerResponseEvent in hashmap
				map.put( riskAnswer.getQuestionNumber(), priorRiskAnsResponse );
			} 
			else 
			{
				//Place new RiskAnswerResponseEvent in hashmap/vector
				String qNum = riskAnswer.getQuestionNumber() ;
				try
				{
					Integer qNumInt = new Integer( qNum ) ;
					map.put( qNum, riskAnsResponse );
					vec.addElement( qNumInt );
				}
				catch( NumberFormatException nfe )
				{
				}
			}
		} // while

		//Sort Vector
		if( vec.size() > 1 )
		{
			Collections.sort( vec );
		}
		
		//Dispatches RiskAnswerResponseEvent(s) 
		postRiskResponseEvents( map, vec, dispatch );
	}

	/**
	 * @param map
	 * @param vec
	 * @param dispatch
	 */
	private static void postRiskResponseEvents( SortedMap map, Vector vec, IDispatch dispatch )
	{
		RiskAnswerResponseEvent riskAnsResponse = null ;
		int count = vec.size() ;
		
		for(int i = 0; i < count; i++)
		{
			String key = (vec.elementAt( i )).toString();
			if( ( riskAnsResponse = (RiskAnswerResponseEvent)map.get( key ) ) != null )
			{
				dispatch.postEvent( riskAnsResponse );
			}
		}
	}

	/*
	 * 
	 */
	public static void setCalculatedScoresInterview( 
			RiskAnalysisInterview riskAnalysisIntrw, 
			SaveInterviewAssessmentEvent saveIntervAssessEvent, 
			RiskAnalysis riskAnalysis ) throws ComputationValidationException
	{
		RiskComputationContext riskComputationContext = new RiskComputationContext();
		InterviewRiskComputationReponseEvent interviewRiskCompRespEvent = 
				(InterviewRiskComputationReponseEvent)riskComputationContext.computeRiskAnalysis( saveIntervAssessEvent );

		RiskAnalysisInterview riskInterview = (RiskAnalysisInterview)riskAnalysisIntrw;
		riskInterview.setOnsetAge( interviewRiskCompRespEvent.getOnSetAge() );
		riskInterview.setTotalChild( interviewRiskCompRespEvent.getTotalChild() );
		riskInterview.setTotalChildHomeAttitude( interviewRiskCompRespEvent.getTotalChildHomeAttitude() );
		riskInterview.setTotalDeceasedParents( interviewRiskCompRespEvent.getTotalDeceasedParents() );
		riskInterview.setTotalExpulsions( interviewRiskCompRespEvent.getTotalExpulsions() );
		riskInterview.setTotalFailingClasses( interviewRiskCompRespEvent.getTotalFailingClasses() );
		riskInterview.setTotalFamily( interviewRiskCompRespEvent.getTotalFamily() );
		riskInterview.setTotalFamilyDynamics( interviewRiskCompRespEvent.getTotalFamilyDynamics() );
		riskInterview.setTotalGradesRepeated( interviewRiskCompRespEvent.getTotalGradesRepeated() );
		riskInterview.setTotalSchool( interviewRiskCompRespEvent.getTotalSchool() );
		riskInterview.setTotalSchoolBehavior( interviewRiskCompRespEvent.getTotalInterviewSchoolBehavior() );
		riskInterview.setTotalSiblings( interviewRiskCompRespEvent.getTotalSibling() );
		riskInterview.setTotalSuspensions( interviewRiskCompRespEvent.getTotalSuspensions() );
		riskAnalysis.setFinalScore( interviewRiskCompRespEvent.getTotalScore() );
	}

	/**
	 * @param riskResidential
	 * @param saveResAssessEvent
	 * @param riskAnalysis
	 */
	public static void setCalculatedScoresResidential( 
			RiskAnalysisResidential riskResidential, 
			SaveResidentialAssessmentEvent saveResAssessEvent, 
			RiskAnalysis riskAnalysis ) throws ComputationValidationException
	{
		RiskComputationContext riskComputationContext = new RiskComputationContext();
		ResidentialRiskComputationReponseEvent residentialRiskComputationReponseEvent = 
				(ResidentialRiskComputationReponseEvent)riskComputationContext.computeRiskAnalysis( saveResAssessEvent );

		riskResidential.setTotalEvaluation( residentialRiskComputationReponseEvent.getTotalEvaluation() );
		riskResidential.setTotalReview( residentialRiskComputationReponseEvent.getTotalReview() );
		riskResidential.setTotalSchoolRecords( residentialRiskComputationReponseEvent.getTotalSchoolRecords() );
		riskAnalysis.setFinalScore( residentialRiskComputationReponseEvent.getTotalScore() );
	}

	/**
	 * @param riskResidential
	 * @param saveResAssessEvent
	 * @param riskAnalysis
	 */
	public static void setCalculatedScoresCommunity( 
			RiskAnalysisCommunity riskCommunity, 
			SaveCommunityAssessmentEvent saveCommAssessEvent, 
			RiskAnalysis riskAnalysis ) throws ComputationValidationException
	{
		RiskComputationContext riskComputationContext = new RiskComputationContext();
		CommunityRiskComputationReponseEvent communityRiskCompRespEvent = 
				(CommunityRiskComputationReponseEvent)riskComputationContext.computeRiskAnalysis( saveCommAssessEvent );

		riskCommunity.setTotalPeer( communityRiskCompRespEvent.getTotalPeer() );
		riskCommunity.setTotalAttitude( communityRiskCompRespEvent.getTotalAttitude() );
		riskCommunity.setTotalSubstanceAbuse( communityRiskCompRespEvent.getTotalSubstanceAbuse() );
		riskCommunity.setTotalClassesFailing( communityRiskCompRespEvent.getTotalClassesFailing() );
		riskCommunity.setTotalGradeLevel( communityRiskCompRespEvent.getTotalGradeLevel() );
		riskCommunity.setTotalChild( communityRiskCompRespEvent.getTotalChild() );
		riskCommunity.setTotalSchoolBehavior( communityRiskCompRespEvent.getTotalSchoolBehavior() );
		riskCommunity.setTotalEducationStatus( communityRiskCompRespEvent.getTotalEducationStatus() );
		riskCommunity.setTotalChildParent( communityRiskCompRespEvent.getTotalChildParent() );
		riskCommunity.setTotalFamilyAttitude( communityRiskCompRespEvent.getTotalFamilyAttitude() );
		riskAnalysis.setFinalScore( communityRiskCompRespEvent.getTotalScore() );
	}

	/**
	 * @param riskResidential
	 * @param saveResAssessEvent
	 * @param riskAnalysis
	 */
	public static void setCalculatedScoresProgress( 
			RiskAnalysisProgress riskProgress, 
			SaveProgressAssessmentEvent saveProgAssessEvent, 
			RiskAnalysis riskAnalysis ) throws ComputationValidationException
	{
		RiskComputationContext riskComputationContext = new RiskComputationContext();
		ProgressRiskComputationReponseEvent progressRiskCompRespEvent = (ProgressRiskComputationReponseEvent)
				riskComputationContext.computeRiskAnalysis( saveProgAssessEvent );

		riskProgress.setTotalCurrentAttitude( progressRiskCompRespEvent.getTotalCurrentAttitude() );
		riskProgress.setTotalFamilyRelationship( progressRiskCompRespEvent.getTotalFamilyRelationship() );
		riskProgress.setTotalSchoolAttendance( progressRiskCompRespEvent.getTotalSchoolAttendance() );
		riskProgress.setTotalSchoolBehavior( progressRiskCompRespEvent.getTotalSchoolBehavior() );
		riskProgress.setTotalSupervision( progressRiskCompRespEvent.getTotalSupervision() );
		riskProgress.setTotalSupervisionRules( progressRiskCompRespEvent.getTotalSupervisionRules() );
		riskAnalysis.setFinalScore( progressRiskCompRespEvent.getTotalScore() );
	}

	/**
	 * @param riskResidential
	 * @param saveResAssessEvent
	 * @param riskAnalysis
	 */
	public static void setCalculatedScoresTesting( 
			RiskAnalysisTest riskTesting, 
			SaveTestingAssessmentEvent saveTestAssessEvent, 
			RiskAnalysis riskAnalysis ) throws ComputationValidationException
	{
		RiskComputationContext riskComputationContext = new RiskComputationContext();
		TestingRiskComputationReponseEvent testingRiskCompRespEvent = (TestingRiskComputationReponseEvent)
				riskComputationContext.computeRiskAnalysis( saveTestAssessEvent );

		riskTesting.setTotalAbuseHistory( testingRiskCompRespEvent.getTotalAbuseHistory() );
		riskTesting.setTotalAppearence( testingRiskCompRespEvent.getTotalAppearence() );
		riskTesting.setTotalBehviorHistory( testingRiskCompRespEvent.getTotalBehviorHistory() );
		riskTesting.setTotalDevelopmental( testingRiskCompRespEvent.getTotalDevelopmental() );
		riskTesting.setTotalFamilyProblems( testingRiskCompRespEvent.getTotalFamilyProblems() );
		riskTesting.setTotalFamilyRelationship( testingRiskCompRespEvent.getTotalFamilyRelationship() );
		riskTesting.setTotalPeerRelationship( testingRiskCompRespEvent.getTotalPeerRelationship() );
		riskTesting.setTotalSchoolAcademic( testingRiskCompRespEvent.getTotalSchoolAcademic() );
		riskTesting.setTotalSchoolBehavior( testingRiskCompRespEvent.getTotalSchoolBehavior() );
		riskTesting.setTotalSchoolAttendance( testingRiskCompRespEvent.getTotalSchoolAttendance() );
		riskTesting.setTotalSelfImage( testingRiskCompRespEvent.getTotalSelfImage() );
		riskTesting.setTotalSubstance( testingRiskCompRespEvent.getTotalSubstance() );
		riskTesting.setTotalStrengths( testingRiskCompRespEvent.getTotalStrengths() );
		riskAnalysis.setFinalScore( testingRiskCompRespEvent.getTotalScore() );
	}

	/*
	 * 
	 */
	public static int getSupervisionRulesTotal( String casefileID )
	{
		int totalRules = 0;

		Iterator rulesIterator = RuleGroupConditionView.findAll( "casefileId", casefileID );
		while(rulesIterator.hasNext())
		{
			RuleGroupConditionView ruleView = (RuleGroupConditionView)rulesIterator.next();
			if( ruleView.getCompletionStatusId().equalsIgnoreCase( "N" ) )
			{ // check the actual code for non-compliant
				totalRules += 4;
			}
		}

		return totalRules;
	}

	/*
	 * 
	 */
	public static int getEducationTotalForResidential( String juvenileNum )
	{
		int total = 0;
		Collection eduTraits = new ArrayList();

		retrieveTraitsAndDescriptionsByType( RiskAnalysisConstants.RESIDENTIAL_SCHOOLATTENDANCE_TRAIT, eduTraits );
		retrieveTraitsAndDescriptionsByType( RiskAnalysisConstants.RESIDENTIAL_SCHOOLBEHAVIOR_TRAIT, eduTraits );
		retrieveTraitsAndDescriptionsByType( RiskAnalysisConstants.RESIDENTIAL_EDUCATIONALPERFORMANCE_TRAIT, eduTraits );

		Map juvTraitMap = retrieveAllTraitsForJuvenile( juvenileNum );
		Iterator<TraitTypeResponseEvent> ite = eduTraits.iterator();
		while(ite.hasNext())
		{
			TraitTypeResponseEvent tEvt = ite.next();
			if( juvTraitMap.containsKey( tEvt.getTraitTypeId() ) )
			{
				try
				{
					total += Integer.parseInt( tEvt.getRiskPoints() );
				}
				catch(NumberFormatException nfe)
				{ /* just fall through and let 'total' stay as is */
				}
			}
		}

		return total;
	}

	/*
	 * 
	 */
	public static Map retrieveAllTraitsForJuvenile( String juvenileNum )
	{
		Map juvTraitMap = new HashMap();

		Iterator<JuvenileTrait> iter = JuvenileTrait.findAllByAttributeName( "juvenileNum", juvenileNum );
		while(iter.hasNext())
		{
			JuvenileTrait trait = iter.next();
			JuvenileTraitResponseEvent replyEvent = trait.getValueObject();
			juvTraitMap.put( replyEvent.getTraitTypeId(), replyEvent );
		}

		return juvTraitMap;
	}

	/*
	 * 
	 */
	private static void retrieveTraitsAndDescriptionsByType( 
			String traitTypeName, Collection eduTraits )
	{
		TraitType parentTrait = TraitType.findByAttributeName( "name", traitTypeName );
		GetJuvenileTraitTypesEvent juvTraitEvent = (GetJuvenileTraitTypesEvent)
				EventFactory.getInstance( JuvenileCaseControllerServiceNames.GETJUVENILETRAITTYPES );

		juvTraitEvent.setTraitType( parentTrait.getOID().toString() );

		Iterator<TraitType> i = TraitType.findByType( juvTraitEvent );
		while(i.hasNext())
		{
			TraitType traitType = i.next();
			TraitTypeResponseEvent replyEvent = traitType.getValueObject();
			replyEvent.setTopic( traitType.getParentTypeId() );
			eduTraits.add( replyEvent );
		}
	}

	/*
	 * 
	 */
	public static boolean getProbationStatus( String JuvenileNum )
	{
		boolean status = false;
		GetProbationStatusForRiskAssessmentEvent event = new GetProbationStatusForRiskAssessmentEvent();

		event.setJuvenileNum( JuvenileNum );

		Iterator files = JuvenileCasefile.findAll( event );
		if( files.hasNext() )
		{
			status = true;
		}

		return status;
	}

	/**
	 * @param saveIntAssessEvent
	 * @param assessmentType
	 * @return riskAnalysis
	 */
	public static RiskAnalysis getLatestRiskAnalysisUpTo30Days( String juvenileNum, String assessmentType )
	{
		GetRecentRiskAnalysisForJuvenileEvent event = new GetRecentRiskAnalysisForJuvenileEvent();
		event.setJuvenileNumber( juvenileNum );
		event.setAssessmentType( assessmentType );
		RiskAnalysis riskAnalysis = null;
		Iterator riskAnalysisIter = RiskAnalysis.findAll( event );
		if( riskAnalysisIter.hasNext() )
		{
			riskAnalysis = (RiskAnalysis)riskAnalysisIter.next();
		}

		return riskAnalysis;
	}
	
	/**
	 * @param saveIntAssessEvent
	 * @param assessmentType
	 * @return riskAnalysis
	 */
	public static RiskAnalysis getLatestRiskAnalysisByCaseFile( String casefileId, String assessmentType )
	{
		RiskAnalysis riskAnalysis = null;
		
		GetLatestRiskAnalysisEvent getLatestRiskAnalysisEventByCaseFile = new GetLatestRiskAnalysisEvent();
		getLatestRiskAnalysisEventByCaseFile.setCasefileID( casefileId );
		getLatestRiskAnalysisEventByCaseFile.setAssessmentType( assessmentType );
				
		Iterator<RiskAnalysis> riskAnalysisIter = RiskAnalysis.findAll( getLatestRiskAnalysisEventByCaseFile );
		if( riskAnalysisIter != null && riskAnalysisIter.hasNext() )
		{
			while(riskAnalysisIter.hasNext())
			{
				riskAnalysis = riskAnalysisIter.next();
			}
		}

		return riskAnalysis;
	}
	
	/**
	 * @param saveIntAssessEvent
	 * @param assessmentType
	 * @return riskAnalysis
	 */
	public static RiskAnalysis getLatestRiskAnalysisByJuvenile( String juvenileNum, String assessmentType )
	{
		RiskAnalysis riskAnalysis = null;
		
		CheckPreConditionsForJuvenileEvent getLatestRiskAnalysisEventByJuvenile = new CheckPreConditionsForJuvenileEvent();
		getLatestRiskAnalysisEventByJuvenile.setAssessmentType(assessmentType);
		getLatestRiskAnalysisEventByJuvenile.setJuvenileNumber(juvenileNum);
		
		Iterator<RiskAnalysis> riskAnalysisIter = RiskAnalysis.findAll( getLatestRiskAnalysisEventByJuvenile );
		if( riskAnalysisIter != null && riskAnalysisIter.hasNext() )
		{
			while(riskAnalysisIter.hasNext())
			{
				riskAnalysis = riskAnalysisIter.next();
			}
		}

		return riskAnalysis;
	}

	/**
	 * @param saveIntAssessEvent
	 * @param assessmentType
	 * @return riskAnalysis
	 */
	public static Iterator getRiskAnalysisByCasefileIdAndAssessmentType( 
			String casefileId, String assessmentType )
	{
		GetRiskAnalysisByCasefileIdAndAssmtTypeEvent gEvent = new GetRiskAnalysisByCasefileIdAndAssmtTypeEvent();
		gEvent.setAssessmentType( assessmentType );
		gEvent.setCasefileID( casefileId );
		Iterator iter = RiskAnalysis.findAll( gEvent );

		return iter;
	}

	/**
	 * @param riskAnalysis
	 * @param latestReferralRiskAnalysis
	 */
	public static void setInterviewRiskAnalysisRecommendation( 
			RiskAnalysis riskAnalysis, boolean isCustody )
	{
		Iterator<RiskRecommendation> iter = RiskRecommendation.findAllByAssessmentType( RiskAnalysisConstants.RISK_ASSESSMENT_TYPE, RiskAnalysisConstants.RISK_TYPE_INTERVIEW );

		while(iter.hasNext())
		{
			RiskRecommendation riskRecommend = iter.next();

			if( riskRecommend.isCustody() != isCustody )
			{
				continue;
			}

			if( riskAnalysis.getFinalScore() >= riskRecommend.getMinValue() && 
					riskAnalysis.getFinalScore() < (riskRecommend.getMaxValue() + 1) )
			{
				riskAnalysis.setRecommendation( riskRecommend.getRecommendation() );
				break;
			}
		}
	}

	/**
	 * @param riskAnalysis
	 * @param isCustody
	 */
	public static void setProgressRiskAnalysisRecommendation( 
			RiskAnalysis riskAnalysis, boolean isCustody )
	{
		Iterator<RiskRecommendation> iter = RiskRecommendation.findAllByAssessmentType( RiskAnalysisConstants.RISK_ASSESSMENT_TYPE, RiskAnalysisConstants.RISK_TYPE_PROGRESS );

		while(iter.hasNext())
		{
			RiskRecommendation riskRecommend = iter.next();

			if( riskRecommend.isCustody() != isCustody )
			{
				continue;
			}

			if( riskAnalysis.getFinalScore() >= riskRecommend.getMinValue() && 
					riskAnalysis.getFinalScore() < (riskRecommend.getMaxValue() + 1) )
			{
				riskAnalysis.setRecommendation( riskRecommend.getRecommendation() );
				break;
			}
		}
	}

	/**
	 * @param dispatch
	 * @param b
	 */
	public static void retrieveTestingTraitQuestions( IDispatch dispatch, boolean preConditions )
	{
	}

	/**
	 * @param preCondEvent
	 * @param dispatch
	 */
	public static void sendProgressPrefilInfo( 
			CheckProgressPreConditionsEvent preCondEvent, IDispatch dispatch )
	{
		// get the association values for groupid vs traitid
		String aJuvenileNum = preCondEvent.getJuvenileNumber();
		ProgressPrefillResponseEvent prefill = new ProgressPrefillResponseEvent();

		prefill.setRiskPoint( "0" );
		prefill.setSupervisionLevelId( null );
		prefill.setSupervisionLevelName( UIConstants.EMPTY_STRING );

		GetTraitChildByCategoryEvent traitEvent = new GetTraitChildByCategoryEvent();
		traitEvent.setTraitCategoryName( PDJuvenileCaseConstants.TRAIT_CATEGORY_NAME_SUPERVISION_LEVEL );

		HashMap traitTypeIdsMap = new HashMap();
		Iterator<TraitType> i = TraitType.findByType( traitEvent );
		if( i != null && i.hasNext() )
		{
			while(i.hasNext())
			{
				TraitType traitType = i.next();
				String theKey = traitType.getTraitTypeId();
				traitTypeIdsMap.put( theKey, traitType );
			}
		}

		GetJuvenileTraitsEvent myJuvTraitEvt = new GetJuvenileTraitsEvent();
		myJuvTraitEvt.setJuvenileNum( aJuvenileNum );

		JuvenileTrait mostRecentTrait = null;
		Iterator<JuvenileTrait> juvTraits = JuvenileTrait.findAll( myJuvTraitEvt );
		if( juvTraits != null && juvTraits.hasNext() )
		{
			while(juvTraits.hasNext())
			{
				JuvenileTrait myTrait = juvTraits.next();
				String traitTypeId = myTrait.getTraitTypeId();
				if( traitTypeIdsMap.containsKey( traitTypeId ) )
				{
					if( mostRecentTrait != null )
					{
						if( mostRecentTrait.getCreatedDate().compareTo( mostRecentTrait.getCreatedDate() ) > 0 )
						{
							mostRecentTrait = myTrait;
						}
					}
					else
					{
						mostRecentTrait = myTrait;
					}
				}
			} // while
		}

		if( mostRecentTrait != null )
		{
			TraitType myType = (TraitType)traitTypeIdsMap.get( mostRecentTrait.getTraitTypeId() );
			if( myType != null )
			{
				try
				{
					prefill.setRiskPoint( myType.getRiskPoints() );
				}
				catch(Exception e)
				{
					// Ignore exception
				}
				prefill.setSupervisionLevelName( myType.getName() );
			}
		}
		dispatch.postEvent( prefill );
	}
}
