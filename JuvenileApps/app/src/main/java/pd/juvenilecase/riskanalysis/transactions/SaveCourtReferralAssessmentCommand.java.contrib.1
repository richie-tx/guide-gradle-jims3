//Source file: C:\\views\\CommonSupervision\\app\\src\\pd\\juvenilecase\\transactions\\SaveInterviewAssessmentCommand.java

package pd.juvenilecase.riskanalysis.transactions;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;

import messaging.juvenilecase.reply.RiskRecommendationResponseEvent;
import messaging.juvenilecase.reply.RiskSuggestedCasePlanDomainResponseEvent;
import messaging.riskanalysis.RiskQuestionAnswerEvent;
import messaging.riskanalysis.SaveCourtReferralAssessmentEvent;
import messaging.riskanalysis.SaveReferralAssessmentEvent;
import mojo.km.context.ICommand;
import mojo.km.dispatch.EventManager;
import mojo.km.dispatch.IDispatch;
import mojo.km.messaging.IEvent;
import mojo.km.persistence.Home;
import mojo.km.persistence.IHome;
import naming.RiskAnalysisConstants;
import naming.UIConstants;
import pd.exception.ComputationValidationException;
import pd.juvenilecase.JuvenileCasefile;
import pd.juvenilecase.riskanalysis.PDRiskAnalysisHelper;
import pd.juvenilecase.riskanalysis.RiskAnalysis;
import pd.juvenilecase.riskanalysis.RiskAnalysisCourtReferral;
import pd.juvenilecase.riskanalysis.RiskAnalysisRecommendation;
import pd.juvenilecase.riskanalysis.RiskAnalysisReferral;
import pd.juvenilecase.riskanalysis.RiskAnswer;
import pd.juvenilecase.riskanalysis.RiskFinalScore;
import pd.juvenilecase.riskanalysis.RiskRecommendation;
import pd.juvenilecase.riskanalysis.RiskResponse;

public class SaveCourtReferralAssessmentCommand implements ICommand 
{
   
   /**
    * @roseuid 4342C32E01E8
    */
   public SaveCourtReferralAssessmentCommand() 
   {
    
   }
   
   /**
    * @param event
    * @roseuid 433C3D3D00DD
    */
   public void execute(IEvent event) throws ComputationValidationException
   {
    
	   SaveCourtReferralAssessmentEvent saveReferralAssessEvent = (SaveCourtReferralAssessmentEvent)event;
		
		if ( saveReferralAssessEvent.isUpdateOverRiddenStatus() ) {
			   
			   if ( (saveReferralAssessEvent.getAssessmentID() != null) && (saveReferralAssessEvent.getAssessmentID().length() > 0) ) {
				   //PDRiskAnalysisHelper.updateCourtReferralRiskAnalysisOverrideStatus(saveReferralAssessEvent);
			   }
			   	   
		} else {
			
		   if (saveReferralAssessEvent.isUpdate()) {
			   saveCourtReferralUpdate(saveReferralAssessEvent);
		   } else if (saveReferralAssessEvent.isCompletionUpdate()) {	   
			   saveCourtReferralCompletionUpdate(saveReferralAssessEvent);
		   } else {
			   saveCourtReferral(saveReferralAssessEvent);
		   }
		  
	   }
   }
   
   /**
    * This will be for updating existing court referrals 
	 * @param saveIntAssessEvent
	 * @throws ComputationValidationException
	 */
	private void saveCourtReferralCompletionUpdate(SaveCourtReferralAssessmentEvent event)
			throws ComputationValidationException {
		
		SaveCourtReferralAssessmentEvent saveCourtRefAssessEvent = (SaveCourtReferralAssessmentEvent)event;
		
		RiskAnalysisCourtReferral riskCourtReferral = null;
	   	Iterator<RiskAnalysisCourtReferral> riskCourtReferralIter = RiskAnalysisCourtReferral.findAllByAttributeName( RiskAnalysisConstants.RISK_ANALYSIS_ID, saveCourtRefAssessEvent.getRiskAnalysisId() );
	   	while(riskCourtReferralIter.hasNext()) {
	   		riskCourtReferral = riskCourtReferralIter.next();
			break;
		}
	   	
		if (saveCourtRefAssessEvent.getCollateralVisits() != null && saveCourtRefAssessEvent.getCollateralVisits().length() > 0) {
			riskCourtReferral.setCollateralVisits(Integer.parseInt(saveCourtRefAssessEvent.getCollateralVisits()));
		}
		riskCourtReferral.setCourtDispositionTJPC(saveCourtRefAssessEvent.getCourtDispositionTJPC());
		if (saveCourtRefAssessEvent.getFace2FaceVisits() != null && saveCourtRefAssessEvent.getFace2FaceVisits().length() > 0) {
			riskCourtReferral.setFace2FaceVisits(Integer.parseInt(saveCourtRefAssessEvent.getFace2FaceVisits()));
		}
		riskCourtReferral.setJjsCourtDecision(saveCourtRefAssessEvent.getJjsCourtDecision());
		riskCourtReferral.setJjsCourtDisposition(saveCourtRefAssessEvent.getJjsCourtDisposition());
		riskCourtReferral.setUpdateUserID(saveCourtRefAssessEvent.getJpoUserID());
		
		IHome home=new Home();
	   	home.bind(riskCourtReferral);

		//Update Risk Analysis with latest Information
		RiskAnalysis riskAnalysis = RiskAnalysis.find( saveCourtRefAssessEvent.getRiskAnalysisId() );
		riskAnalysis.setUpdateUserID(saveCourtRefAssessEvent.getJpoUserID());
		
		//need to add completion attribute to RiskAnalysis entity and it's mapping
		riskAnalysis.setCompleted(true);
		
		//IHome home=new Home();
	   	home.bind(riskAnalysis);
	   	
	   	//TODO Flips certain flags, need to confirm
		JuvenileCasefile myCasefile=JuvenileCasefile.find(saveCourtRefAssessEvent.getCasefileID());
		if(myCasefile!=null){
			myCasefile.setIsReferralRiskNeeded(false);
			PDRiskAnalysisHelper.turnRiskFlagOffOnAllCasefiles(riskAnalysis.getJuvenileNum(),riskAnalysis.getAssessmentType(),myCasefile.getSupervisionCategoryId());
		}
		
	}
   
   /**
    * This will be for updating existing court referrals 
	 * @param saveIntAssessEvent
	 * @throws ComputationValidationException
	 */
	private void saveCourtReferralUpdate(SaveCourtReferralAssessmentEvent event)
			throws ComputationValidationException {
		
		SaveCourtReferralAssessmentEvent saveCourtRefAssessEvent = (SaveCourtReferralAssessmentEvent)event;
		
		//Update Risk Analysis with latest Information
		RiskAnalysis riskAnalysis = RiskAnalysis.find( saveCourtRefAssessEvent.getRiskAnalysisId() );
		//riskAnalysis.setEnteredDate(saveRefAssessEvent.getAssessmentDate());
		riskAnalysis.setCreateUserID(saveCourtRefAssessEvent.getJpoUserID());
		
		if ((saveCourtRefAssessEvent.getModReason() != null) && (saveCourtRefAssessEvent.getModReason().length() > 0)) {
        	riskAnalysis.setModReason(saveCourtRefAssessEvent.getModReason());
        } else {
        	riskAnalysis.setModReason("");
        }
		
		//Figure out what type of Court Referral Risk Analysis this is.
		if (saveCourtRefAssessEvent.getAssessmentType().equals(RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_MALE)) 
		{
			riskAnalysis.setAssessmentType(RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_MALE);
		}
		else
		{
			riskAnalysis.setAssessmentType(RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_FEMALE);
		}
			
		IHome home=new Home();
	   	home.bind(riskAnalysis);
		
	    //Update Risk Analysis Court Referral with latest Information 	
	   	RiskAnalysisCourtReferral riskCourtReferral = RiskAnalysisCourtReferral.find( saveCourtRefAssessEvent.getRiskAnalysisId() );
	   	
        //Delete all old RiskAnalysisRecommendations by RiskAnalysisId
	   	PDRiskAnalysisHelper.bindDeleteRiskAnalysisRecommendations(riskAnalysis);
		//Delete all old RiskFinalScores by RiskAnalysisId
	   	PDRiskAnalysisHelper.bindDeleteRiskFinalScores(riskAnalysis);
        
        saveCourtRefAssessEvent.setRiskAnalysisId(riskAnalysis.getOID());
		PDRiskAnalysisHelper.setCalculatedScoresCourtReferral(riskCourtReferral, saveCourtRefAssessEvent, riskAnalysis);
		
		if (saveCourtRefAssessEvent.getAssessmentType().equals(RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_MALE)) 
		{
			PDRiskAnalysisHelper.bindCreateRiskAnalysisRecommendationsDynamically(riskAnalysis, RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_MALE);
		}
		else
		{
			PDRiskAnalysisHelper.bindCreateRiskAnalysisRecommendationsDynamically(riskAnalysis, RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_FEMALE);
		}
		

	    //Delete all old RiskReponses by RiskAnalysisId
		PDRiskAnalysisHelper.bindDeleteRiskResponses(riskAnalysis);
	   
		//Insert new RiskReponses by RiskAnalysisId
	    Enumeration events = saveCourtRefAssessEvent.getRequests();
	    PDRiskAnalysisHelper.bindCreateRiskReponses(riskAnalysis.getOID(), events);
	    IDispatch dispatch = EventManager.getSharedInstance(EventManager.REPLY);
	    PDRiskAnalysisHelper.sendRecommendatationsAndFinalScores(riskAnalysis, dispatch);
		PDRiskAnalysisHelper.sendSuggestedCasePlainDomains(riskAnalysis.getOID(), dispatch);
		
	}

	/**
	 * @param event
	 * @throws ComputationValidationException
	 */
	private void saveCourtReferral(IEvent event) throws ComputationValidationException {
		SaveCourtReferralAssessmentEvent saveCourtReferralAssessEvent = (SaveCourtReferralAssessmentEvent)event;
			
		//Create new Risk Analysis for Court Referral
		RiskAnalysis riskAnalysis = new RiskAnalysis();
		
		//TODO: need to create a table with static values for RiskAnalysisCourtReferral, 
		//TODO: then add mapping in the Risk Analysis XML
		//Create New Court Referral Risk Analysis
		RiskAnalysisCourtReferral riskCourtReferral = new RiskAnalysisCourtReferral();
		//riskCourtReferral.setEnteredDate(saveCommAssessEvent.getAssessmentDate()); //Date is not being set on the event at the moment
		riskCourtReferral.setEnteredDate(new Date()); //TEMPORARY
		riskCourtReferral.setCreateUserID(saveCourtReferralAssessEvent.getJpoUserID());
		
		//Figure out what type of Court Referral Risk Analysis this is.
		if (saveCourtReferralAssessEvent.getAssessmentType().equals(RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_MALE)) 
		{
			riskAnalysis.setAssessmentType(RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_MALE);
		}
		else
		{
			riskAnalysis.setAssessmentType(RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_FEMALE);
		}
		
		riskAnalysis.setJuvenileNum(saveCourtReferralAssessEvent.getJuvenileNum());
		riskAnalysis.setCasefileID(Integer.parseInt(saveCourtReferralAssessEvent.getCasefileID()));
		//riskAnalysis.setEnteredDate(saveCommAssessEvent.getAssessmentDate()); //Date is not being set on the event at the moment
		riskAnalysis.setEnteredDate(new Date()); //TEMPORARY
		
		//Explicitly bind to database so that a Risk Analysis OID is generated
		IHome home=new Home();
		home.bind(riskAnalysis);
		
		saveCourtReferralAssessEvent.setRiskAnalysisId(riskAnalysis.getOID());
		PDRiskAnalysisHelper.setCalculatedScoresCourtReferral(riskCourtReferral, saveCourtReferralAssessEvent, riskAnalysis);
		
		if (saveCourtReferralAssessEvent.getAssessmentType().equals(RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_MALE)) 
		{
			PDRiskAnalysisHelper.bindCreateRiskAnalysisRecommendationsDynamically(riskAnalysis, RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_MALE);
		}
		else
		{
			PDRiskAnalysisHelper.bindCreateRiskAnalysisRecommendationsDynamically(riskAnalysis, RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_FEMALE);
		}
		
		riskCourtReferral.setRiskAnalysis(riskAnalysis);
	
		Enumeration events = saveCourtReferralAssessEvent.getRequests();
		PDRiskAnalysisHelper.bindCreateRiskReponses(riskAnalysis.getOID(), events);
		IDispatch dispatch = EventManager.getSharedInstance(EventManager.REPLY);
		PDRiskAnalysisHelper.sendRecommendatationsAndFinalScores(riskAnalysis, dispatch);
		PDRiskAnalysisHelper.sendSuggestedCasePlainDomains(riskAnalysis.getOID(), dispatch);
		
	}

	

	
   
   /**
    * @param event
    * @roseuid 433C3D3D00DF
    */
   public void onRegister(IEvent event) 
   {
    
   }
   
   /**
    * @param event
    * @roseuid 433C3D3D00E1
    */
   public void onUnregister(IEvent event) 
   {
    
   }
   
   /**
    * @param anObject
    * @roseuid 433C3D3D00E3
    */
   public void update(Object anObject) 
   {
    
   }
}
