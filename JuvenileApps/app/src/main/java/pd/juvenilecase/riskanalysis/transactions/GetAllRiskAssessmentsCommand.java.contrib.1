//Source file: C:\\views\\CommonSupervision\\app\\src\\pd\\juvenilecase\\transactions\\GetAllRiskAssessmentsCommand.java

package pd.juvenilecase.riskanalysis.transactions;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import messaging.juvenilecase.reply.RiskAssessmentListResponseEvent;
import messaging.juvenilecase.reply.RiskRecommendationResponseEvent;
import messaging.riskanalysis.GetAllRiskAssessmentsEvent;
import mojo.km.context.ICommand;
import mojo.km.dispatch.EventManager;
import mojo.km.dispatch.IDispatch;
import mojo.km.messaging.IEvent;
import pd.juvenilecase.riskanalysis.RiskAnalysis;
import pd.juvenilecase.riskanalysis.RiskAnalysisRecommendation;
import pd.juvenilecase.riskanalysis.RiskFinalScore;
import pd.juvenilecase.riskanalysis.RiskRecommendation;

public class GetAllRiskAssessmentsCommand implements ICommand 
{
   
   /**
    * @roseuid 4342C2F201B0
    */
   public GetAllRiskAssessmentsCommand() 
   {
   }
   
   /**
    * @param event
    * @roseuid 433C3D3E005C
    */
   public void execute(IEvent event) 
   {
		GetAllRiskAssessmentsEvent reqEvent = (GetAllRiskAssessmentsEvent) event;
		Iterator riskAnalysis = RiskAnalysis.findAllByJuvenileNum(reqEvent.getJuvenileNumber());
		
		IDispatch dispatch = EventManager.getSharedInstance(EventManager.REPLY);
		
		while(riskAnalysis.hasNext())
		{
			RiskAnalysis risk = (RiskAnalysis)riskAnalysis.next();
			RiskAssessmentListResponseEvent riskAssessList = new RiskAssessmentListResponseEvent();
			riskAssessList.setAssessmentDate(risk.getEnteredDate());
			riskAssessList.setAssessmentID(risk.getOID().toString());
			riskAssessList.setAssessmentType(risk.getAssessmentType());
			riskAssessList.setRecommendation(risk.getRecommendation());
			riskAssessList.setCasefileId(String.valueOf(risk.getCasefileID()));
			riskAssessList.setCompleted(risk.isCompleted());
			
			List riskRecommendationResponseEvents = new ArrayList();
			Collection recommendations = risk.getRecommendations();
			Collection finalscores = risk.getFinalScores();
			Iterator<RiskFinalScore> iteFinalscores = finalscores.iterator();
			while(iteFinalscores.hasNext()) 
			{
				RiskFinalScore riskFinalScore = iteFinalscores.next();
				
				Iterator<RiskAnalysisRecommendation> iterRecommendations = recommendations.iterator();
				while(iterRecommendations.hasNext())
				{
					RiskAnalysisRecommendation riskAnalysisRecommendation = iterRecommendations.next();
					RiskRecommendation riskRecommend = riskAnalysisRecommendation.getRecommendation();
					
					if (riskFinalScore.getRiskResultGroup().getDescription()
							.equalsIgnoreCase(riskRecommend.getRiskResultGroup().getDescription())) 
					{
						RiskRecommendationResponseEvent riskRecommendScore = new RiskRecommendationResponseEvent();
						riskRecommendScore.setRiskAnalysisRecommendation(riskRecommend.getRecommendation());
						riskRecommendScore.setRiskAnalysisScore(riskFinalScore.getFinalScore());
						riskRecommendScore.setRiskAnalysisId(risk.getOID().toString());
						riskRecommendScore.setResultGroup(riskRecommend.getRiskResultGroup().getDescription());
						riskRecommendationResponseEvents.add(riskRecommendScore);
					}
				}
			}
			
			riskAssessList.setRecommendations(riskRecommendationResponseEvents);
			
			dispatch.postEvent(riskAssessList);
		}
   }
   
   /**
    * @param event
    * @roseuid 433C3D3E005E
    */
   public void onRegister(IEvent event) 
   {
    
   }
   
   /**
    * @param event
    * @roseuid 433C3D3E0060
    */
   public void onUnregister(IEvent event) 
   {
    
   }
   
   /**
    * @param anObject
    * @roseuid 433C3D3E0065
    */
   public void update(Object anObject) 
   {
    
   }
}
