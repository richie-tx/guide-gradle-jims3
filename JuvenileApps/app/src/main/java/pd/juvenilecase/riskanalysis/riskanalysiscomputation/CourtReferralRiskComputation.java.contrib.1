package pd.juvenilecase.riskanalysis.riskanalysiscomputation;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import naming.RiskAnalysisConstants;
import pd.exception.ComputationValidationException;
import pd.juvenilecase.riskanalysis.RiskFinalScore;
import pd.juvenilecase.riskanalysis.RiskResultGroup;
import messaging.riskanalysis.RiskQuestionAnswerEvent;
import messaging.riskanalysis.SaveCommunityAssessmentEvent;
import messaging.riskanalysis.SaveCourtReferralAssessmentEvent;
import messaging.riskanalysis.reply.CourtReferralRiskComputationReponseEvent;
import messaging.riskanalysis.reply.RiskComputationReponseEvent;
import messaging.riskanalysis.reply.CommunityRiskComputationReponseEvent;
import mojo.km.messaging.IEvent;
import mojo.km.persistence.Home;
import mojo.km.persistence.IHome;
/** 
 * @author PAlcocer
 * @generated "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
 */
public class CourtReferralRiskComputation extends RiskComputation  {
	
	private CourtReferralRiskComputationReponseEvent riskCourtReferralCompRespEvent;
	private SaveCourtReferralAssessmentEvent saveCourtReferralAssessEvent;
	private boolean maleType = false;
	
	//Questions which will be used in formula(s)
	private int question1Weight;
	private int question2Weight;
	private int question3Weight;
	private int question4Weight;
	private int question5Weight;
	private int question6Weight;
	private int question7Weight;
	private int question8Weight;
	private int question9Weight;
	private int question10Weight;
	private int question11Weight;
	private int question12Weight;
	private int question13Weight;
	private int question14Weight;
	private int question15Weight;
	private int question16Weight;
	private int question17Weight;
	private int question18Weight;
	  
	public CourtReferralRiskComputation (SaveCourtReferralAssessmentEvent saveCourtReferralAssessEvent) {
		this.saveCourtReferralAssessEvent = saveCourtReferralAssessEvent; 		
		setWeightOfQuestions();
	}
	
	/** 
	 * (non-Javadoc)
	 * @see RiskComputation#compute()
	 * @generated "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
	 */
	public RiskComputationReponseEvent compute() throws ComputationValidationException {
		
		validate(saveCourtReferralAssessEvent);
		riskCourtReferralCompRespEvent = new CourtReferralRiskComputationReponseEvent();
		riskCourtReferralCompRespEvent.setTotalScores(finalScores());
		
		return (RiskComputationReponseEvent)riskCourtReferralCompRespEvent;
	}

	/** 
	 * (non-Javadoc)
	 * @see RiskComputation#validate(IEvent event)
	 * @generated "UML to Java (com.ibm.xtools.transform.uml2.java5.internal.UML2JavaTransform)"
	 */
	protected void validate(IEvent event) throws ComputationValidationException {
		
		boolean failed = false;
		
		if (failed) {
			throw new ComputationValidationException("CourtReferralRiskComputation failed validation.");
		}
		
	}
	
	/* (non-Javadoc)
	 * @see pd.juvenilecase.riskanalysis.riskanalysiscomputation.RiskComputation#finalScore()
	 */
	protected int finalScore() {
		int total = 0;
		return total;
	}
	
	protected Collection finalScores() {
		
		Collection finalScores = new ArrayList();
		
		finalScores.add(riskAssessmentScore());
		finalScores.add(needsAssessmentScore());
		
		return finalScores;
	}
	
	private RiskFinalScore riskAssessmentScore() {
		RiskFinalScore riskFinalScore = new RiskFinalScore();
		RiskResultGroup riskResultGroup = null;
		
		Iterator<RiskResultGroup> riskResultGroups = RiskResultGroup.findAllByAttributeName("description", "Risk");
		
		while ( riskResultGroups.hasNext() ){
			riskResultGroup = riskResultGroups.next();
		}
		
		if (riskResultGroup != null) {
			riskFinalScore.setRiskResultGroup(riskResultGroup);
		}
		
		riskFinalScore.setRiskAnalysisId(Integer.parseInt(saveCourtReferralAssessEvent.getRiskAnalysisId()));
		riskFinalScore.setFinalScore(question1Weight + question2Weight + question3Weight + question4Weight +
				question5Weight + question6Weight + question7Weight + question8Weight + question9Weight +
				question10Weight + question11Weight);
		
		//Explicitly bind to database so that a Risk Final Score OID is generated
		IHome home=new Home();
		home.bind(riskFinalScore);

		return riskFinalScore;
	}
	
	private RiskFinalScore needsAssessmentScore() {
		RiskFinalScore riskFinalScore = new RiskFinalScore();
		RiskResultGroup riskResultGroup = null;
		
		Iterator<RiskResultGroup> riskResultGroups = RiskResultGroup.findAllByAttributeName("description", "Needs");
		
		while ( riskResultGroups.hasNext() ){
			riskResultGroup = riskResultGroups.next();
		}

		if (riskResultGroup != null) {
			riskFinalScore.setRiskResultGroup(riskResultGroup);
		}
		riskFinalScore.setRiskAnalysisId(Integer.parseInt(saveCourtReferralAssessEvent.getRiskAnalysisId()));
		riskFinalScore.setFinalScore(question12Weight + question13Weight + question14Weight + question15Weight +
				question16Weight + question17Weight + question18Weight);
		
		//Explicitly bind to database so that a Risk Final Score OID is generated
		IHome home=new Home();
		home.bind(riskFinalScore);

		return riskFinalScore;
	}
	
	/* (non-Javadoc)
	 * @see pd.juvenilecase.riskanalysis.riskanalysiscomputation.RiskComputation#setWeightOfQuestions()
	 */
	protected void setWeightOfQuestions() {
		Enumeration riskQuestionAnswerEvents = saveCourtReferralAssessEvent.getRequests();
		
		RiskComputationUtil riskComputationUtil = new RiskComputationUtil();
		HashMap hmQuestionWeights = riskComputationUtil.getQuestionWeights(riskQuestionAnswerEvents);
				
		Set entries = hmQuestionWeights.entrySet();
		Iterator it = entries.iterator();
        while (it.hasNext()) {
        	Map.Entry entry = (Map.Entry) it.next();
            //System.out.println( "Key: " +  entry.getKey() +  " Value: " + entry.getValue());
            int questionNumber = (Integer)entry.getKey();
            int weight = (Integer)entry.getValue();
            switch(questionNumber) {
				case 11: {
					question1Weight = weight;
						break;
				} case 12: {
					question2Weight = question2ActualWeight(weight);;
					break;
				} case 13: {
					question3Weight = weight;
					break;
				} case 14: {
					question4Weight = weight;
					break;
				} case 15: {
					question5Weight = weight;
					break;
	   			} case 16: {
	   				//uses logic to get weight
					question6Weight = question6ActualWeight(weight);
					break;
				} case 17: {
					question7Weight = question7ActualWeight(weight);
					break;
				} case 18: {
					question8Weight = weight;
					break;
				} case 19: {
					question9Weight = weight;
					break;
				} case 20: {
					question10Weight = weight;
					break;
				} case 21: {
					question11Weight = weight;
					break;
				} case 23: {
					question12Weight = weight;
					break;
				} case 24: {
					question13Weight = weight;
					break;
				} case 25: {
					question14Weight = weight;
					break;
				} case 26: {
					question15Weight = weight;
					break;
				} case 27: {
					question16Weight = weight;
					break;
				} case 28: {
					question17Weight = weight;
					break;
				} case 29: {
					question18Weight = weight;
					break;
				}
	   		}		
		}
	}
	
	/**
	 * @return int total
	 */
	private int question2ActualWeight(int weight) {
		int total = 0;

		if(weight >= 4) {
			total = 1;
		} else if(weight >= 0 && weight <=3) {
			total = 0;
		} 
		
		return total;
	}
	
	/**
	 * @return int total
	 */
	private int question6ActualWeight(int weight) {
		int total = 0;
		
		if (isMaleType()) {
			if(weight >= 1) {
				total = 2;
			} 
		} else { // femaleType
			if(weight >= 2) {
				total = 2;
			} else if(weight == 1) {
				total = 1;
			} 
		}
		
		return total;
	}
	
	/**
	 * @return int total
	 */
	private int question7ActualWeight(int weight) {
		int total = 0;

		if(weight >= 9) {
			total = 2;
		} else if(weight >= 3 && weight <=8) {
			total = 1;
		} 
		
		return total;
	}
	
	/**
	 * @return int total
	 */
	private int question1ActualWeight(int weight) {
		int total = 0;

		if (isMaleType()) {
			if (weight >= 10 && weight <= 12) {
				total = 2;
			} else if (weight >= 13 && weight <= 15) {
				total = 1;
			} 
		} else {
			if (weight == 10 || weight == 11) {
				total = 4;
			} else if (weight == 12 || weight == 13) {
				total = 3;
			} else if (weight == 14 || weight == 15) {
				total = 2;
			} else {
				total = 0;
			} 
		}
		
		return total;
	}
	
	private boolean isMaleType() {
		if (saveCourtReferralAssessEvent.getAssessmentType().equals(RiskAnalysisConstants.RISK_TYPE_COURT_REFERRAL_MALE)) {
			maleType = true;
		}
		return maleType;
	}
	
	
	
}