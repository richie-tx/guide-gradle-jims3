//Source file: C:\\views\\CommonSupervision\\app\\src\\pd\\juvenilecase\\transactions\\SaveInterviewAssessmentCommand.java

package pd.juvenilecase.riskanalysis.transactions;

import java.util.Enumeration;

import messaging.juvenilecase.reply.ProgressRiskRecommendationResponseEvent;
import messaging.riskanalysis.RiskQuestionAnswerEvent;
import messaging.riskanalysis.SaveProgressAssessmentEvent;
import mojo.km.context.ICommand;
import mojo.km.dispatch.EventManager;
import mojo.km.dispatch.IDispatch;
import mojo.km.messaging.IEvent;
import mojo.km.persistence.Home;
import mojo.km.persistence.IHome;
import naming.RiskAnalysisConstants;
import pd.exception.ComputationValidationException;
import pd.juvenilecase.JuvenileCasefile;
import pd.juvenilecase.riskanalysis.PDRiskAnalysisHelper;
import pd.juvenilecase.riskanalysis.RiskAnalysis;
import pd.juvenilecase.riskanalysis.RiskAnalysisProgress;
import pd.juvenilecase.riskanalysis.RiskResponse;

public class SaveProgressAssessmentCommand implements ICommand
{
	/**
	 * @roseuid 4342C32E01E8
	 */
	public SaveProgressAssessmentCommand()
	{
	}

	/**
	 * @param event
	 * @roseuid 433C3D3D00DD
	 */
	public void execute(IEvent event) throws ComputationValidationException
	{
		SaveProgressAssessmentEvent saveProgAssessEvent = (SaveProgressAssessmentEvent)event;
		
		if ( saveProgAssessEvent.isUpdateOverRiddenStatus() ) {
			   
			   if ( (saveProgAssessEvent.getAssessmentID() != null) && (saveProgAssessEvent.getAssessmentID().length() > 0) ) {
				   PDRiskAnalysisHelper.updateProgressRiskAnalysisOverrideStatus(saveProgAssessEvent);
			   }
			   	   
		} else {
			
		   if (saveProgAssessEvent.isUpdate()) {
			   saveProgressUpdate(saveProgAssessEvent);
		   } else {
			   saveProgress(saveProgAssessEvent);
		   }
		  
	   }
	}
	
	/**
     * This will be for updating existing interviews 
	 * @param saveIntAssessEvent
	 * @throws ComputationValidationException
	 */
	private void saveProgressUpdate(SaveProgressAssessmentEvent saveIntAssessEvent)
			throws ComputationValidationException {
		
	}

	/**
	 * @param event
	 * @throws ComputationValidationException
	 */
	private void saveProgress(IEvent event)
			throws ComputationValidationException {
		SaveProgressAssessmentEvent saveCommAssessEvent = (SaveProgressAssessmentEvent)event;
		RiskAnalysis riskAnalysis = new RiskAnalysis();
		RiskAnalysisProgress riskProgress = new RiskAnalysisProgress();

		riskAnalysis.setAssessmentType(RiskAnalysisConstants.RISK_TYPE_PROGRESS);
		riskAnalysis.setJuvenileNum(saveCommAssessEvent.getJuvenileNum());
		riskAnalysis.setCasefileID(Integer.parseInt(saveCommAssessEvent.getCasefileID()));
		riskAnalysis.setEnteredDate(saveCommAssessEvent.getAssessmentDate());
		
		IHome home = new Home();
		home.bind(riskAnalysis);
		
		riskProgress.setRiskAnalysis(riskAnalysis);
		
		// need to change this
		/* 22jan2009 - mjt - the comment above has been there 
		 * since the inception of this file - would be nice 
		 * to know what needs to be changed with "this".
		 */
		riskProgress.setSupervisionMonth(12);

		/* although the "need to change this" comment seems
		 * to refer to the previous code statement, I am
		 * inclined to think it relates to this line of code,
		 * which disappeared from the code:
		 * riskProgress.setComments("Need to remove this Column");
		 */

		try
		{
			riskProgress.setSupervisionNumber(Integer.parseInt(saveCommAssessEvent.getCasefileID()));
		}
		catch( NumberFormatException nfe )
		{
			riskProgress.setSupervisionNumber( 0 );			
		}

		Enumeration events = saveCommAssessEvent.getRequests();
		boolean isCustody = isCustody(events);
		
		PDRiskAnalysisHelper.setCalculatedScoresProgress(riskProgress, saveCommAssessEvent, riskAnalysis);
		PDRiskAnalysisHelper.setProgressRiskAnalysisRecommendation(riskAnalysis, isCustody);

		String riskAnalyId = riskAnalysis.getOID().toString();
		RiskQuestionAnswerEvent lastQuestion = null;

		events = saveCommAssessEvent.getRequests();
		while( events.hasMoreElements() )
		{
			RiskQuestionAnswerEvent riskReqEvent = (RiskQuestionAnswerEvent)events.nextElement();
			
			RiskResponse riskResponse = new RiskResponse();
			riskResponse.setRiskAnalysisId(riskAnalyId);
			riskResponse.setText(riskReqEvent.getText());
			riskResponse.setWeightedResponseID(String.valueOf(riskReqEvent.getWeightedResponseID()));

			if( lastQuestion == null ) {
				lastQuestion = riskReqEvent;
			} else if( lastQuestion.getQuestionNumber() < riskReqEvent.getQuestionNumber() ) {
				lastQuestion = riskReqEvent;
			}
		}

		// Last Question is the JPO Comments.
		if( lastQuestion != null ) {
			riskProgress.setComments(lastQuestion.getAnswerText());
		}

		ProgressRiskRecommendationResponseEvent riskRecommendScore = new ProgressRiskRecommendationResponseEvent();
		riskRecommendScore.setRiskAnalysisScore(riskAnalysis.getFinalScore());
		riskRecommendScore.setRiskAnalysisRecommendation(riskAnalysis.getRecommendation());
		riskRecommendScore.setTotalSupervisionRules(riskProgress.getTotalSupervisionRules());
		riskRecommendScore.setRiskAnalysisId(riskAnalysis.getOID().toString());

		IDispatch dispatch = EventManager.getSharedInstance(EventManager.REPLY);
		dispatch.postEvent(riskRecommendScore);
		JuvenileCasefile myCasefile = JuvenileCasefile.find(saveCommAssessEvent.getCasefileID());
		if( myCasefile != null )
		{
			myCasefile.setIsProgressRiskNeeded(false);
			PDRiskAnalysisHelper.turnRiskFlagOffOnAllCasefiles(
					riskAnalysis.getJuvenileNum(), riskAnalysis.getAssessmentType(), 
					myCasefile.getSupervisionCategoryId());
		}
	}

	/**
	 * @param events
	 */
	private boolean isCustody(Enumeration<RiskQuestionAnswerEvent> events)
	{
		while( events.hasMoreElements() )
		{
			Object obj = events.nextElement();
			if( obj instanceof RiskQuestionAnswerEvent ) {	
				RiskQuestionAnswerEvent riskReqEvent = (RiskQuestionAnswerEvent)obj;
				if( riskReqEvent.getQuestionNumber() == 2 && 
						riskReqEvent.getAnswerText().equalsIgnoreCase(RiskAnalysisConstants.NO) )
				{
					return false;
				}
			}
		}
		
		return true;
	}

	/**
	 * @param event
	 * @roseuid 433C3D3D00DF
	 */
	public void onRegister(IEvent event)
	{

	}

	/**
	 * @param event
	 * @roseuid 433C3D3D00E1
	 */
	public void onUnregister(IEvent event)
	{

	}

	/**
	 * @param anObject
	 * @roseuid 433C3D3D00E3
	 */
	public void update(Object anObject)
	{

	}
}
