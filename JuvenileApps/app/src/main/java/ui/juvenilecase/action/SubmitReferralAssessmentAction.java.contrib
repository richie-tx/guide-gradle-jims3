//Source file: C:\\views\\CommonSupervision\\app\\src\\ui\\juvenilecase\\action\\SubmitReferralAssessmentAction.java

package ui.juvenilecase.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang.StringUtils ;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import messaging.juvenilecase.reply.RiskQuestionResponseEvent;
import messaging.juvenilecase.reply.RiskRecommendationResponseEvent;
import messaging.riskanalysis.SaveDelinquencyHistEvent;
import messaging.riskanalysis.SaveReferralAssessmentEvent;
import mojo.km.dispatch.EventManager;
import mojo.km.dispatch.IDispatch;
import mojo.km.messaging.EventFactory;
import mojo.km.messaging.IEvent;
import mojo.km.messaging.Composite.CompositeResponse;
import mojo.km.utilities.MessageUtil;
import naming.JuvenileRiskAnalysisControllerServiceNames;
import naming.RiskAnalysisConstants;
import naming.UIConstants;


import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import ui.common.UIUtil;
import ui.juvenilecase.form.riskanalysis.RiskAnalysisForm;
import ui.juvenilecase.form.riskanalysis.RiskAssessmentReferralForm;

public class SubmitReferralAssessmentAction extends LookupDispatchAction
{
	/**
	 * @roseuid 433D8A34008D
	 */
	public SubmitReferralAssessmentAction()
	{
	}

	/**
	 * @param aMapping
	 * @param aForm
	 * @param aRequest
	 * @param aResponse
	 * @return ActionForward
	 * @roseuid 433C3D3D02F9
	 */
	public ActionForward submit(ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse)
	{
		RiskAssessmentReferralForm refForm = (RiskAssessmentReferralForm)aForm;
		SaveReferralAssessmentEvent saveEvt = (SaveReferralAssessmentEvent)
				EventFactory.getInstance(JuvenileRiskAnalysisControllerServiceNames.SAVEREFERRALASSESSMENT);

		if( StringUtils.equalsIgnoreCase( refForm.getIsNewReferral(), "true") )
		{
			saveEvt.setNewReferral(true);
		}

		if( StringUtils.isNotEmpty( refForm.getRiskMandatoryDetentionCd() ) )
		{
			saveEvt.setRiskMandatoryDetentionCd(refForm.getRiskMandatoryDetentionCd());
		}
		
		if( StringUtils.isNotEmpty( refForm.getMoreThanOneFailureString() ) )
		{
			if (refForm.getMoreThanOneFailureString().equals(UIConstants.YES_FULL_TEXT)) 
			{
				saveEvt.setMoreThanOneFailure(true);
			} 
			else 
			{
				saveEvt.setMoreThanOneFailure(false);
			}
		}

		saveEvt.setAssessmentDate( new Date() );
		saveEvt.setCasefileID(refForm.getCasefileID());
		saveEvt.setJuvenileNum(refForm.getJuvenileNum());
		saveEvt.setJpoUserID(UIUtil.getCurrentUserID());

		String pendingCourtVop = refForm.getPendingCourtVOP();
		String pendingCourt = refForm.getPendingCourt();
		String probationStatus = refForm.getCurrentlyOnProbation();

		pendingCourtVop = (StringUtils.equalsIgnoreCase( pendingCourtVop, "Yes")) ? "true" : "false" ;
		pendingCourt =    (StringUtils.equalsIgnoreCase( pendingCourt, "Yes")) ?  "true" : "false" ;
		probationStatus = (StringUtils.equalsIgnoreCase( probationStatus, "Yes")) ?  "true" : "false" ;

		saveEvt.setVopPendingCourt(pendingCourtVop);
		saveEvt.setPendingCourt(pendingCourt);
		saveEvt.setProbationStatus(probationStatus);
		saveEvt.setAdditionalCharges(Integer.parseInt(refForm.getNumberOfCharges()));

		Iterator<IEvent> ite = refForm.getProcessedQuestionAnswers().iterator();
		while( ite.hasNext() )
		{
			saveEvt.addRequest( ite.next() );
		}
		
		SaveDelinquencyHistEvent histEvt = new SaveDelinquencyHistEvent();
		histEvt.setAgeFirstReferred(refForm.getAgeFirstReferred());
		histEvt.setSeriousnessIndex(refForm.getSeriousnessIndex());
		histEvt.setTotalCapitalFelony(refForm.getCapitalFelonyTotal());
		histEvt.setTotalClassAB(refForm.getMisdClassABTotal());
		histEvt.setTotalClassC(refForm.getMisdClassCTotal());
		histEvt.setTotalFelony1(refForm.getFelony1Total());
		histEvt.setTotalFelony2(refForm.getFelony2Total());
		histEvt.setTotalFelony3(refForm.getFelony3Total());
		histEvt.setTotalLevel(refForm.getLevelTotal());
		histEvt.setTotalOffenses(refForm.getOffensesTotal());
		histEvt.setTotalReferralsHistory(refForm.getReferralHistoryTotal());
		histEvt.setTotalStateJailFelony(refForm.getStateJailFelonyTotal());
		histEvt.setTotalStatusCO(refForm.getStatusCityOrdOffensesTotal());

		saveEvt.addRequest(histEvt);
		
		IDispatch dispatch = EventManager.getSharedInstance(EventManager.REQUEST);
		dispatch.postEvent(saveEvt);

		CompositeResponse composite = (CompositeResponse)dispatch.getReply();
		MessageUtil.processReturnException(composite);
		RiskRecommendationResponseEvent response = (RiskRecommendationResponseEvent)
				MessageUtil.filterComposite(composite, RiskRecommendationResponseEvent.class);

		refForm.setRecommendationScore(Integer.toString(response.getRiskAnalysisScore()));
		refForm.setRecommendation(response.getRiskAnalysisRecommendation());
		refForm.setRiskAnalysisId(response.getRiskAnalysisId());

		return aMapping.findForward( UIConstants.SUCCESS );
	}
	
	/**
	 * @param aMapping
	 * @param aForm
	 * @param aRequest
	 * @param aResponse
	 * @return ActionForward
	 * @roseuid 433C3D3D02F9
	 */
	public ActionForward updateReferralRiskAnalysisOverrideStatus(ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse)
	{
		RiskAnalysisForm riskForm = (RiskAnalysisForm)aForm;
		
		SaveReferralAssessmentEvent saveEvt = (SaveReferralAssessmentEvent)
		EventFactory.getInstance(JuvenileRiskAnalysisControllerServiceNames.SAVEREFERRALASSESSMENT);
		
		saveEvt.setAssessmentID(riskForm.getAssessmentId());
		saveEvt.setUpdateOverRiddenStatus(true);
		
		boolean recommendatationOverridden = riskForm.isRecommendationOverridden();
		saveEvt.setRecommendationOveridden(recommendatationOverridden);
		
		if (recommendatationOverridden) 
		{
			String overiddenReasonCd = riskForm.getOverRiddenReasonCd();
			String overiddenReasonFirstTwo = overiddenReasonCd.substring(0, 2);
			
			saveEvt.setOveriddenReasonCd(overiddenReasonCd);
			
			if( StringUtils.equals(overiddenReasonFirstTwo, RiskAnalysisConstants.OVERRIDE_TYPE_OTHER_FIRST_TWO_RO)) 
			{
				saveEvt.setOveriddenReasonOther(riskForm.getOverRiddenReasonOther());
			} 
			else if (StringUtils.equals(overiddenReasonFirstTwo, RiskAnalysisConstants.OVERRIDE_TYPE_OTHER_FIRST_TWO_DO))
			{
				saveEvt.setOveriddenReasonOther(riskForm.getOverRiddenReasonDetentionOther());
			}
			else 
			{
				saveEvt.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
			}
		} 
		else 
		{
			saveEvt.setOveriddenReasonCd( UIConstants.EMPTY_STRING );
			saveEvt.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
		}
		
		IDispatch dispatch = EventManager.getSharedInstance(EventManager.REQUEST);
		dispatch.postEvent(saveEvt);
				
		return aMapping.findForward( UIConstants.SUCCESS );
	}

	/*
	 * 
	 */
	public ActionForward cancel(ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse)
	{
		return( aMapping.findForward(UIConstants.CANCEL) );
	}

	/*
	 * 
	 */
	public ActionForward back(ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse)
	{		
		 RiskAssessmentReferralForm refForm = (RiskAssessmentReferralForm) aForm;
		 
		 if (!refForm.getMode().equalsIgnoreCase("update")) 
		 {
			 refForm.setMode("back");
		 }
	     
		return( aMapping.findForward(UIConstants.BACK) );
	}

	/*
	 * (non-Javadoc)
	 * @see org.apache.struts.actions.LookupDispatchAction#getKeyMethodMap()
	 */
	protected Map getKeyMethodMap()
	{
		Map keyMap = new HashMap();
		keyMap.put("button.update", "updateRiskAnalysis");
		keyMap.put("button.finish", "submit");
		keyMap.put("button.cancel", "cancel");
		keyMap.put("button.back", "back");
		
		return keyMap;
	}
}
