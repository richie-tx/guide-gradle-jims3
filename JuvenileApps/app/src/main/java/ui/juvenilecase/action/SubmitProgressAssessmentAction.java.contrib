//Source file: C:\\views\\CommonSupervision\\app\\src\\ui\\juvenilecase\\action\\SubmitResidentialAssessmentAction.java

package ui.juvenilecase.action;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import messaging.juvenilecase.reply.ProgressRiskRecommendationResponseEvent;
import messaging.juvenilecase.reply.RiskRecommendationResponseEvent;
import messaging.riskanalysis.SaveInterviewAssessmentEvent;
import messaging.riskanalysis.SaveProgressAssessmentEvent;
import mojo.km.dispatch.EventManager;
import mojo.km.dispatch.IDispatch;
import mojo.km.messaging.EventFactory;
import mojo.km.messaging.IEvent;
import mojo.km.messaging.Composite.CompositeResponse;
import mojo.km.utilities.MessageUtil;
import naming.JuvenileRiskAnalysisControllerServiceNames;
import naming.RiskAnalysisConstants;
import naming.UIConstants;
import mojo.km.messaging.exception.EventNotFoundException;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import ui.juvenilecase.form.riskanalysis.RiskAnalysisForm;
import ui.juvenilecase.form.riskanalysis.RiskAssessmentProgressForm;

public class SubmitProgressAssessmentAction extends LookupDispatchAction
{
	/**
	 * @roseuid 4357DD670231
	 */
	public SubmitProgressAssessmentAction()
	{
	}

	/**
	 * @param aMapping
	 * @param aForm
	 * @param aRequest
	 * @param aResponse
	 * @return ActionForward
	 * @roseuid 4357D9B000AD
	 */
	public ActionForward finish(ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse)
	{
		RiskAssessmentProgressForm refForm = (RiskAssessmentProgressForm) aForm;
		SaveProgressAssessmentEvent saveEvt = null ;
		ActionForward forward = aMapping.findForward( UIConstants.SUCCESS ) ;
		
		try
		{
			saveEvt = (SaveProgressAssessmentEvent) 
					EventFactory.getInstance(JuvenileRiskAnalysisControllerServiceNames.SAVEPROGRESSASSESSMENT);

			saveEvt.setAssessmentDate(refForm.getProgressAssessmentDate());
			saveEvt.setCasefileID(refForm.getCasefileID());
			saveEvt.setJuvenileNum(refForm.getJuvenileNum());
			saveEvt.setSupervisionLevelPoints(refForm.getSupervisionLevelPoints());

			Iterator ite = refForm.getProcessedQuestionAnswers().iterator();
			while (ite.hasNext())
			{
				saveEvt.addRequest((IEvent) ite.next());
			}
			
			IDispatch dispatch = EventManager.getSharedInstance(EventManager.REQUEST);			
			dispatch.postEvent(saveEvt);
			CompositeResponse composite = (CompositeResponse) dispatch.getReply();

			MessageUtil.processReturnException(composite);
			ProgressRiskRecommendationResponseEvent response = (ProgressRiskRecommendationResponseEvent) 
					MessageUtil.filterComposite(composite, RiskRecommendationResponseEvent.class);

			if( response != null )
			{
				refForm.setTotalSupervisionRules(Integer.toString(response.getTotalSupervisionRules()));
				refForm.setRecommendationScore(Integer.toString(response.getRiskAnalysisScore()));
				refForm.setRecommendation(response.getRiskAnalysisRecommendation());
				refForm.setRiskAnalysisId(response.getRiskAnalysisId());
			}
			else
			{
				refForm.setTotalSupervisionRules("Total SUPRules can not be set.");
				refForm.setRecommendationScore("Score can not be set.");
				refForm.setRecommendation("Recommendation can not be set.");
			}
		}
		catch( EventNotFoundException enfe )
		{
			forward = aMapping.findForward( UIConstants.CANCEL ) ;
		}

		return( forward );
	}
	
	/**
	 * @param aMapping
	 * @param aForm
	 * @param aRequest
	 * @param aResponse
	 * @return ActionForward
	 * @roseuid 433C3D3D02F9
	 */
	public ActionForward updateProgressRiskAnalysisOverrideStatus(ActionMapping aMapping, ActionForm aForm, 
			HttpServletRequest aRequest, HttpServletResponse aResponse)
	{
		RiskAnalysisForm riskForm = (RiskAnalysisForm)aForm;
		
		SaveProgressAssessmentEvent saveEvt = (SaveProgressAssessmentEvent)
		EventFactory.getInstance(JuvenileRiskAnalysisControllerServiceNames.SAVEPROGRESSASSESSMENT);
		
		saveEvt.setAssessmentID(riskForm.getAssessmentId());
		saveEvt.setUpdateOverRiddenStatus(true);
		
		boolean recommendatationOverridden = riskForm.isRecommendationOverridden();
		saveEvt.setRecommendationOveridden(recommendatationOverridden);
		
		if (recommendatationOverridden) 
		{
			String overiddenReasonCd = riskForm.getOverRiddenReasonCd();
			String overiddenReasonFirstTwo = overiddenReasonCd.substring(0, 2);
			
			saveEvt.setOveriddenReasonCd(overiddenReasonCd);
			
			if( StringUtils.equals(overiddenReasonFirstTwo, RiskAnalysisConstants.OVERRIDE_TYPE_OTHER_FIRST_TWO_RO)) 
			{
				saveEvt.setOveriddenReasonOther(riskForm.getOverRiddenReasonOther());
			} 
			else if (StringUtils.equals(overiddenReasonFirstTwo, RiskAnalysisConstants.OVERRIDE_TYPE_OTHER_FIRST_TWO_DO))
			{
				saveEvt.setOveriddenReasonOther(riskForm.getOverRiddenReasonDetentionOther());
			}
			else 
			{
				saveEvt.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
			}
		} 
		else 
		{
			saveEvt.setOveriddenReasonCd( UIConstants.EMPTY_STRING );
			saveEvt.setOveriddenReasonOther( UIConstants.EMPTY_STRING );
		}
		
		IDispatch dispatch = EventManager.getSharedInstance(EventManager.REQUEST);
		dispatch.postEvent(saveEvt);
				
		return aMapping.findForward( UIConstants.SUCCESS );
	}

	/*
    * 
    */
	public ActionForward cancel(ActionMapping aMapping, ActionForm aForm, HttpServletRequest aRequest, HttpServletResponse aResponse)
	{
		return( aMapping.findForward(UIConstants.CANCEL) );
	}

	/*
   	 * 
   	 */
	public ActionForward back(ActionMapping aMapping, ActionForm aForm, HttpServletRequest aRequest, HttpServletResponse aResponse)
	{
		return( aMapping.findForward(UIConstants.BACK) );
	}

	/*
	 * (non-Javadoc)
	 * @see org.apache.struts.actions.LookupDispatchAction#getKeyMethodMap()
	 */
	protected Map getKeyMethodMap()
	{
		Map keyMap = new HashMap();
		keyMap.put("button.finish", "finish");
		keyMap.put("button.cancel", "cancel");
		keyMap.put("button.back", "back");
		return keyMap;
	}
}
