/* Generated by Together */

package mojo.km.utilities;

import java.io.PrintStream;
import java.lang.reflect.*;

/**
 * Responsible for generating the Oracle object schema used by the oracle persistence
 * adapter.
 * @author Eric A Amundson
 * @verion 1.0 
 * @modelguid {E5D50765-E9E7-4D6C-B1DF-CA36864244B5}
 */
public class GenSchema {
	/** @modelguid {47A9595A-DF75-43F6-BB47-A8E8E0BBF586} */
    public GenSchema()
    {
    }

	/** @modelguid {EABB63A8-A840-48C8-8020-AF040CE312F2} */
    public static void main(String[] argv) {
        GenSchema gen = new GenSchema();
        gen.createSpecification( argv[0] );
    }

    /**
    * Generation the oracle object schema for
    * the defined class.
    * @param className - name of class to gen schema for
    * @modelguid {105BFB49-D038-443F-B4B1-2A92EDD2E016}
    */
    public void createSpecification(String className)
    {
        int aMod[] = null;
        Class theClass1;
        Method[] methods;
        int i;
        Method aMethod;
        int aMod1;
        Field[] fields;
        Field aField;
        Class aClass1;
        try
        {
            theClass1= Class.forName(((String)className)); 
            Object anInstance= theClass1.newInstance(); 
        }
        catch (InstantiationException InstantiationException0)
        {
            return; 
        }
        catch (ClassNotFoundException ClassNotFoundException0)
        {
            return; 
        }
        catch (IllegalAccessException IllegalAccessException0)
        {
            return; 
        }
        String name= className; 
        name= name.substring(name.lastIndexOf(((int)46))).toLowerCase(); 
        System.out.println("drop table " + ((String)name) + "_table;"); 
        System.out.println("drop type " + ((String)name) + " force;"); 
        System.out.println(""); 
        System.out.println("create or replace type " + ((String)name) + " as object ("); 
        int j;
        for (j= 0; (theClass1 != null) ; theClass1= theClass1.getSuperclass())
        {
            fields= theClass1.getDeclaredFields(); 
            for (i= 0; (i < fields.length); i++)
            {
                aField= fields[i]; 
                aField.setAccessible(true); 
                aClass1= aField.getType(); 
                aMod[i] = aField.getModifiers();
                try
                {
                    String aname;
                    if  ( (Modifier.isStatic(aMod[i]) == false) && (Modifier.isTransient(aMod[i])))
                    {
                        if (aClass1.isPrimitive() == false)
                        {
                            if (aField.getType().getName().equals("java.lang.String") == false)
                            {
                                aname= aField.getType().getName(); 
                                aname= aname.substring(aname.lastIndexOf(((int)46))).toLowerCase(); 
                                System.out.println("\t" + aField.getName().toLowerCase() + " " + ((String)aname) + ","); 
                            }
                            else
                            {
                                System.out.println("\t" + aField.getName().toLowerCase() + " varchar,"); 
                            }
                        }
                        else
                        {
                            System.out.println("\t" + aField.getName().toLowerCase() + " number,"); 
                        }
                    }
                }
                catch (IllegalArgumentException IllegalArgumentException0)
                {
                }
                j++; 
            }

        }

        for (theClass1= getClass(); (theClass1 != null) ; theClass1= theClass1.getSuperclass())
        {
            methods= theClass1.getDeclaredMethods(); 
            for (i= 0; (i < methods.length); i++)
            {
                aMethod= methods[i]; 
                aMethod.setAccessible(true); 
                aMod1= aMethod.getModifiers(); 
                try
                {
                    int k;
                    String aname1;
                    String aname2;
                    if (Modifier.isPublic(aMod1))
                    {
                        if (aMethod.getReturnType().getName().equals("void") == false)
                        {
                            if (aMethod.getReturnType().isPrimitive() == false)
                            {
                                if (aMethod.getReturnType().getName().equals("java.lang.String") == false)
                                {
                                    System.out.println("\tmember function" + aMethod.getName().toLowerCase() + " ( "); 
                                    Class[] someClasses= aMethod.getParameterTypes();
                                    for (k= 0; (k < someClasses.length); k++)
                                    {
                                        Class aClass= someClasses[k];
                                        aname2= ""; 
                                        if (aClass.isPrimitive())
                                        {
                                            aname2= "number"; 
                                        }
                                        else if (aClass.getName().equals("java.lang.String"))
                                        {
                                            aname2= "varchar"; 
                                        }
                                        else
                                        {
                                            aname2= aClass.getName(); 
                                            aname2= aname2.substring(aname2.lastIndexOf(((int)46))).toLowerCase(); 
                                        }
                                        System.out.print("a" + k + " " + ((String)aname2)); 
                                        if (k >= aMod.length)
                                        {
                                            continue;
                                        }
                                        System.out.print(","); 
                                    }

                                    aname1= aMethod.getReturnType().getName(); 
                                    aname1= aname1.substring(aname1.lastIndexOf(((int)46))).toLowerCase(); 
                                    System.out.println("\t" + aMethod.getName().toLowerCase() + " " + ((String)aname1) + ","); 
                                }
                                else
                                {
                                    System.out.println("\tmember function" + aMethod.getName().toLowerCase() + " ( "); 
                                    Class[] someClasses= aMethod.getParameterTypes();
                                    for (k= 0; (k < someClasses.length); k++)
                                    {
                                        Class aClass= someClasses[k];
                                        aname2= ""; 
                                        if (aClass.isPrimitive())
                                        {
                                            aname2= "number"; 
                                        }
                                        else if (aClass.getName().equals("java.lang.String"))
                                        {
                                            aname2= "varchar"; 
                                        }
                                        else
                                        {
                                            aname2= aClass.getName();
                                            aname2= aname2.substring(aname2.lastIndexOf(((int)46))).toLowerCase(); 
                                        }
                                        System.out.print("a" + k + " " + ((String)aname2)); 
                                        if (k >= someClasses.length)
                                        {
                                            continue;
                                        }
                                        System.out.print(","); 
                                    }

                                    System.out.print(") return varchar"); 
                                }
                            }
                            else
                            {
                                System.out.println("\tmember function" + aMethod.getName().toLowerCase() + " ( "); 
                                Class[] someClasses= aMethod.getParameterTypes();
                                for (k= 0; (k < someClasses.length); k++)
                                {
                                    Class aClass = someClasses[k];
                                    aname2= ""; 
                                    if (aClass.isPrimitive())
                                    {
                                        aname2= "number"; 
                                    }
                                    else if (aClass.getName().equals("java.lang.String"))
                                    {
                                        aname2= "varchar"; 
                                    }
                                    else
                                    {
                                        aname2= aClass.getName();
                                        aname2= aname2.substring(aname2.lastIndexOf(((int)46))).toLowerCase(); 
                                    }
                                    System.out.print("a" + k + " " + ((String)aname2)); 
                                    if (k >= aMod.length)
                                    {
                                        continue;
                                    }
                                    System.out.print(","); 
                                }

                                System.out.print(") return number"); 
                            }
                        }
                        else
                        {
                            System.out.println("\tmember procedure" + aMethod.getName().toLowerCase() + " ( "); 
                            Class[] someClasses= aMethod.getParameterTypes();
                            for (k= 0; (k < someClasses.length); k++)
                            {
                                Class aClass = someClasses[k];
                                aname2= ""; 
                                if (aClass.isPrimitive())
                                {
                                    aname2= "number"; 
                                }
                                else if (aClass.getName().equals("java.lang.String"))
                                {
                                    aname2= "varchar"; 
                                }
                                else
                                {
                                    aname2= aClass.getName();
                                    aname2= aname2.substring(aname2.lastIndexOf(((int)46))).toLowerCase(); 
                                }
                                System.out.print("a" + k + " " + ((String)aname2)); 
                                if (k >= someClasses.length)
                                {
                                    continue;
                                }
                                System.out.print(","); 
                            }

                            System.out.print(")"); 
                        }
                    }
                }
                catch (IllegalArgumentException IllegalArgumentException0)
                {
                }
                j++; 
            }

        }

    }
}
