/* Generated by Together */

package mojo.km.utilities;

import java.util.Vector;

/** @modelguid {852D54A0-273D-44A9-A1BE-7F8EA865DD7D} */
public class Queue implements IQueue {

	/** @modelguid {F84CFE0B-030F-420C-A598-C1DD2BB73DCD} */
    protected Vector store = new Vector();

	/** @modelguid {25D0E426-2C80-4BBE-BE85-5D8C5528B6CE} */
    public Queue() {}

    /*
     * Determines whether there are any items in the queue
     * @return boolean - true if there are item(s) in the queue; false otherwise
     * @modelguid {4944D629-9245-44AF-8037-4278AB748F9C}
     */
	public boolean isEmpty() {
        return store.isEmpty();
    }

    /*
     * Adds an item to the bottom of the queue
     * @param anObject - item to add to the queue
     * @modelguid {D4318658-88D2-4E50-9C2F-946B93A7F9BF}
     */
    public void enqueue(Object anObject) {
        store.add(anObject);
    }

    /*
     * Removes and returns the first item in the queue
     * @return Object - first item in the queue
     * @exception Exception - thrown if the priority queue is empty
     * @modelguid {4778560D-6298-4D39-A424-A5F65A3F6860}
     */
    public Object dequeue() throws Exception {
        if (store.isEmpty()) {
            throw new Exception("Queue is empty");
        }
        Object obj = store.elementAt(0);
        store.remove(obj);
        return obj;
    }

    /*
     * Returns the first item in the queue
     * @return Object - first item in the queue
     * @exception Exception - thrown if the priority queue is empty
     * @modelguid {42C3D300-E410-411C-B0BC-9CB371846A2D}
     */
	public Object peekFront() throws Exception {
        if (store.isEmpty()) {
            throw new Exception("Queue is empty");
        }
        return store.elementAt(0);
    }

    /*
     * Returns the last item in the queue
     * @return Object - last item in the queue
     * @exception Exception - thrown if the priority queue is empty
     * @modelguid {37556F42-6870-43A4-BB17-CE228A3B4769}
     */
	public Object peekBack() throws Exception {
        if (store.isEmpty()) {
            throw new Exception("Queue is empty");
        }
        return store.elementAt(store.size()-1);
    }
}
