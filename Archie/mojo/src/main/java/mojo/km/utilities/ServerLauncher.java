/* Generated by Together */

package mojo.km.utilities;

import java.util.*;
import java.io.*;
import mojo.km.messaging.IEvent;
import mojo.km.context.ContextManager;
import mojo.km.dispatch.EventManager;

import org.jdom.*;

/** @modelguid {9BBEF477-037C-44D0-8E96-5310A125093D} */
public class ServerLauncher extends Thread {
	/** @modelguid {0103DD49-92EF-4E0B-8B13-C495782DBAE5} */
	static final String CLASSPATH = "classpath";
	/** @modelguid {38DB9B28-E728-4138-9D5A-BFC1B5B9ACD4} */
	static final String JAVA_PROCESS = "javaprocess";
	/** @modelguid {38DB9B28-E728-4138-9D5A-BFC1B5B9ACD4} */
	static final String OS_PROCESS = "osprocess";
	/** @modelguid {38DB9B28-E728-4138-9D5A-BFC1B5B9ACD4} */
	static final String WORKING_DIRECTORY = "dir";
	/** @modelguid {BB14B3F2-1752-4446-86EE-912AD6131037} */
	static final String CMD = "cmd";
	/** @modelguid {BB14B3F2-1752-4446-86EE-912AD6131037} */
	static final String NAME = "name";
	/** @modelguid {627970F4-36CB-4580-BA00-9B69AE573806} */
	static final String CLASS_NAME = "className";
	/** @modelguid {CC09B575-5903-4D40-87A2-C49010347EBF} */
	static final String CONFIG_FILE = "configFile";
	/** @modelguid {7AC78328-E681-4509-88FD-819C73D21C32} */
	static final String DEBUG = "debug";
	/** @modelguid {72EDD4EC-6D1D-4663-8FE7-E0F3E433F5A3} */
	static final String SUSPEND = "suspend";
	/** @modelguid {EAEF9CE4-AC5D-4D0B-B643-6B1919555BC4} */
	static final String SERVER = "server";
	/** @modelguid {F7AC35D7-B12C-4E3E-BA1F-E092600F6671} */
	static final String PORT = "port";
	/** @modelguid {E1A41231-F762-41E6-9D4A-B832D86FB714} */
	static final String TRANSPORT = "transport";
	/** @modelguid {BEADA437-03E4-45EB-8551-C744318B3BAA} */
	static final String PARAMS = "params";
	/** @modelguid {A03C7F07-E6F6-4753-91E8-77476F7C17B1} */
	static final String PARAM = "param";
	
	static final String BOOTSTRAPEVENT = "bootstrapEvent";

	/** @modelguid {A03C7F07-E6F6-4753-91E8-77476F7C17B1} */
	static final String RESTART = "restart";
	
	/** @modelguid {E9418711-A9CE-4EBD-958C-A89EDACB87E9} */
	static List processes = new ArrayList();
	/** @modelguid {E78F95D3-DBC7-474E-8B3F-239EA89B1EB4} */
	static Object monitor = new Object();
	/** @modelguid {D6C5480C-CACF-499B-8FCA-CB80EB9CFEB6} */
	static String classPath = "";
	static interface MojoProcess {
		void start();
		void shutdown();
	}
	/** @modelguid {B6AF285C-2813-4E1B-BD8D-F95DF18E8429} */
	static class JavaProcess implements MojoProcess {
		/** @modelguid {9586435D-553D-4DBD-904A-63F0EA3831DE} */
		final String name;
		/** @modelguid {F91C9606-3C3A-4AED-A8C1-274A302C26A6} */
		final String className;
		/** @modelguid {2E2E3F62-3276-4B2D-BEA7-A5949C51693E} */
		final String debugString;
		/** @modelguid {5DACB641-4895-480D-B916-38036FA381EE} */
		final String classPath;
		/** @modelguid {EAFBBF5B-8920-442F-BF9E-2D9117D44231} */
		final String configFile;
		/** @modelguid {2C440FBF-0B11-4B9C-A193-34146C548D1A} */
		final String params;
		/** @modelguid {217A9E9C-13EF-495F-BD53-4769C4F1886C} */
		Process process;
		/** @modelguid {EFE2F66D-C121-46B7-8234-6D4661758B56} */
		ProcessInputHandler inputHandler;
		
		String sleepTime;
		
		String restart;
		
		String bootstrap;

		/** @modelguid {3851B766-2D20-491E-A264-D919E831EA75} */
		JavaProcess(String name, String className, String debugString, String classPath, String configFile, String params, String sleepTime, String restart, String bootstrap) {
			this.name = name;
			this.className = className;
			this.debugString = debugString;
			this.classPath = classPath;
			this.params = params;
			this.configFile = configFile;
			this.sleepTime = sleepTime;
			this.restart = restart;
			this.bootstrap = bootstrap;
		}

		/** @modelguid {3F61FC90-D417-41F6-9743-4DE848C31934} */
		public void start() {
			boolean flag = true;
			while (flag) {
				try {
					ContextManager.setContext(mojo.km.naming.ServerNames.GUI);
					StringBuffer processString = new StringBuffer();
					processString.append("java ");
					processString.append("-cp \"" + this.classPath + "\" ");
					if (this.configFile != null) {
						processString.append("-Dmojo.config=" + this.configFile + " ");
					}
					processString.append(this.debugString + " ");
					processString.append(this.className + " ");
					processString.append(this.params);
	
					this.process = Runtime.getRuntime().exec(processString.toString());
					if (!mojo.km.config.AppProperties.getInstance().useLogging()) {
						SequenceInputStream input = new SequenceInputStream(this.process.getInputStream(), this.process.getErrorStream());
						this.inputHandler = new ProcessInputHandler(input, this.name);
						this.inputHandler.start();
					}
					System.out.println("Process " + this.name + " has been started");
					if (sleepTime != null) {
						Thread.sleep(Long.parseLong(sleepTime));
					}
				} catch (Exception ex) {
					System.out.println("Failed to start " + this.name + " process");
					break;
				}
				if (bootstrap != null) {
					try {
						Class eventClass = Class.forName( bootstrap );
						IEvent anEvent = (IEvent) eventClass.newInstance();
						EventManager.getSharedInstance(EventManager.REQUEST).postEvent(anEvent);
					} catch (Exception e) {
						break;
					}
				}
				if (restart != null && restart.equals("true")) {
					while (true) {
						try {
							Thread.sleep(30000);
						} catch (InterruptedException eI) {
						}
						try {
							process.exitValue();
							break;
						} catch (IllegalThreadStateException iTSE) {
							
						}
					}
				} else {
					flag = false;
				}
			}
		}

		/** @modelguid {6176307D-492F-4769-BA79-FB20F6F9309B} */
		public void shutdown() {
			restart = null;
			this.process.destroy();
			System.out.println("Shutdown " + this.name + " process");
		}
	}

	/** @modelguid {5C8FBC33-1C04-44E0-80A9-29094A3C7860} */
	static class ShutdownHook extends Thread {
		/** @modelguid {356F3FC8-86EF-4BB4-9C4C-84307A8E2591} */
		public void run() {
			System.out.println("Shutting down");

			for (Iterator it = ServerLauncher.processes.iterator(); it.hasNext();) {
				((MojoProcess)it.next()).shutdown();
			}

			synchronized (ServerLauncher.monitor) {
				ServerLauncher.monitor.notifyAll();
			}

			System.out.println("Shutdown complete");

		}
	}

	/** @modelguid {F283C4B5-33A5-4A4D-9456-AB79BC6AAD62} */
	static class ProcessInputHandler extends Thread {
		/** @modelguid {90A843D9-9C10-4D76-9F51-80C4A9890C37} */
		LineNumberReader input;
		/** @modelguid {62D1753A-962F-4B76-9649-6DC5481E67FF} */
		String processName;

		/** @modelguid {3475F266-04C1-44E6-A84C-CD3C99B2816E} */
		ProcessInputHandler(InputStream input, String processName) {
			this.input = new LineNumberReader(new InputStreamReader(new BufferedInputStream(input)));
			this.processName = processName;
		}

		/** @modelguid {14B1471D-C624-4319-B627-33F1582B2AE6} */
		public void run() {
			while (true) {
				try {
					String message = input.readLine();
					if (message != null) {
						System.out.println(this.processName + ": " + message);
					}
				} catch (IOException ex) {
					ex.printStackTrace();
					break;
				}
			}
		}
	}

	/** @modelguid {08B6804B-024D-4E78-9D0E-DA6FEDC134C3} */
	static Document getServerSpec(String fileName) throws Exception {
		return XMLManager.readXMLFile(fileName);
	}

	/** @modelguid {A4F1F1A8-9724-4C41-A647-70CF3F1257CF} */
	static List getProcesses(Document spec) {
		try {
			ArrayList allProcesses = new ArrayList();
			Element root = spec.getRootElement();
			classPath = System.getProperty("java.class.path");
			List processes = root.getChildren(JAVA_PROCESS);
			for (int i = 0; i < processes.size(); ++i) {
				Element process_element = (Element)processes.get(i);
				String name = process_element.getAttributeValue(NAME);
				String className = process_element.getAttributeValue(CLASS_NAME);
				String configFile = process_element.getAttributeValue(CONFIG_FILE);
				String restart = process_element.getAttributeValue(RESTART);
				String bootstrap = process_element.getAttributeValue(BOOTSTRAPEVENT);
				String sleepTime = process_element.getAttributeValue("sleepTime");
				Element debug = process_element.getChild(DEBUG);
				StringBuffer debugString = new StringBuffer();
				if (debug != null) {
					debugString.append("-Xdebug -Xrunjdwp:transport=");
					debugString.append(debug.getAttributeValue(TRANSPORT));
					debugString.append(",suspend=");
					debugString.append(debug.getAttributeValue(SUSPEND));
					debugString.append(",server=");
					debugString.append(debug.getAttributeValue(SERVER));
					debugString.append(",address=");
					debugString.append(debug.getAttributeValue(PORT));
				}

				List params = process_element.getChildren(PARAM);
				StringBuffer paramString = new StringBuffer();
				for (Iterator it = params.iterator(); it.hasNext();) {
					String text = ((Element)it.next()).getAttributeValue("value");
					paramString.append(text + " ");
				}

				allProcesses.add(new JavaProcess(name, className, debugString.toString(), classPath, configFile, paramString.toString(), sleepTime, restart, bootstrap));
			}
			processes = root.getChildren(OS_PROCESS);
			for (int i = 0; i < processes.size(); ++i) {
			}
			return allProcesses;
		} catch (Exception ex) {
			ex.printStackTrace();
			return null;
		}
	}

	/** @modelguid {4F8BF50E-DF7A-4A94-8521-09A38C923D8F} */
	public final static void main(String[] args) {
		if (args.length != 1) {
			System.out.println("usage: ");
			System.exit(-1);
		}

		try {
			processes = getProcesses(getServerSpec(args[0]));
		} catch (Exception ex) {
			System.out.println("Failed to parse server spec");
			ex.printStackTrace();
			System.exit(-1);
		}

		for (Iterator it = processes.iterator(); it.hasNext();) {
			((MojoProcess)it.next()).start();
		}

		Runtime.getRuntime().addShutdownHook(new ShutdownHook());

		System.out.println("ServerLauncher complete");

		try {
			synchronized (monitor) {
				monitor.wait();
			}
		} catch (InterruptedException ex) {
		}
	}
}
