/* Generated by Together */

package mojo.km.utilities;

import java.lang.reflect.*;
import java.util.Map;
import java.util.Hashtable;

/**
 * Collects all the private and protected member variables of a class and all its super classes in
 * its hierarchy
 *@author Anurag Srivastava
 *@version 1.0
 * @modelguid {BA95D246-249E-43E1-A80E-C37F70FC3873}
 */
public class GetClassFieldProperties {

	/** @modelguid {450CF301-17F1-492A-8CAC-7679A73657FB} */
	public static void getPrivateAndProtectedFields(Class c, Object o, Map fieldMap) throws Exception{

	      Field[] allFields = c.getDeclaredFields();
	      for (int i = 0; i < allFields.length; i++) {
	         String fieldName = allFields[i].getName();
	         Class typeClass = allFields[i].getType();
	         String fieldType = typeClass.getName();
			 int mod = allFields[i].getModifiers();

             if(Modifier.isPrivate(mod) || Modifier.isProtected(mod)){
	             allFields[i].setAccessible(true);
                 Object object = allFields[i].get(o);
				 if(object != null){
                     fieldMap.put(fieldName, object);
                 }
             }
          }
          Class superClass = c.getSuperclass();
          if(superClass != null){
			getPrivateAndProtectedFields(superClass, o, fieldMap);
          }
    }

}
