/* Generated by Together */

package mojo.km.logging.log4j;

import org.apache.log4j.*;
import org.apache.log4j.Logger;
import mojo.km.logging.ILogStream;
import org.apache.log4j.PropertyConfigurator;
import org.apache.log4j.helpers.Loader;
import org.apache.log4j.helpers.LogLog;
import org.apache.log4j.helpers.IntializationUtil;
import org.apache.log4j.LogManager;

import mojo.km.config.AppProperties;
import mojo.km.config.LogProperties;
import mojo.km.context.ContextManager;
import java.io.StringWriter;
import java.io.PrintWriter;
import org.apache.log4j.spi.location.LocationInfo;
import java.util.Iterator;
import java.util.Vector;
import org.apache.log4j.xml.DOMConfigurator;

/**
* Adapter class responsible for implementing logging with jakarta's log4j toolkit
*
* @author Eric A Amundson
* @modelguid {1157B39A-2F8F-4E40-90A7-09A46F0C5CB5}
*/
public class MojoLogStream implements ILogStream {
	/** @modelguid {EE28693A-5B82-4CDD-8D86-99171484AC30} */
    public void flush() {
    }    
    
    /**
     * @param b - byte buffer
     * @param off - offset of bytes buffer to start writing
     * @param len - length to write 
     * @modelguid {EA75A11B-24DC-447B-8B0E-FF29474C979D}
     */
    public void write(byte[] b, int off, int len) {
        if (b == null) {
            throw new NullPointerException();
        } else if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0)) {
            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return;
        }
        byte[] out = new byte[len];
        System.arraycopy(b, off, out, 0, len);
        for (Iterator i = getLoggers(); i.hasNext();) {
            Logger aLogger = (Logger) i.next();
        	aLogger.log(location, getLevel(), getMsg(new String(out), aLogger), null);
        }
    }
    
    /**
     * @param buffer - output buffer 
     * @modelguid {47BEAA37-F741-4A7B-9C3D-2663E73DD38E}
     */
    public void println(char[] buffer) {
        for (Iterator i = getLoggers(); i.hasNext();) {
            Logger aLogger = (Logger) i.next();
        	aLogger.log(location, getLevel(), getMsg(new String(buffer), aLogger), null);
        }
    }
    
    /**
     * @param b - byte buffer to be written 
     * @modelguid {256D1D43-E5A3-4606-93ED-F1959D134CCE}
     */
    public void write(byte[] b) {
        for (Iterator i = getLoggers(); i.hasNext();) {
            Logger aLogger = (Logger) i.next();
        	aLogger.log(location, getLevel(), getMsg(new String(b), aLogger), null);
        }
    }

	/** @modelguid {5ECB426A-5281-4EC8-BD11-C80618A27B59} */
    private String getMsg(String inMsg, Logger aLogger) {
        StringBuffer outMsg = new StringBuffer();
        outMsg.append(inMsg);
        return outMsg.toString();
    }

	/** @modelguid {034CDB9D-E596-443E-8799-DF212C5F6763} */
    public void close() {
    }
    
    /**
     * @param b - an integer to be written to output stream 
     * @modelguid {F4BF6B85-EB74-417E-82BD-652F0125BAC9}
     */
    public void write(int b) {
        byte[] bytes = new byte[1];
        bytes[0] = (byte)b;
        for (Iterator i = getLoggers(); i.hasNext();) {
            Logger aLogger = (Logger) i.next();
        	aLogger.log(location, getLevel(), getMsg(new String(bytes), aLogger), null);
        }
    }

	/** @modelguid {94845F23-B76E-4704-BBBB-F77FB4C22E5A} */
    String location = null;



	/** @modelguid {D0F80D33-34DB-4B34-9DBC-F0542553F79D} */
    private Iterator getLoggers() {
        Vector retBuff = new Vector();
        String callStack = null;
        location = "java.io.PrintStream";
        LocationInfo lInfo = null;
        Throwable aThrowable = null;
			try {
				aThrowable = new Throwable();
				throw aThrowable;
			} catch (Throwable t) {
				StringWriter sw = new StringWriter();
				PrintWriter pw = new PrintWriter(sw);
				t.printStackTrace(pw);
				callStack = sw.toString();
			}
			if (callStack != null && callStack.indexOf("java.lang.Throwable.printStackTrace") > 0) {
				location = "java.lang.Throwable";
			} else if (callStack != null && callStack.indexOf("mojo.km.logging.ExecutionTracking") > 0) {
                location = "mojo.km.logging.ExecutionTracking";
            }
        lInfo = new LocationInfo(aThrowable, location);
        if (ContextManager.getCurrentUser() != null && !ContextManager.getCurrentUser().equals("")) {
        	//Category addCat = Logger.getLogger(ContextManager.getCurrentUser());
            //addCat.setAdditivity( false );
            //retBuff.add( addCat );
        }
        if (ContextManager.getServerName() != null && !ContextManager.getServerName().equals("")) {
            Category addCat = Logger.getLogger(ContextManager.getServerName());
            addCat.setAdditivity( false );
            retBuff.add( addCat );
        }
        Category mainCat = Logger.getLogger(lInfo.getClassName());
        retBuff.add( mainCat );
        return retBuff.iterator();
    }

	/** @modelguid {698A7CF6-8041-47A1-92B8-4502F50242E0} */
    private Level getLevel() {

        return mLevel;
    }

	/** @modelguid {589AAC34-B829-4E8C-AF89-3280654940A5} */
    private Level getLevelValue(String levelName) {
    	if (levelName != null) {
			if (levelName.equals("ERROR")) {
				return Level.ERROR;
			} else if (levelName.equals("WARN")) {
				return Level.WARN;
			} else if (levelName.equals("INFO")) {
				return Level.INFO;
			} else if (levelName.equals("FATAL")) {
				return Level.FATAL;
			} else if (levelName.equals("DEBUG")) {
				return Level.DEBUG;
			}
    	}
        return Level.INFO;
    }

	/** @modelguid {A84D58FF-55C5-4CA8-BE67-FDF0BE4DA2C9} */
    static private void initClass()
    {
        try {
            String configName = AppProperties.getInstance().getProperty("LogConfigurationFile");
            if (configName == null) {
                configName = "log4j.xml";
            } 
            if (configName.endsWith(".xml")) {
				IntializationUtil.initialConfiguration(org.apache.log4j.LogManager.getLoggerRepository(), configName, (String) null);
            } else {
            	PropertyConfigurator.configure(Loader.getResource(configName));
            }
            LogLog.setQuietMode(true);
        } catch (Throwable t)
        {
            System.err.println( t.getMessage() );
        }
    }

    static {
        initClass();
    }
    
    /**
     * @param logType - the type of the log 
     * @modelguid {1D02F506-BEC0-4B68-B2CC-A12FA7115E63}
     */
    public void setLogType(short logType) {
        mLogType = logType;
        if (mLogType == ILogStream.APPEXCEPTION) {
            mLevel =  getLevelValue(LogProperties.getInstance().getProperty(ILogStream.APPEXCEPTION_STR));
        } else if (mLogType == ILogStream.ERROR) {
            mLevel =  getLevelValue(LogProperties.getInstance().getProperty(ILogStream.ERROR_STR));
        } else if (mLogType == ILogStream.ERRSTREAM) {
            mLevel =  getLevelValue(LogProperties.getInstance().getProperty(ILogStream.ERRSTREAM_STR));
        } else if (mLogType == ILogStream.EXCEPTION) {
            mLevel =  getLevelValue(LogProperties.getInstance().getProperty(ILogStream.EXCEPTION_STR));
        } else if (mLogType == ILogStream.OUTSTREAM) {
            mLevel =  getLevelValue(LogProperties.getInstance().getProperty(ILogStream.OUTSTREAM_STR));
        } else if (mLogType == ILogStream.RUNTIMEEXCEPTION) {
            mLevel =  getLevelValue(LogProperties.getInstance().getProperty(ILogStream.RUNTIMEEXCEPTION_STR));
        } else if (mLogType == ILogStream.STACKTRACE) {
            mLevel =  getLevelValue(LogProperties.getInstance().getProperty(ILogStream.STACKTRACE_STR));
        } else {
        	mLevel = getLevelValue(LogProperties.getInstance().getProperty(ILogStream.OUTSTREAM_STR));
		}
    }

	/** @modelguid {8746E07C-734B-429F-8055-8620E443BD55} */
    public short mLogType = 1;

	/** @modelguid {DB5FF963-8B4B-4D2A-AE8B-01BF0A00CB52} */
    private Level mLevel = null;


    //static Hashtable loggers = new Hashtable();
}
