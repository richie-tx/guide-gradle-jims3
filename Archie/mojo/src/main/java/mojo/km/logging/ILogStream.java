/* Generated by Together */

package mojo.km.logging;

import java.lang.System;
import java.io.OutputStream;
/** @modelguid {E76B0A6D-FFB0-4826-9121-7380FEFAFFC2} */
public interface ILogStream {
    /**
     * Flushes this output stream and forces any buffered output bytes
     * to be written out. The general contract of <code>flush</code> is
     * that calling it is an indication that, if any bytes previously
     * written have been buffered by the implementation of the output
     * stream, such bytes should immediately be written to their intended destination. <p>
     * The <code>flush</code> method of <code>OutputStream</code> does nothing.
     * @exception  IOException  if an I/O error occurs.
     * @modelguid {5C39B833-F8F4-4FD0-B256-83F316007481}
     */
    public void flush();

    /**
     * Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this output stream.
     * The general contract for <code>write(b, off, len)</code> is that
     * some of the bytes in the array <code>b</code> are written to the
     * output stream in order; element <code>b[off]</code> is the first
     * byte written and <code>b[off+len-1]</code> is the last byte written by this operation. <p>
     * The <code>write</code> method of <code>OutputStream</code> calls
     * the write method of one argument on each of the bytes to be
     * written out. Subclasses are encouraged to override this method and provide a more efficient implementation. <p>
     * If <code>b</code> is <code>null</code>, a <code>NullPointerException</code> is thrown. <p>
     * If <code>off</code> is negative, or <code>len</code> is negative, or
     * <code>off+len</code> is greater than the length of the array
     * <code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.
     * @param      b     the data.
     * @param      off   the start offset in the data.
     * @param      len   the number of bytes to write.
     * @exception  IOException  if an I/O error occurs. In particular,
     * an <code>IOException</code> is thrown if the output stream is closed.
     * @modelguid {C55AB4A7-A8D6-439C-9A49-C03197F5F74B}
     */
    public void write(byte[] b, int off, int len);

    /**
     *    Prints the character buffer to log file.
     *    @param buffer - log events msg.
     *    @modelguid {C1948175-DED0-4185-B821-2BFEE4FF2674}
     */
    public void println(char[] buffer);

    /**
     * Writes <code>b.length</code> bytes from the specified byte array
     * to this output stream. The general contract for <code>write(b)</code>
     * is that it should have exactly the same effect as the call <code>write(b, 0, b.length)</code>.
     * @param      b   the data.
     * @see OutputStream#write(byte[], int, int)
     * @exception  IOException  if an I/O error occurs.
     * @modelguid {A089C469-0156-4D95-A4E7-746EE5E8B377}
     */
    public void write(byte[] b);

    /**
     * Closes this output stream and releases any system resources
     * associated with this stream. The general contract of <code>close</code>
     * is that it closes the output stream. A closed stream cannot perform output operations and cannot be reopened. <p>
     * The <code>close</code> method of <code>OutputStream</code> does nothing.
     * @exception  IOException  if an I/O error occurs.
     * @modelguid {6DC8C250-3D94-4B42-BEF7-462CD59EA0AC}
     */
    public void close();

    /**
     * Writes the specified byte to this output stream. The general
     * contract for <code>write</code> is that one byte is written to the output stream. The byte to be written is the eight
     * low-order bits of the argument <code>b</code>. The 24 high-order bits of <code>b</code> are ignored. <p>
     * Subclasses of <code>OutputStream</code> must provide an implementation for this method.
     * @param      b   the <code>byte</code>.
     * @exception  IOException  if an I/O error occurs. In particular, an <code>IOException</code> may be thrown if the
     * output stream has been closed.
     * @modelguid {C5921F83-4951-4CF5-8412-95E17E99B8C9}
     */
    public void write(int b);

	/** @modelguid {034951A6-1955-4BFB-A962-29B400E8B56E} */
    public void setLogType(short logType);


    /** Error stream filter value. 
     * @modelguid {561FE09E-A87B-4FD2-8F0D-BC6DA99CE191}
     */
    public static final short ERRSTREAM = 0x01;

    /** String name for ERRSTREAM 
     * @modelguid {9A072D0E-2962-4919-A4FC-D44FB62D6E8C}
     */
    public static final String ERRSTREAM_STR = "ERRSTREAM";

    /** Runtime exception filter value. 
     * @modelguid {1A07F389-D17A-4D5F-82A4-21E978A8510E}
     */
    public static final short RUNTIMEEXCEPTION = 0x08;
    /** String name for RUNTIMEEXCEPTION 
     * @modelguid {A465685E-B952-4D93-9104-E5FAA65C6EB3}
     */
    public static final String RUNTIMEEXCEPTION_STR = "RUNTIMEEXCEPTION";

    /** Application exception filter value. 
     * @modelguid {2A061510-E41D-49CA-A5B2-1A1A7B5342F5}
     */
    public static final short APPEXCEPTION = 0x04;
    /** String name for APPEXCEPTION 
     * @modelguid {CEFB3EA6-24E1-4683-97DD-F8A7815F7F1F}
     */
    public static final String APPEXCEPTION_STR = "APPEXCEPTION";

    /** Standard stream filter value. 
     * @modelguid {2A78F9AD-F6A6-4C0A-BD00-5F9463E2A0B1}
     */
    public static final short OUTSTREAM = 0x02;
    /** String name for OUTSTREAM 
     * @modelguid {568AB61D-4183-4162-9FF6-24FD3C8C8D0F}
     */
    public static final String OUTSTREAM_STR = "OUTSTREAM";

    /** if this filter value is set and exception who's filter value is set will print stack trace. 
     * @modelguid {86C3CBE4-AEC5-4BF1-AE91-E42D0EA3CA24}
     */
    public static final short STACKTRACE = 0x20;
    /** String name for RUNTIMEEXCEPTION 
     * @modelguid {EDB85A85-E132-4921-8758-C076DB45C38E}
     */
    public static final String STACKTRACE_STR = "STACKTRACE";

    /** Standard exception filter value. 
     * @modelguid {EA1BDBAD-6CED-450D-93D6-5D2324DA11D0}
     */
    public static final short EXCEPTION = 0x10;
    /** String name for EXCEPTION 
     * @modelguid {C6E8350A-545F-438B-8FC1-91062D998595}
     */
    public static final String EXCEPTION_STR = "EXCEPTION";

    /** Error throwable filter value. 
     * @modelguid {55807E10-FA80-4D81-97CA-8BD0CE7A5597}
     */
    public static final short ERROR = 0x40;
    /** String name for ERROR 
     * @modelguid {9DCAA4D7-FD77-4DCE-8E34-E22486E98567}
     */
    public static final String ERROR_STR = "ERROR";

}
