/* Generated by Together */

package mojo.km.logging.log4j;

import mojo.km.config.AppProperties;

import org.apache.log4j.AppenderSkeleton;
import org.apache.log4j.spi.LoggingEvent;
import java.net.InetAddress;
import java.net.URL;
import java.net.DatagramSocket;
import java.io.IOException;
import java.net.DatagramPacket;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
/**
 * Responsible for sending LF5 events to the datagram server.
 * This writes on the same port as specified with the
 * loggingHost property by default.  It can be overriden via the URL property
 * for the appender specifications.  It will write to a logging service that
 * displays the log4j LF5 user interface.
 *
 * @see log4j.xml
 * @see mojo.km.service.Logging.log4j.LoggingService
 *
 * @author Eric A Amundson
 * @version 1.0
 * @modelguid {D261E256-8203-4CAF-BFE3-C1346FDD8D7A}
 */
public class LF5DatagramAppender extends AppenderSkeleton {
	/** @modelguid {1069EC32-522B-4743-8BD7-8FF61060C742} */
    public LF5DatagramAppender() {
        URL = AppProperties.getInstance().getProperty("loggingHost");
    }

    /**
     * Writes out the logging event to a datagram output stream.
     * @param event - the log event
     * @modelguid {BA801FA0-7F5E-4528-8F24-450E7D6A88F8}
     */
    protected void append(LoggingEvent event) {
        checkSocket();
		if(locationInfo) {
		   event.getLocationInformation();
		}
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        try {
            ObjectOutputStream oStream = new ObjectOutputStream(outStream);
            oStream.writeObject(event);
            byte[] buf = outStream.toByteArray();
            DatagramPacket thePacket = new DatagramPacket(buf, buf.length, group, port);
            theSocket.send(thePacket);
        } catch (Exception e) {
        }
    }

	/** @modelguid {919CF9F0-B713-42B1-A4E5-C20FDB810094} */
    public void close() {
    }

    /**
     * This appender does not require layout.
     * @modelguid {D720AA0D-C469-4438-8469-EC6D366FD889}
     */
    public boolean requiresLayout() {
        return false;
    }

	/** @modelguid {118AF072-04A4-47B1-99E4-316B233F5CF5} */
    private void checkSocket() {
        if (group == null) {
            try {
                URL aURL = new URL(URL);
                group = InetAddress.getByName(aURL.getHost());
                port = aURL.getPort();
                theSocket = new DatagramSocket();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Get the URL for the host process that will be receiving the log events.
     * @modelguid {0499B0D4-1357-4632-9B38-D497752D44C1}
     */
    public String getURL() {
        return URL;
    }

    /**
     * Set the host URL value for the log event.
     * @modelguid {6C8A58CE-DD79-41A6-8CF5-3AE8A624F5EF}
     */
    public void setURL(String URL) {
        this.URL = URL;
    }
  /**
     The <b>LocationInfo</b> option takes a boolean value. If true,
     the information sent to the remote host will include location
     information. By default no location information is sent to the server.
	 * @modelguid {D16FF6AE-E2BD-4223-8F72-AC2BD0EA85E2}
   */

  public void setLocationInfo(boolean locationInfo) {
    this.locationInfo = locationInfo;
  }

  /**
     Returns value of the <b>LocationInfo</b> option.
	 * @modelguid {D9F1A524-2B13-418D-85EE-944A83053CAE}
   */
  public boolean getLocationInfo() {
    return locationInfo;
  }

	/** @modelguid {3B13C6A8-5652-4A19-B347-1F63F7C8CA2C} */
  boolean locationInfo = true;

    /**
     * Use to set the output location of host.
     * @modelguid {411AD046-24D3-49B7-B56A-736FFB111785}
     */
    private String URL = null;

	/** @modelguid {10528CEC-046A-4A28-8281-DB3871921020} */
    DatagramSocket theSocket = null;

	/** @modelguid {60922876-FF07-4A5D-A7DA-C09015731834} */
    private int port = 8090;
	/** @modelguid {B44A853A-5592-4C7C-9582-D92DFA8D344F} */
    private InetAddress group = null;

}
