/* Generated by Together */

package mojo.km.scheduling;
import java.util.*;
/**
*  HalfHourlySchedule calculates the next run date based on the FIRST run date.
*  The way it works: creates a Calendar based on today's date, and then resets the
*  hours, minutes, seconds and milliseconds of the calendar
*  to the first run timed date hours, minutes, seconds and milliseconds.
*  THEN 30 minutes are added to the date.
*
* 	This insures that the next run time date will have the same hours, min, sec, mill sec. as the
*   first run time date.
*
*   THIS CODE ASSUME SAME TIMEZONE FOR ITS CALCULATIONS.
* */


public class HalfHourlySchedule implements ISchedule{
    public Date getNextRunDate(Date firstNotificationDate) {
		System.out.println("Original Run: "+ firstNotificationDate);
		Calendar firstNotificationCalendar = Calendar.getInstance();
		firstNotificationCalendar.setTime(firstNotificationDate);
		firstNotificationCalendar.add(Calendar.MINUTE, 30);
		
		System.out.println("Next Run: "+ firstNotificationCalendar.getTime());
		return firstNotificationCalendar.getTime();

//		Calendar currentDateCalendar = Calendar.getInstance();
//
//		currentDateCalendar.set(Calendar.HOUR,firstNotificationCalendar.get(Calendar.HOUR));
//		currentDateCalendar.set(Calendar.MINUTE,firstNotificationCalendar.get(Calendar.MINUTE));
//		currentDateCalendar.set(Calendar.SECOND,firstNotificationCalendar.get(Calendar.SECOND));
//		currentDateCalendar.set(Calendar.MILLISECOND,firstNotificationCalendar.get(Calendar.MILLISECOND));
//
//		currentDateCalendar.add(Calendar.MINUTE, 30);
//
//		return currentDateCalendar.getTime();

    }
    public boolean isRunDateStillValid( Date runDate ) {
        return true;
    }

}
