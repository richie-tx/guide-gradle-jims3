/* Generated by Together */

package mojo.km.context;

import mojo.km.messaging.IEvent;

/**
* Thrown when the TopLinkTransactionalContext is unavailable.
* @author Matt Pomroy
* @modelguid {B1F4D13E-C6CB-47FA-BBD8-9D7DC8AEBB85}
*/
public class ContextUnavailableException extends RuntimeException implements IEvent {
   /*
   Interface required by receiving container.
   */

    /**
     * Listener topic.
     *     @return hash code.
     * @modelguid {B509C842-1C10-463A-98C4-62D460C1A4DB}
     */
    public String hashKey() {
        StringBuffer aStr = new StringBuffer(50);
        aStr.append(service).append("::").append(this.getClass().getName()).toString();
        return aStr.toString();
    }

   /*
   Interface required by receiving container.
   */

    /**
     * Access the service name.
     *     @return event publishing topic
     * @modelguid {017D55A7-7E3D-4092-BB58-0988E9934D66}
     */
    public String getTopic() {
        return service;
    }

    /**
     *     Set the service the event is to be associated with.
     *     @param aService - event topic.
     * @modelguid {030F0088-BA61-4DEE-8E0A-C54230519C48}
     */
    public void setTopic(String aService) {
        service = aService;
    }

    /**
     * Properties that houses the String to indicate what context is originating the event. (Accessor)
     *     @return host URL.
     * @modelguid {BDE1B374-9581-4C7D-AB3F-DDF4B7DEF59F}
     */
    public String getOriginator() {
        return hostID;
    }

    /**
     * Set the value of the server context name.
     *    @param name - server logical name, from Naming.ServerNames.
     * @modelguid {20DA6460-A8D3-479A-A102-6F23A599F080}
     */
    public void setServer(String name) {
        mServer = name;
    }

    /**
     * Return the server context name.
     *    @return server logical name
     *    @reference Naming.ServerNames
     * @modelguid {7F93DD22-D5C1-4F04-8689-05CD3F519B8E}
     */
    public String getServer() {
        return mServer;
    }

    /**
     * Compares this principal to the specified object.
     *    @param another - object to compare to
     *    @return true if objects are the same.
     * @modelguid {BF568FCD-5BBC-4B50-9109-3136512EF7B0}
     */
    public boolean equals(Object another) {
        return false;
    }

    /**
     * Returns the name of this principal.
     *    @return name of requesting user.
     * @modelguid {33F7E7BB-E502-4751-ADBB-D63D2464180D}
     */
    public String getName() {
        return service;
    }

    /**
     * return hashcode.
     *    @return hash code.
     * @modelguid {60171063-805A-4727-8972-0A03224839A7}
     */
    public int hashcode() {
        return hashKey().hashCode();
    }


    /** Property that has the value of the service the event is being sent to.  (Topic) 
     * @modelguid {B3D678B9-2DC8-4F93-897C-0EA65FFBE52B}
     */
    private String service = mojo.km.naming.ServiceNames.CONTEXT_UNAVAILABLE;
	/** @modelguid {B1A0BC33-5A0E-4A16-8D4A-5758B45E68B0} */
    private String hostID = null;

	/** @modelguid {0DE19C1C-A0A2-4836-9735-F5D440B3035D} */
    private String mServer = mojo.km.naming.ServerNames.DEFAULT;
}
