/* Generated by Together */

package mojo.pd.command;
import mojo.km.transaction.Transactional;
import mojo.km.messaging.IEvent;
import mojo.km.persistence.IPersistentObject;
import mojo.km.dispatch.EventManager;
import mojo.km.persistence.Home;
import mojo.km.persistence.IHome;
import mojo.km.utilities.IOIDEvent;

/** @modelguid {98B1B625-AD46-4DE0-918E-40D5E0B19B9C} */
abstract public class AbstractDeleteCommand extends AbstractCRUDCommand implements Transactional {
    /**
     * delete is to be implemented by the subclass.  Its main responsibilities include
     * removing any associations that might be affected by the removal of the object and actually
     * removing the object itself.
     * @param anEvent The incoming event.
     * @param aPersistentObject The PersistentObject to be read.
     * @param anEntityHome
     * @exception <{Exception}>
     * @return IEvent The resulting event.
     * @modelguid {58DDEBFA-D4B5-4969-A5D3-5CB318453EE0}
     */
    abstract protected IEvent delete(IEvent anEvent, IPersistentObject aPeristentObject) throws Exception;

    /**
     * execute takes an event, gets a Home, calls delete, and posts the resulting event.
     * @param anEvent The incoming event. (must implement mojo.kim.utilities.IOIDEvent)
     * @exception <{Exception}>
     * @modelguid {A808C25A-19C2-416C-A433-C078CB99C86A}
     */
    public void execute(IEvent anEvent) throws Exception {
        IHome lHome = new Home();
        IOIDEvent lOIDEvent = null;
        try {
            lOIDEvent = (IOIDEvent)anEvent;
        } catch (ClassCastException e) {
            throw new Exception("AbstractDeleteCommands must use an implementation of IOIDEvent.\n" + e);
        }
        IPersistentObject lObject = null;
        IEvent lResultEvent = null;
		lObject = (IPersistentObject)lHome.find(lOIDEvent.getOID(), getPersistentObjectClass());
		lResultEvent = delete(anEvent, lObject);
       	EventManager.getSharedInstance(getStrategy()).postEvent(lResultEvent);
    }

}
