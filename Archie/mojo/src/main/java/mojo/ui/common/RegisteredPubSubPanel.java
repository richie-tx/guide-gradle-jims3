/* Generated by Together */

package mojo.ui.common;

import mojo.km.messaging.ITopic;
import mojo.km.messaging.IEvent;
import mojo.km.context.ICommand;
import mojo.km.utilities.PropertyCopier;
import mojo.km.messaging.EventFactory;
import mojo.km.context.ContextManager;

/**
 * Class that defines a JPanel that registers itself and handles the events for which
 * it has registered itself.
 * 
 * Any panel class that derives from this class needs to
 * 1. provide a topic for which to register.
 * 2. provide servicename(s) which will be used to factory the response events to be registered.
 * 3. Follow the beanspec for the response events.
 * 4. If required, provide implementation for doPreDataLoadProcessing(). This method will be invoked
 *    <b>before</b> every responseEvent is processed.
 * 5. If required, provide implementation for doPostDataLoadProcessing(). This method will be invoked
 *    <b>after</b> every responseEvent is processed.
 * 
 * @author Dhanashree Apte
 * @modelguid {7FABE96E-6643-4CA8-BCB3-AE59A2B993E1}
 **/

// WORK IN PROGRESS:
// TBD: 1. Discuss with Eric the need for something like setActionCommand() on ResponseEvent.
//      2. completed only the data "load" part. more work neede to handle  data "save". Coming soon!!!
//      3. move doPreDataLoadProcessing(), doDataLoad() and doPostDataLoadProcessing() to an interface.
//      4. The displaycommand can then be generic enough to be moved out of this panel...can be used
//		   for everything else too i think!!

public class RegisteredPubSubPanel extends PubSubPanel {

	/** @modelguid {EE5985D8-C707-4F37-9149-577B18679FF3} */
    private IEvent[] displayEvents;
	/** @modelguid {9394A193-8F06-4FFF-963B-D9A949ACC875} */
    private ICommand displayCommand = new DisplayCommand();

    /**
     * Creates an instance of RegisteredPubSubPanel which is registered to listen
     * for the event specified by serviceName.
     * @param topic The topic for which the event is registered. topic.getTopic() is used for
     *				registration.
     * @param serviceName The service name that will be used to factory the event to be registered.
     * @modelguid {03984B00-4577-45FD-8200-ABC44FB6EC12}
     */
    public RegisteredPubSubPanel(ITopic topic, String serviceName) {
		register(topic, serviceName);
    }

	/** @modelguid {87F95C27-3F3D-46DD-BF43-39F22F7CDE57} */
    public RegisteredPubSubPanel(String serviceName) {
		register(null, serviceName);
    }

    /**
     * Creates an instance of RegisteredPubSubPanel which is registered to listen
     * for the events specified by serviceNames.
     * @param topic The topic for which the event is registered. topic.getTopic() is used for
     *				registration.
     * @param serviceName The service names which will be used to factory the events to be registered.
     * @modelguid {93F8DE5D-E14A-4182-9D95-4B642EB14B9E}
     */
    public RegisteredPubSubPanel(ITopic topic, String[] serviceNames) {
		register(topic, serviceNames);
    }

	/** @modelguid {D0773118-A8EA-46CB-AB0E-1C67537E1123} */
    public RegisteredPubSubPanel(ITopic topic) {
		super(topic);
    }

	/** @modelguid {2C99E0F0-B013-4E00-B10F-7159495565E0} */
    public RegisteredPubSubPanel() {

    }

    /**
     * Creates the event corresponding to service name passed and registers it
     * for the specified topic.
     * Use this function when the panel listens to a single Reply Event.
     * @param topic The topic for which the event is registered. topic.getTopic() is used for
     *				registration.
     * @param serviceName The service name that will be used to factory the event to be registered.
     * @modelguid {9F851AF7-37C6-45EC-954B-EDC3679CF674}
     */
	public void register(ITopic topic, String serviceName) {
        displayEvents = new IEvent[1];
        IEvent aDispEvent = EventFactory.getInstance(serviceName);
        displayEvents[0] = aDispEvent;
        if(topic != null) {
			aDispEvent.setTopic(topic.getTopic());
        }
        ContextManager.currentContext().registerEventListener(displayCommand, aDispEvent);
	}

    /**
     * Creates the events corresponding to service names passed and registers each one of them
     * for the specified topic.
     * Use this function when the panel listens to multiple Reply Events.
     * @param topic The topic for which the event is registered. topic.getTopic() is used for
     *				registration.
     * @param serviceNames The service names that will be used to factory the events to be registered.
     * @modelguid {703B3471-A815-47D6-B49F-97DC3241F252}
     */
	public void register(ITopic topic, String[] serviceNames) {
		displayEvents = new IEvent[serviceNames.length];
        IEvent aDispEvent;
        for(int index=0; index<serviceNames.length; index++) {
			register(topic, serviceNames[index]);
        }
	}

    /**
     * Registers appropriate commands.
     * @modelguid {97282DE9-A6CA-45D7-B929-A04FFDFE7EDE}
     */
	public void register(ITopic topic) {
	}

    /**
     * Unregisters all the commands.
     * @modelguid {07AF5BCC-F994-413D-8205-B6801D81C008}
     */
	public void unregister(ITopic topic){
	}
	
	/** @modelguid {2A9CCB26-E072-451D-834A-48D51991B6BA} */
	public String hashKey() {
	   return null;
	}

    /**
     * Called before the display command finishes copying the properties.
     * If any extra processing needs to be done in response to the display event,
     * the subclass hould override this method and provide an implementation.
     * @modelguid {40B5FA4E-BCDC-48D6-B5FC-B6AFFFD0EAEC}
     */
    protected void doPreDataLoadProcessing() {

    }

	/** @modelguid {B17C2704-CBAE-4E3A-8BDD-63DE33067C28} */
    private void doDataLoad(IEvent event) {
		PropertyCopier.copyProperties(event, this);
    }

    /**
     * Called after the display command finishes copying the properties.
     * If any extra processing needs to be done in response to the display event,
     * the subclass hould override this method and provide an implementation.
     * @modelguid {E971796D-3267-4FB4-A90A-8803F12A2045}
     */
    protected void doPostDataLoadProcessing() {

    }

	/**
	 * The listener for the display event.
	 * @modelguid {1338E91F-3CE7-4394-96CC-378CAA9C9769}
     */
	public class DisplayCommand implements ICommand {
	    /** Default constructor 
	     * @modelguid {051B2E99-84CD-4D55-97CD-8F645D527320}
	     */
	    public DisplayCommand() { }
	
	    /**
	     *Provides behavior for application requirements. It is executed when event is posted from requesting context.
	     *@param event - houses data for command operation.
	     *@exception thrown if error in application behavior
	     * @modelguid {72FB9866-3BFC-460B-976A-BCD335FDC851}
	     */
	    public void execute(IEvent event) throws Exception {
            doPreDataLoadProcessing();
			doDataLoad(event);
            doPostDataLoadProcessing();
        }
	
	    /**
	     *Upon command registration with context this method will get executed
	     *@param event - sample event data.
	     * @modelguid {ADE0F1FA-8B71-4D56-BEDB-E2EBBD85872C}
	     */
	    public void onRegister(IEvent event) { }
	
	    /**
	     *Upon command unregistration from context this method will get executed
	     *@param event - sample event
	     * @modelguid {E83B1E21-7887-4D5D-913E-E5D0FF7588D2}
	     */
	    public void onUnregister(IEvent event) { }
	
	    /**
	     *If command requires data before execute is called context will place the in command
	     *@param object - housing input data
	     * @modelguid {3D323252-D5A6-4C36-949D-2A2955DD9E36}
	     */
	    public void update(Object object) { }
	}

}
