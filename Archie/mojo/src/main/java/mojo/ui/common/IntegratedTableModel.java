/* Generated by Together */

package mojo.ui.common;

import javax.swing.event.*;
import mojo.km.messaging.*;
import javax.swing.table.TableColumn;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Enumeration;

/**
 * Responsible for define a table model that already has listeners registered
 * for mojo events that will populate column fields from partition returns.
 * @author Eric A Amundson
 * @version 1.0
 * @contextManagerName <{mojo.km.context.Default.DefaultContextManager}>
 * @requestDispatch <{mojo.km.dispatch.CurrentContext.CurrentContextStrategy}>
 * @replyDispatch <{mojo.km.dispatch.CurrentContext.CurrentContextStrategy}>
 * @asyncDispatch <{mojo.km.dispatch.CurrentContext.CurrentContextStrategy}>
 * @queueDispatch <{mojo.km.dispatch.CurrentContext.CurrentContextStrategy}>
 * @pubSubDispatch <{mojo.km.dispatch.CurrentContext.CurrentContextStrategy}>
 * @debugMode false
 * @connectionPool false
 * @workflowEnabled false
 * @modelguid {4FA2685F-F7C0-43D1-A47F-B85621BE3DAE}
 */
public class IntegratedTableModel extends javax.swing.table.DefaultTableModel {
    /**
     * Construct a integrated table with inbound event service name outbound event service name. Detail key value. etc.
     * @param topic - detail value of the key property.
     * @param topicPropertyName - name of the property for the topic.
     * @param inBoundServiceName - the naming.<boundary name>ServiceName.<value> string associated with the inbound service.
     * @param outBoundServiceName - the naming.<control name>ServiceName.<value> string associated with the outbound service.
     * @param keyPropertyName - name of property associated with row key.
     * @param theTable - use to display this model.
     * @modelguid {B1963C84-43F9-4C75-88D8-5A8F66E4A31B}
     */
    public IntegratedTableModel(String topic, String topicPropertyName, String inBoundServiceName, String outBoundServiceName,
        String keyPropertyName, IntegratedTable theTable) {
            this.theTable = theTable;
            this.topic = topic;
            this.topicPropertyName = topicPropertyName;
            this.keyPropertyName = keyPropertyName;
            this.outBoundServiceName = outBoundServiceName;
            this.inBoundServiceName = inBoundServiceName;
            this.addTableModelListener(dChangeListener);
            displayEvent = EventFactory.getInstance(inBoundServiceName);
		    displayEvent.setTopic(topic);
            register();
    }

	/** @modelguid {E603097F-6613-49EA-9A4E-1634EEC44145} */
    public void register()
    {
		mojo.km.context.ContextManager.currentContext().registerEventListener(
			new DisplayRowCommand(this), displayEvent);
    }

	/** @modelguid {107A75D5-57FD-4BE2-B3D9-D79D6E8F9CA1} */
    public void unregister()
    {
    }

    /**
     * Add a property column to this table.  It will add a column tied to the named property.
     * @param columnName - column header name.
     * @param propertyID - name of bean property tied to the column.
     * @modelguid {81976F01-6359-4C2D-9EA8-868DA98D3269}
     */
    public void addColumn(String columnName, String propertyID) {
        int columnCount = this.getColumnCount();
        addColumn(columnName);
        //TableColumn tColumn = theTable.getColumnModel().getColumn( columnCount );
        columnHash.put(columnName, propertyID);
    }

    /** Helper class used to factory appropriate event whenever a data item has been changed by a user. 
     * @modelguid {27056135-13C1-4B8A-A3F4-96B91C2C3C03}
     */
    class DataChangeListener implements TableModelListener {
		/** @modelguid {597B2E1B-A9DE-4C39-A8AF-EE7B8EBB2D38} */
        public void tableChanged(TableModelEvent e) {
            if (e.getType() == e.UPDATE) {
                int row = e.getFirstRow();
                RowEntry rowData = (RowEntry)rowIndex.get("" + row);
                if (rowData != null) {
                    String id = rowData.getRowID();
                    IEvent outEvent = rowData.getOutEvent();
                    for (int i = 0; i < columnHash.size(); i++) {
                        int colIndex = IntegratedTableModel.this.theTable.convertColumnIndexToView(i);
                        String colName = IntegratedTableModel.this.getColumnName(colIndex);
                        String propertyID = (String)columnHash.get(colName);
                        Object value = IntegratedTableModel.this.getValueAt(rowData.getRowIndex(), colIndex);
                        if (value != null) {
                        mojo.km.utilities.Reflection.invokeMutatorMethod(outEvent, propertyID, value);
                        }
                    }
                    mojo.km.utilities.Reflection.invokeMutatorMethod(outEvent, topicPropertyName, topic);
                    mojo.km.utilities.Reflection.invokeMutatorMethod(outEvent, keyPropertyName, id);
                    theTable.postEvent(outEvent);
                }
            }
        }
    }


	/** @modelguid {52C549EC-9329-45BE-950A-957279E64555} */
    void setupRow() {
        int rowCount = getRowCount();
        Object hRow = null;
        hRow = createRow("");
        setRowCount(rowCount + 1);
        rowIndex.put("" + rowCount, hRow);
    }

	/** @modelguid {8FBF8AA1-1C63-4E74-898E-BC82D95DC64A} */
    protected EventCreatorRow createRow(String rowID) {
        return new RowEntry(rowID);
    }

    /**
     * Responsible for implementing behavior of analysis method displayRecipe of boundry class
     * ui.managebeerrecipesinterface.BeerRecipeSelectionForm
     *@author Design detail addin
     *@version 1.0
     * @modelguid {9E6F9AA4-C648-48DB-97AC-E4C62999A042}
     */
    class DisplayRowCommand implements mojo.km.context.ICommand {
        /** Default constructor 
         * @modelguid {888E1912-47E8-4415-B3C7-7F0C928BF5F5}
         */
        public DisplayRowCommand(IntegratedTableModel tModel) { this.tModel = tModel; }

        /**
         *Provides behavior for application requirements. It is executed when event is posted from requesting context.
         *@param event - houses data for command operation.
         *@exception thrown if error in application behavior
         * @modelguid {DD979EFD-CBD9-4612-AC0E-4F268C04786A}
         */
        public void execute(IEvent event) throws Exception {
            int rowCount = tModel.getRowCount();
            String id = (String)mojo.km.utilities.Reflection.invokeAccessorMethod(event, keyPropertyName);
            Object hRow = null;
            if (dupTable.containsKey(id)) {
                hRow = dupTable.get(id);
                rowCount = ((RowEntry)hRow).getRowIndex();
            } else {
                hRow = createRow(id);
                tModel.setRowCount(rowCount + 1);
                dupTable.put(id, hRow);
                rowIndex.put("" + rowCount, hRow);
            }
            tModel.removeTableModelListener(dChangeListener);
            for (int i = 0; i < columnHash.size(); i++) {
                int colIndex = IntegratedTableModel.this.theTable.convertColumnIndexToView(i);
                String colName = IntegratedTableModel.this.getColumnName(colIndex);
                String propertyID = (String)columnHash.get(colName);
                Object value = mojo.km.utilities.Reflection.invokeAccessorMethod(event, propertyID);
                IntegratedTableModel.this.setValueAt(value, rowCount, colIndex);
            }
            tModel.addTableModelListener(dChangeListener);
        }

        /**
         *Upon command registration with context this method will get executed
         *@param event - sample event data.
         * @modelguid {620F1432-6BBB-4FBD-8F7C-1E307F82FA0C}
         */
        public void onRegister(IEvent event) { }

        /**
         *Upon command unregistration from context this method will get executed
         *@param event - sample event
         * @modelguid {E625F9CC-0B63-4B15-AB16-4068323189A7}
         */
        public void onUnregister(IEvent event) { }

        /**
         *If command requires data before execute is called context will place the in command
         *@param object - housing input data
         * @modelguid {6561B5D7-8651-4263-8CEE-C8CFB2E81481}
         */
        public void update(Object object) { }

		/** @modelguid {BC0CDB49-7525-4C3D-89BB-E70FFA203490} */
        IntegratedTableModel tModel = null;
    }


    /** Helper class that defines an abstraction for a table row entry. 
     * @modelguid {D1D0E57A-BF2F-4629-9B58-AA782EEEC7AD}
     */
    public class RowEntry implements EventCreatorRow {
		/** @modelguid {0EE8F128-FB98-4C0D-983F-AF3997A284C6} */
        RowEntry(String rowID) {
            rowIndex = IntegratedTableModel.this.getRowCount();
            this.rowID = rowID;
        }

		/** @modelguid {EB647F8A-66AE-4540-B7A8-5A2FDC187D96} */
        public IEvent getOutEvent() { return outEvent; }

		/** @modelguid {E866D559-9FEB-4AF8-8C0B-D4F25F9AAA70} */
        public int getRowIndex() { return rowIndex; }

		/** @modelguid {91E408FF-D913-4B03-8E0E-2B0F70CAE59D} */
        public String getRowID() { return rowID; }

		/** @modelguid {3627AA51-B7F7-4349-9672-432C68D8C949} */
        IEvent outEvent = EventFactory.getInstance(outBoundServiceName);
		/** @modelguid {71438909-9B01-426F-85D9-F4D767D187D8} */
        int rowIndex;
		/** @modelguid {707E051C-5FDB-444A-AC47-394FD0A6F61A} */
        String rowID = "";
    }


	/*
    Make columns greater than 0 editable.
	 * @modelguid {3839894C-C7E3-4BC4-9DD7-E16031B65811}
	 */

    public boolean isCellEditable(int row, int col) {
        //Note that the data/cell address is constant,
        //no matter where the cell appears onscreen.
        return true;
    }

	/** @modelguid {F52B6D1C-E94C-4807-852E-5AFA5A19CCE6} */
    private IntegratedTable theTable = null;
	/** @modelguid {FB7FA2B7-A8D3-4BDC-AFDE-284231178C3E} */
    private Hashtable dupTable = new Hashtable();
	/** @modelguid {17E846AC-1CB7-4F6D-80FD-B3F0231810F5} */
    private DataChangeListener dChangeListener = new DataChangeListener();
	/** @modelguid {04A99B48-156E-4BBC-B963-1C6661503CE8} */
    private String topic = null;
	/** @modelguid {73A19FBD-4495-40C6-B6FB-05E76D63FFB6} */
    private String topicPropertyName = null;
	/** @modelguid {5EFA752A-4291-4AF3-A5BD-0D8BD2BFA105} */
    private String keyPropertyName = null;
	/** @modelguid {848D847B-5959-4E32-BDDF-58931B319D5E} */
    private String outBoundServiceName = null;
	/** @modelguid {E4863AFB-86A9-448D-9EF7-6E25315B7E7E} */
    private String inBoundServiceName = null;
	/** @modelguid {6A4D2755-1641-4EF3-B3A3-ED3B65DF5AB3} */
    private Hashtable columnHash = new Hashtable();
	/** @modelguid {40712FE2-E836-4034-842F-EFC8478EFF01} */
    private Hashtable rowIndex = new Hashtable();
	/** @modelguid {92574FE0-AC6F-43F6-9C92-FE4E18684C07} */
    IEvent displayEvent = null;
}
