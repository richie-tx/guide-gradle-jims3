/* Generated by Together */

package mojo.ui.common;
import mojo.km.messaging.IEvent;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import javax.swing.event.SwingPropertyChangeSupport;
import mojo.km.context.ContextManager;
import mojo.km.messaging.EventFactory;

/**
* Responsible for managing event reception and sending upon data changes.
* @modelguid {EEEC2766-C9D5-4F51-AA9E-9D8BF9461DEB}
*/
public class PropertyComponentManager {

	/** @modelguid {546E5417-A15A-4A9E-AA78-601CC62625DA} */
    public PropertyComponentManager( String topic, String inboundServiceName, IEvent outboundEvent, PropertyComponent propertyComponent, String changingProperty)
    {
        propertyChangeSupport = new SwingPropertyChangeSupport( propertyComponent );
		this.propertyComponent = propertyComponent;
        propertyChangeSupport.addPropertyChangeListener(new ValueChangeListener() );
        IEvent inEvent = EventFactory.getInstance( inboundServiceName );
        inEvent.setTopic( topic );
        ContextManager.currentContext().registerEventListener( new DisplayValueCommand(), inEvent  );

    }

	/** @modelguid {202AB37F-0A7E-4A93-A4CA-221CDBBA92E9} */
    class ValueChangeListener implements PropertyChangeListener {
		/** @modelguid {158EA006-F703-491D-AE9A-4FB6733A573C} */
        public void propertyChange(PropertyChangeEvent changeEvent) {
            System.out.println( "name = " + changeEvent.getPropertyName() + "value = " + changeEvent.getNewValue() );
        }
    }
    /**
     * Responsible for implementing behavior of analysis method displayRecipe of boundry class
     * ui.managebeerrecipesinterface.BeerRecipeSelectionForm
     *@author Design detail addin
     *@version 1.0
     * @modelguid {E54DC3E6-77B8-44F7-9F8C-FDA195F89AA8}
     */
    class DisplayValueCommand implements mojo.km.context.ICommand {
        /** Default constructor 
         * @modelguid {C4CB63F1-B956-49D2-A82A-42642DBFDFBA}
         */
        public DisplayValueCommand() {  }

        /**
         *Provides behavior for application requirements. It is executed when event is posted from requesting context.
         *@param event - houses data for command operation.
         *@exception thrown if error in application behavior
         * @modelguid {DEA6D675-E54F-47FA-986C-9B98152620B2}
         */
        public void execute(IEvent event) throws Exception {
                Object value = mojo.km.utilities.Reflection.invokeAccessorMethod(event, propertyComponent.getName());
                propertyComponent.setValue( value );
        }

        /**
         *Upon command registration with context this method will get executed
         *@param event - sample event data.
         * @modelguid {B5B7CA17-ACA8-4772-8406-8E6831D1522B}
         */
        public void onRegister(IEvent event) { }

        /**
         *Upon command unregistration from context this method will get executed
         *@param event - sample event
         * @modelguid {A7BBD2FD-E01B-4CA7-86E4-A859C101CA33}
         */
        public void onUnregister(IEvent event) { }

        /**
         *If command requires data before execute is called context will place the in command
         *@param object - housing input data
         * @modelguid {4FE1736A-BFFC-4E25-BBD6-3ED5FB7D5B7F}
         */
        public void update(Object object) { }

    }



	/** @modelguid {7215DE3D-96D7-404D-8BB8-2DBC1995FC78} */
    private PropertyComponent propertyComponent = null;
	/** @modelguid {EAB48FE0-ADD9-4636-9854-0937C3C88545} */
    private SwingPropertyChangeSupport propertyChangeSupport = null;
}
