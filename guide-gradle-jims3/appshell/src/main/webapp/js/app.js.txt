<!-- Javascripts for JIMS2 App View **  Alphabetize All Scripts-->
<script language=javascript>


// Begin AutoTab Script 
function autoTab(input,len) {
   if(input.value.length >= len){
      input.value = input.value.slice(0, len);
      input.form[(getIndex(input)+1) % input.form.length].focus();
   }
return true;
}
function getIndex(input) {
   var index = -1;
   var i = 0;
   var found = false;
   while (i < input.form.length && index == -1)
   if (input.form[i] == input)index = i;
     else i++;
   return index;
} 
// End AutoTab Script

// Begin Date Entry In Any Format Script
function checkdate(objName) {
var datefield = objName;

if (chkdate(objName) == false) {
datefield.select();
alert("That date is invalid.  Please enter a valid date in any format.");
datefield.focus();
return false;
}
}

function chkdate(objName) {
var strDatestyle = "US"; //United States date style
var strDate;
var strDateArray;
var strDay;
var strMonth;
var strYear;
var intday;
var intMonth;
var intYear;
var booFound = false;
var datefield = objName;
var strSeparatorArray = new Array("-"," ","/",".");
var intElementNr;
var err = 0;
var strMonthArray = new Array(12);
strMonthArray[0] = "Jan";
strMonthArray[1] = "Feb";
strMonthArray[2] = "Mar";
strMonthArray[3] = "Apr";
strMonthArray[4] = "May";
strMonthArray[5] = "Jun";
strMonthArray[6] = "Jul";
strMonthArray[7] = "Aug";
strMonthArray[8] = "Sep";
strMonthArray[9] = "Oct";
strMonthArray[10] = "Nov";
strMonthArray[11] = "Dec";
strDate = datefield.value;
if (strDate.length < 1) {
return true;
}
for (intElementNr = 0; intElementNr < strSeparatorArray.length; intElementNr++) {
if (strDate.indexOf(strSeparatorArray[intElementNr]) != -1) {
strDateArray = strDate.split(strSeparatorArray[intElementNr]);
if (strDateArray.length != 3) {
err = 1;
return false;
}
else {
strDay = strDateArray[0];
strMonth = strDateArray[1];
strYear = strDateArray[2];
}
booFound = true;
   }
}
if (booFound == false) {
if (strDate.length>5) {
strDay = strDate.substr(0, 2);
strMonth = strDate.substr(2, 2);
strYear = strDate.substr(4);
}
else {
	strDay = ""	
	strMonth = ""
	strYear = ""
}   
}
if (strYear.length < 2) {
err = 2;
return false;
}
if ((strYear.length != 2) && (strYear.length !=4)) {
err = 2;
return false;
}
if (strYear.length == 2) {
	if (strYear < 11) {
		strYear = '20' + strYear;
	}
	else {
		strYear = '19' + strYear;
	}
}
if (strDatestyle == "US") {
strTemp = strDay;
strDay = strMonth;
strMonth = strTemp;
}
intday = parseInt(strDay, 10);
if (isNaN(intday)) {
err = 2;
return false;
}
intMonth = parseInt(strMonth, 10);
if (isNaN(intMonth)) {
for (i = 0;i<12;i++) {
if (strMonth.toUpperCase() == strMonthArray[i].toUpperCase()) {
intMonth = i+1;
strMonth = strMonthArray[i];
i = 12;
   }
}
if (isNaN(intMonth)) {
err = 3;
return false;
   }
}
intYear = parseInt(strYear, 10);
if (isNaN(intYear)) {
err = 4;
return false;
}
if (intMonth>12 || intMonth<1) {
err = 5;
return false;
}
if ((intMonth == 1 || intMonth == 3 || intMonth == 5 || intMonth == 7 || intMonth == 8 || intMonth == 10 || intMonth == 12) && (intday > 31 || intday < 1)) {
err = 6;
return false;
}
if ((intMonth == 4 || intMonth == 6 || intMonth == 9 || intMonth == 11) && (intday > 30 || intday < 1)) {
err = 7;
return false;
}
if (intMonth == 2) {
if (intday < 1) {
err = 8;
return false;
}
if (LeapYear(intYear) == true) {
if (intday > 29) {
err = 9;
return false;
}
}
else {
if (intday > 28) {
err = 10;
return false;
}
}
}
strMonth = intMonth.toString();
if (strMonth.length < 2){
	strMonth = "0" + strMonth;
}	
strDay = intday.toString();
if (strDay.length < 2){
	strDay = "0" + strDay;
}
datefield.value = strMonth + "/" + strDay +"/" + strYear;
return true;
}

function LeapYear(intYear) {
if (intYear % 100 == 0) {
if (intYear % 400 == 0) { return true; }
}
else {
if ((intYear % 4) == 0) { return true; }
}
return false;
}
// End Date Entry In Any Format Script

//Begin Navigates to another page
	/*params: location - new page to be redirected to
	*/
	function goNav(location)
	{
		if (location == "back"){
			history.go(-1);
			}else{
				window.location.href=location;
			}
	}
//End Navigates to another page

//-- TextArea maxlength JavaScript 
function textCounter(field, maxlimit) {
  if (field.value.length > maxlimit) {
     alert('Maximum text length reached for this field');
     field.value = field.value.substring(0, maxlimit);
  } else {
     maxlimit = maxlimit - field.value.length;
  }
}
//-- End TextArea maxlength Javascript


//-- Begin SelectSwapMove script  
function addIt( fieldTo ) { 
	var fieldFrom = document.form.listFrom;
	if( fieldFrom.selectedIndex >= 0 ) { 
		for( var i = fieldFrom.selectedIndex; i < fieldFrom.length; i++ ) { 
			var skip = false; 
			if( fieldFrom[i].selected ) { 
				if( i == -1 || fieldFrom[i].value == '--' ) { 
					return; 
				} 
				for( var j = 0; j < fieldTo.options.length; j++ ) { 
					if( fieldFrom[i].text == fieldTo[j].text ) { 
						alert( "'" + fieldFrom[i].text + "' is already in your list." ); 
						skip = true; 
						break; 
					} 
				} 
				if( skip ) { 
					continue; 
				} 
				var o = new Option( fieldFrom[i].text, fieldFrom[i].value ); 
				fieldTo.options[fieldTo.options.length] = o; 
			} 
		} 
	} else { 
		alert ( "Please select item to be added." ); 
	} 
} 
 
function removeIt( fieldFrom ) { 
	if( fieldFrom.selectedIndex >= 0 ) { 
		for( var i = fieldFrom.length-1, s = fieldFrom.selectedIndex; i >=s ; i-- ) { 
			if( fieldFrom.options[i].selected ) { 
				fieldFrom.options[i] = null; 
			} 
		} 
	} else { 
		alert( "Please select item to be removed." ); 
	} 
}

function removeAll( fieldFrom ) {	 
	for( var i = fieldFrom.length-1, s = fieldFrom.selectedIndex; i >=s ; i-- ) { 		
		fieldFrom.options[i] = null;				
	}	
}

	function move(field1, field2, moveAll) 
	{   	    	
    	for(var i = 0; i<field1.length; i++) {
    		if(field1.options[i].selected == true || moveAll == true) {			   		   
			   var option = new Option(field1.options[i].text, field1.options[i].value);
			   
			   // For conforming to W3C standards
			   // field2.add(option, field2.options[field2.options.length]);
			   
			   // For implementing IE
			   field2.add(option, 0);
			   
			   field1.remove(i);
			   i--;
			}
    	}
    }
    
    function selectAllData(field1) {    	
    	for(var i = 0; i<field1.length; i++) {
    		field1.options[i].selected = true;
    	}
    }
// End SelectSwapMove script 

// Begin Reset Button Set Focus script 
function setFocus(theForm)
{
  for(var i=0; i<theForm.length; i++)
  {
     if(theForm.elements[i].type == 'text')
     {
         theForm.elements[i].focus();
         break;
     }
   }
 }
// End Reset Button Set Focus script 

function validateRadios(el, name, msg) {

myOption = -1;
if (document.getElementsByName(name).length > 1)
	
	{
	
		for (i=0; i<document.getElementsByName(name).length; i++) {
	
		if (document.getElementsByName(name)[i].checked) {
	
		myOption = i;
	
	}

}

	if (myOption == -1) {

		alert(msg);

	return false;

	}

}

return true;


}


//Begin change case - changes form field's value to Upper or Lower Case
	/*params: luFlag string "lower' or "upper" 
	/*params: el - the form element object ie: input type=text onblur=fx(this) 
	*/
function changeCase(luFlag, el)
{	
	var val = el.value;
	if (luFlag == "lower")
	{
		val = val.toLowerCase();
	}else if (luFlag == "upper")
		{				
			val = val.toUpperCase();
		}else alert("EXCEPTION in changeCase() - Pass Paramter 'lower' or 'upper'");	
	
	el.value=val;
}


/**
* When a parent checkbox is checked, all of its children should be checked too
*/
function checkChildren(el){
  var theForm = el.form;
 var thisCheckName = el.name;
 var childOfString ="childOf" + el.id;
 var objCheckBoxes = theForm.elements[thisCheckName];
 var countCheckBoxes = objCheckBoxes.length;
 
 for(var i = 0; i < countCheckBoxes; i++)
 {
  var checkboxId = objCheckBoxes[i].id;
  if (checkboxId.indexOf(childOfString) == 0)
  {
    if (el.checked)
    {
    	
     	document.getElementById(objCheckBoxes[i].id).checked=true;
     	document.getElementById(objCheckBoxes[i].id).editable=false;
    }
    else
    {
    	document.getElementById(objCheckBoxes[i].id).checked=false;
    }
  }
 }
}

//show hide where there is an expand (plus sign) - and u want to show multiple rows simultaneously
 /*params: imgName - name of the + or - sign, rowPrepend - ID prepend of the row, rowNums - number of rows to hide/show
 */
 function showHideMulti(imgName, rowPrepend, rowNums, path){
 
  var appendName = rowPrepend + rowNums;
  var currentImage = window.document.images[imgName].src;
 
  if (currentImage.indexOf("contract") < 0)
  {
   window.document.images[imgName].src=path+"/images/contract.gif";
  } else{
   window.document.images[imgName].src=path+"/images/expand.gif";
  }
 	
  for (var intI=0; intI<rowNums; intI++) {
   appendName = rowPrepend + intI;
   if (document.getElementById(appendName).className=='visibleTR')
   {
    document.getElementById(appendName).className='hidden';
   } else{
    document.getElementById(appendName).className='visibleTR';
   }
  }
 
 }
 
 
 function changeFormActionURL(formName, URL, doSubmit){
	var myForm=document.getElementById(formName);
	myForm.action = URL;
	if(doSubmit){
		myForm.submit();
	}
	return true;
}

 function changeElementValuebyId(elementId, myValue){
	myElement=document.getElementById(elementId);
	myElement.value= myValue;
	return true;
}

// This function disables a submit button after one submit to prevent multible submits and duplicate information.

function disableSubmit(button, form)

{

  var hasURLExtensions=-1;
  var myAction=form.action;
  hasURLExtensions=myAction.indexOf("?");
  var btnVal=button.value;
  var hasAmpersendInValue;
  hasAmpersendInValue=btnVal.indexOf("&");
  if(hasAmpersendInValue!=-1){
     btnVal=btnVal.replace(/&/,"%26");
  }
  if(hasURLExtensions!=-1){
       form.action += "&"+button.name+"="+btnVal;
  }
  else{
       form.action += "?"+button.name+"="+btnVal;

  }
  form.submit();
  button.disabled=true;
  return false;

}

// **********  Begin Disable Key's Section
function disableEvent(evt){
	evt.returnValue=false; 
	evt.cancel = true;
}

function checkEnterKey(evt,disableEnter){
	var currentElement=evt.srcElement;
	 var key = evt.keyCode;
    if(event.ctrlKey==true){
    	if(key==78){  // the n key
    		alert("Sorry opening a new browser window is not allowed.");
    		disableEvent(evt);
    		return false;
    	}	
    }
    
     if (disableEnter==true && key==13){
     	if(currentElement!=null){
     		if(currentElement.type == 'textarea'){
     			// alert("Have a text area don't do anything with the enter key");
     			return true;
     		}
     	}
		alert("This page has multiple submit buttons. \n \n  Please select appropriate submit button.");
	 	disableEvent(evt);
		return false;
	 }
	 return true;
   } 

// **********  End Disable Key's Section


</script>
<!--  End Javascripts for JIMS2 App View  -->
